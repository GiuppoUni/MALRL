[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "O_EXCL",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "ImageRequest",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {}
    },
    {
        "label": "Vector3r",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {}
    },
    {
        "label": "Pose",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {}
    },
    {
        "label": "Pose",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {}
    },
    {
        "label": "Vector3r",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {}
    },
    {
        "label": "to_eularian_angles",
        "importPath": "airsim.utils",
        "description": "airsim.utils",
        "isExtraImport": true,
        "detail": "airsim.utils",
        "documentation": {}
    },
    {
        "label": "to_quaternion",
        "importPath": "airsim.utils",
        "description": "airsim.utils",
        "isExtraImport": true,
        "detail": "airsim.utils",
        "documentation": {}
    },
    {
        "label": "to_quaternion",
        "importPath": "airsim.utils",
        "description": "airsim.utils",
        "isExtraImport": true,
        "detail": "airsim.utils",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "draw",
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "isExtraImport": true,
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "pylab",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pylab",
        "description": "pylab",
        "detail": "pylab",
        "documentation": {}
    },
    {
        "label": "array",
        "importPath": "pylab",
        "description": "pylab",
        "isExtraImport": true,
        "detail": "pylab",
        "documentation": {}
    },
    {
        "label": "arange",
        "importPath": "pylab",
        "description": "pylab",
        "isExtraImport": true,
        "detail": "pylab",
        "documentation": {}
    },
    {
        "label": "uint8",
        "importPath": "pylab",
        "description": "pylab",
        "isExtraImport": true,
        "detail": "pylab",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "eventlet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "eventlet",
        "description": "eventlet",
        "detail": "eventlet",
        "documentation": {}
    },
    {
        "label": "Timeout",
        "importPath": "eventlet",
        "description": "eventlet",
        "isExtraImport": true,
        "detail": "eventlet",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "KDTree",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "KDTree",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "KDTree",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "KDTree",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "KDTree",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "KDTree",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "airsim",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "airsim",
        "description": "airsim",
        "detail": "airsim",
        "documentation": {}
    },
    {
        "label": "MultirotorClient",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {}
    },
    {
        "label": "Vector3r",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {}
    },
    {
        "label": "MultirotorClient",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "scipy.interpolate",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scipy.interpolate",
        "description": "scipy.interpolate",
        "detail": "scipy.interpolate",
        "documentation": {}
    },
    {
        "label": "interp1d",
        "importPath": "scipy.interpolate",
        "description": "scipy.interpolate",
        "isExtraImport": true,
        "detail": "scipy.interpolate",
        "documentation": {}
    },
    {
        "label": "Proj",
        "importPath": "pyproj",
        "description": "pyproj",
        "isExtraImport": true,
        "detail": "pyproj",
        "documentation": {}
    },
    {
        "label": "Proj",
        "importPath": "pyproj",
        "description": "pyproj",
        "isExtraImport": true,
        "detail": "pyproj",
        "documentation": {}
    },
    {
        "label": "mul",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "gym",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gym",
        "description": "gym",
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "Qr",
        "importPath": "tensorflow.python.ops.gen_linalg_ops",
        "description": "tensorflow.python.ops.gen_linalg_ops",
        "isExtraImport": true,
        "detail": "tensorflow.python.ops.gen_linalg_ops",
        "documentation": {}
    },
    {
        "label": "MazeView2D",
        "importPath": "gym_maze.envs.maze_view_2d",
        "description": "gym_maze.envs.maze_view_2d",
        "isExtraImport": true,
        "detail": "gym_maze.envs.maze_view_2d",
        "documentation": {}
    },
    {
        "label": "MazeView2D",
        "importPath": "gym_maze.envs.maze_view_2d",
        "description": "gym_maze.envs.maze_view_2d",
        "isExtraImport": true,
        "detail": "gym_maze.envs.maze_view_2d",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "block",
        "importPath": "numpy.core.shape_base",
        "description": "numpy.core.shape_base",
        "isExtraImport": true,
        "detail": "numpy.core.shape_base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "isExtraImport": true,
        "detail": "gym_maze.envs.maze_env",
        "documentation": {}
    },
    {
        "label": "MazeEnv",
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "isExtraImport": true,
        "detail": "gym_maze.envs.maze_env",
        "documentation": {}
    },
    {
        "label": "MazeEnv",
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "isExtraImport": true,
        "detail": "gym_maze.envs.maze_env",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "gym.envs.registration",
        "description": "gym.envs.registration",
        "isExtraImport": true,
        "detail": "gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "trajs_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "setSeed",
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "isExtraImport": true,
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "mplot3d",
        "importPath": "mpl_toolkits",
        "description": "mpl_toolkits",
        "isExtraImport": true,
        "detail": "mpl_toolkits",
        "documentation": {}
    },
    {
        "label": "mplot3d",
        "importPath": "mpl_toolkits",
        "description": "mpl_toolkits",
        "isExtraImport": true,
        "detail": "mpl_toolkits",
        "documentation": {}
    },
    {
        "label": "mplot3d",
        "importPath": "mpl_toolkits",
        "description": "mpl_toolkits",
        "isExtraImport": true,
        "detail": "mpl_toolkits",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "NewMyAirSimClient",
        "importPath": "airsimgeo.newMyAirSimClient",
        "description": "airsimgeo.newMyAirSimClient",
        "isExtraImport": true,
        "detail": "airsimgeo.newMyAirSimClient",
        "documentation": {}
    },
    {
        "label": "NewMyAirSimClient",
        "importPath": "airsimgeo.newMyAirSimClient",
        "description": "airsimgeo.newMyAirSimClient",
        "isExtraImport": true,
        "detail": "airsimgeo.newMyAirSimClient",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "SCALE_SIZE",
        "importPath": "layer1mod",
        "description": "layer1mod",
        "isExtraImport": true,
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "QUIT",
        "importPath": "pygame.constants",
        "description": "pygame.constants",
        "isExtraImport": true,
        "detail": "pygame.constants",
        "documentation": {}
    },
    {
        "label": "poisson",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "DotMap",
        "importPath": "dotmap",
        "description": "dotmap",
        "isExtraImport": true,
        "detail": "dotmap",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "winsound",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winsound",
        "description": "winsound",
        "detail": "winsound",
        "documentation": {}
    },
    {
        "label": "DrivetrainType",
        "kind": 6,
        "importPath": "airsimgeo.newMyAirSimClient",
        "description": "airsimgeo.newMyAirSimClient",
        "peekOfCode": "class DrivetrainType:\n    MaxDegreeOfFreedom = 0\n    ForwardOnly = 1\nclass AirSimImageType:    \n    Scene = 0\n    DepthPlanner = 1\n    DepthPerspective = 2\n    DepthVis = 3\n    DisparityNormalized = 4\n    Segmentation = 5",
        "detail": "airsimgeo.newMyAirSimClient",
        "documentation": {}
    },
    {
        "label": "AirSimImageType",
        "kind": 6,
        "importPath": "airsimgeo.newMyAirSimClient",
        "description": "airsimgeo.newMyAirSimClient",
        "peekOfCode": "class AirSimImageType:    \n    Scene = 0\n    DepthPlanner = 1\n    DepthPerspective = 2\n    DepthVis = 3\n    DisparityNormalized = 4\n    Segmentation = 5\n    SurfaceNormals = 6\nlock = threading.Lock()\nclass NewMyAirSimClient(MultirotorClient):",
        "detail": "airsimgeo.newMyAirSimClient",
        "documentation": {}
    },
    {
        "label": "NewMyAirSimClient",
        "kind": 6,
        "importPath": "airsimgeo.newMyAirSimClient",
        "description": "airsimgeo.newMyAirSimClient",
        "peekOfCode": "class NewMyAirSimClient(MultirotorClient):\n    deg_to_rad = lambda d_angle: d_angle * math.pi / 180.0\n    def __init__(self,trajColFlag,canDrawTrajectories,crabMode,thickness,trajs2draw,traj2follow):        \n        MultirotorClient.__init__(self)\n        MultirotorClient.confirmConnection(self)\n        self.drones_names = [ v for v in utils.g_airsim_settings[\"Vehicles\"] ]\n        for i,dn in enumerate( self.drones_names ):\n            self.enableApiControl(True,vehicle_name=dn)\n            self.armDisarm(True,vehicle_name=dn)\n        self.trajColFlag = trajColFlag",
        "detail": "airsimgeo.newMyAirSimClient",
        "documentation": {}
    },
    {
        "label": "lock",
        "kind": 5,
        "importPath": "airsimgeo.newMyAirSimClient",
        "description": "airsimgeo.newMyAirSimClient",
        "peekOfCode": "lock = threading.Lock()\nclass NewMyAirSimClient(MultirotorClient):\n    deg_to_rad = lambda d_angle: d_angle * math.pi / 180.0\n    def __init__(self,trajColFlag,canDrawTrajectories,crabMode,thickness,trajs2draw,traj2follow):        \n        MultirotorClient.__init__(self)\n        MultirotorClient.confirmConnection(self)\n        self.drones_names = [ v for v in utils.g_airsim_settings[\"Vehicles\"] ]\n        for i,dn in enumerate( self.drones_names ):\n            self.enableApiControl(True,vehicle_name=dn)\n            self.armDisarm(True,vehicle_name=dn)",
        "detail": "airsimgeo.newMyAirSimClient",
        "documentation": {}
    },
    {
        "label": "AirSimGeoClient",
        "kind": 6,
        "importPath": "airsimgeo.__init__",
        "description": "airsimgeo.__init__",
        "peekOfCode": "class AirSimGeoClient(MultirotorClient):\n    def __init__(self, srid, origin, **kwargs):\n        \"\"\"AirSim client that understands arbitrary projection systems\n        Assumes that the simulation environment (unreal) is in the coordinate system specified\n        by the srid but offset by the origin specified.\n        Arguments:\n            srid {str} -- EPSG SRID string. Example \"EPSG:3857\"\n            origin {list} -- [Longitude, Latitude, Height]\n            kwargs -- Any keyword arguments forwared to AirSim\n        \"\"\"",
        "detail": "airsimgeo.__init__",
        "documentation": {}
    },
    {
        "label": "MazeEnv",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnv(gym.Env):\n    metadata = {\n        \"render.modes\": [\"human\", \"rgb_array\"],\n    }\n    ACTION = [\"N\",\"S\", \"E\", \"W\"]\n    VISTED_TO_IDX = {\"visited\":16}\n    def __init__(self, maze_file=None, maze_size=None, mode=None, enable_render=True,num_goals = 1,verbose = True,human_mode=False, \n        n_trajs = None,random_pos = False,seed_num = None,\n        fixed_goals = None, fixed_init_pos = None,visited_cells = []):\n        self.visited_cells = visited_cells",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {}
    },
    {
        "label": "MazeView2D",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_view_2d",
        "description": "gym_maze.envs.maze_view_2d",
        "peekOfCode": "class MazeView2D:\n    def __init__(self, maze_name=\"Maze2D\", maze_file_path=None,\n                 maze_size=(30, 30), screen_size=(600, 600),\n                 has_loops=False, num_portals=0, enable_render=True,num_goals = 1,verbose = True,\n                 random_pos=False,np_random=None,n_trajs=None, fixed_goals = None,\n                 fixed_init_pos = None):\n        # if(num_goals<=0 ):\n        #     raise ValueError(\"Error in num_goals parameter\")\n        self.random_pos = random_pos\n        self.fixed_goals = fixed_goals ",
        "detail": "gym_maze.envs.maze_view_2d",
        "documentation": {}
    },
    {
        "label": "Maze",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_view_2d",
        "description": "gym_maze.envs.maze_view_2d",
        "peekOfCode": "class Maze:\n    COMPASS = {\n        \"N\": (0, -1),\n        \"E\": (1, 0),\n        \"S\": (0, 1),\n        \"W\": (-1, 0)\n    }\n    def __init__(self, maze_cells=None, maze_size=(10,10), has_loops=True, num_portals=0,verbose = True):\n        # maze member variables\n        self.maze_cells = maze_cells",
        "detail": "gym_maze.envs.maze_view_2d",
        "documentation": {}
    },
    {
        "label": "Portal",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_view_2d",
        "description": "gym_maze.envs.maze_view_2d",
        "peekOfCode": "class Portal:\n    def __init__(self, *locations):\n        self.__locations = []\n        for location in locations:\n            if isinstance(location, (tuple, list)):\n                self.__locations.append(tuple(location))\n            else:\n                raise ValueError(\"location must be a list or a tuple.\")\n    def teleport(self, cell):\n        if cell in self.locations:",
        "detail": "gym_maze.envs.maze_view_2d",
        "documentation": {}
    },
    {
        "label": "actions_to_value",
        "kind": 2,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "def actions_to_value(actions = None):\n    value = 0x0\n    if not actions:\n        return value \n    if \"N\" in actions:\n        value |= 0x1\n    if \"E\" in actions:\n        value |= 0x2\n    if \"S\" in actions:\n        value |= 0x4",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "add_action",
        "kind": 2,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "def add_action(value,action):\n    if \"N\" in action:\n        value |= 0x1\n    if \"E\" in action:\n        value |= 0x2\n    if \"S\" in action:\n        value |= 0x4\n    if \"W\" in action:\n        value |= 0x8\n    return value",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "remove_action",
        "kind": 2,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "def remove_action(value,action):\n    if \"N\" in action:\n        value &= ~ 0x1\n    if \"E\" in action:\n        value &= ~ 0x2\n    if \"S\" in action:\n        value &= ~ 0x4\n    if \"W\" in action:\n        value &= ~ 0x8\n    return value",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "cell_value",
        "kind": 2,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "def cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:\n            return 15\n    else:\n        if(r % ( obs_blocks+1)==0 or c % (obs_blocks +1 ) == 0 ):",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a = np.load(\"gym_maze/envs/maze_samples/maze2d_001.npy\")\nprint(\"BEFORE\")\nprint(a)\ndef actions_to_value(actions = None):\n    value = 0x0\n    if not actions:\n        return value \n    if \"N\" in actions:\n        value |= 0x1\n    if \"E\" in actions:",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "a[1,1]",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a[1,1] = 0\na[3,3] = 0\na[1,3] = 0\na[3,1] = 0\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "a[3,3]",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a[3,3] = 0\na[1,3] = 0\na[3,1] = 0\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "a[1,3]",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a[1,3] = 0\na[3,1] = 0\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n]",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "a[3,1]",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a[3,1] = 0\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n]\na = np.array(a)",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "av",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "av = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n]\na = np.array(a)\nprint(\"AFTER\")",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n]\na = np.array(a)\nprint(\"AFTER\")\nprint(a)",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a = np.array(a)\nprint(\"AFTER\")\nprint(a)\nprint(actions_to_value(\"NEWS\"),actions_to_value(\"\"))\nnp.save(\"gym_maze/envs/maze_samples/maze2d_001.npy\",a)\nNROWS = 43\nNCOLS = 43\nOBS_BLOCKS = 6\n# Each block can be considered 20m x 20m \ndef cell_value(r,c,obs_blocks=1,street_blocks=1):",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "NROWS",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "NROWS = 43\nNCOLS = 43\nOBS_BLOCKS = 6\n# Each block can be considered 20m x 20m \ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "NCOLS",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "NCOLS = 43\nOBS_BLOCKS = 6\n# Each block can be considered 20m x 20m \ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "OBS_BLOCKS",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "OBS_BLOCKS = 6\n# Each block can be considered 20m x 20m \ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:\n            return 15",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "aa",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "aa = [ [cell_value(r,c,obs_blocks=OBS_BLOCKS) for c in range(NCOLS) ] for r in range(NROWS)]\naa = np.array(aa)\nprint('aa BEF: \\n', aa)  \nfor r in range(len(aa)):\n    for c in range( len(aa[0] )):\n        cell = aa[r,c]\n        if r -1 < 0 or  aa[r-1,c] == 0:\n            cell = remove_action( cell,\"N\") \n        if r+1 >= len(aa) or aa[r+1,c] == 0:\n            cell = remove_action( cell,\"S\") ",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "aa",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "aa = np.array(aa)\nprint('aa BEF: \\n', aa)  \nfor r in range(len(aa)):\n    for c in range( len(aa[0] )):\n        cell = aa[r,c]\n        if r -1 < 0 or  aa[r-1,c] == 0:\n            cell = remove_action( cell,\"N\") \n        if r+1 >= len(aa) or aa[r+1,c] == 0:\n            cell = remove_action( cell,\"S\") \n        if c -1 < 0 or  aa[r,c-1] == 0:",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {}
    },
    {
        "label": "generate_flight_id",
        "kind": 2,
        "importPath": "eurocontrolConverter",
        "description": "eurocontrolConverter",
        "peekOfCode": "def generate_flight_id():\n    # Generate a unique ID for a flight.\n    id = uuid.uuid1()\n    flight_id = id.fields[0]\n    return flight_id\ndef flights_points( data, file_name):\n    # 'data' is an ordered list represented in this way --> [ [flights_IDs], [number_waypoints_sequence], \n    #    [crossingg_waypoints_times], [flights_levels], [Latitudes], [Longitutes] ].\n    # This method take 'data' as input and put it into a .csv file (by creating it) according to the Eurocontrol standard template.\n    header = True",
        "detail": "eurocontrolConverter",
        "documentation": {}
    },
    {
        "label": "flights_points",
        "kind": 2,
        "importPath": "eurocontrolConverter",
        "description": "eurocontrolConverter",
        "peekOfCode": "def flights_points( data, file_name):\n    # 'data' is an ordered list represented in this way --> [ [flights_IDs], [number_waypoints_sequence], \n    #    [crossingg_waypoints_times], [flights_levels], [Latitudes], [Longitutes] ].\n    # This method take 'data' as input and put it into a .csv file (by creating it) according to the Eurocontrol standard template.\n    header = True\n    d = {}\n    fields = len(COLUMNS_NAMES)\n    for flight in data:\n        for field in range(fields):\n            d[COLUMNS_NAMES[field]] = flight[field]",
        "detail": "eurocontrolConverter",
        "documentation": {}
    },
    {
        "label": "data_to_csv",
        "kind": 2,
        "importPath": "eurocontrolConverter",
        "description": "eurocontrolConverter",
        "peekOfCode": "def data_to_csv(data,filename,header=True):\n   d={}\n   fields = len(COLUMNS_NAMES)\n   for row in data:\n        for field in range(fields):\n            if COLUMNS_NAMES[field] not in d:\n               d[COLUMNS_NAMES[field]] = [row[field]]\n            else:\n               d[COLUMNS_NAMES[field]].append( row[field])\n   df = pd.DataFrame.from_dict(d)",
        "detail": "eurocontrolConverter",
        "documentation": {}
    },
    {
        "label": "extract_waypoints_from_flights_points_csv",
        "kind": 2,
        "importPath": "eurocontrolConverter",
        "description": "eurocontrolConverter",
        "peekOfCode": "def extract_waypoints_from_flights_points_csv( file_name):\n    # Read a .csv file (according to the Eurocontrol standard template) and return a dictionary in which each key is a flight ID and\n    # the corresponding values are the Z,Y,X coordinates of the crossed waypoints for that considered flight. \n    n_names = len(COLUMNS_NAMES)\n    file = pd.read_csv(file_name, header=0)\n    flights_and_coords = [[] for i in range(4)] # 4 = flightID + Z + Y + X\n    flights_and_coords[0] = file[COLUMNS_NAMES[0]].values\n    flights_and_coords[1] = file[COLUMNS_NAMES[3]].values\n    flights_and_coords[2] = file[COLUMNS_NAMES[4]].values\n    flights_and_coords[3] = file[COLUMNS_NAMES[5]].values",
        "detail": "eurocontrolConverter",
        "documentation": {}
    },
    {
        "label": "create_eurocontrol_file2",
        "kind": 2,
        "importPath": "eurocontrolConverter",
        "description": "eurocontrolConverter",
        "peekOfCode": "def create_eurocontrol_file2(trajs,filename,header = True):\n   if(trajs is None): raise Exception(\"Invalid input\")\n   if( trajs == [] or trajs[0] is None or \n      trajs[0] == []  or trajs[0][0] is None or \n      trajs[0][0] == [] ): \n      raise Exception(\"Invalid input\")\n   dimensions = len(trajs[0][0])\n   if(dimensions <2 or dimensions >3): raise Exception(\"Only 2D or 3D, received\", dimensions)\n   offset=3\n   print(\"Found\",len(trajs),\"trajectories with dimensions of num.:\", dimensions)",
        "detail": "eurocontrolConverter",
        "documentation": {}
    },
    {
        "label": "create_eurocontrol_file",
        "kind": 2,
        "importPath": "eurocontrolConverter",
        "description": "eurocontrolConverter",
        "peekOfCode": "def create_eurocontrol_file(trajs,dimensions,filename,header = True):\n   if(dimensions <2 or dimensions >3): raise Exception(\"Only 2D or 3D\")\n   d = {}\n   offset=3\n   for traj in trajs:\n      id = generate_flight_id()\n      for i in range(len(traj)):\n         # Time over is N/A right now\n         row = [id,i,None]\n         for field in range(0,len(fields)):",
        "detail": "eurocontrolConverter",
        "documentation": {}
    },
    {
        "label": "COLUMNS_NAMES",
        "kind": 5,
        "importPath": "eurocontrolConverter",
        "description": "eurocontrolConverter",
        "peekOfCode": "COLUMNS_NAMES = ['ECTRL ID',\n                'Sequence Number',\n                'Time Over',\n                'Flight Level', # Actually is Z coordinate\n                'Latitude',     # Actually is Y coordinate\n                'Longitude']    # Actually is X coordinate\nCOLUMNS_NAMES2 = ['id',\n                'time',\n                'x',\n                'y', ",
        "detail": "eurocontrolConverter",
        "documentation": {}
    },
    {
        "label": "COLUMNS_NAMES2",
        "kind": 5,
        "importPath": "eurocontrolConverter",
        "description": "eurocontrolConverter",
        "peekOfCode": "COLUMNS_NAMES2 = ['id',\n                'time',\n                'x',\n                'y', \n                'z',     \n               #  'th', #NA\n               #  \"tv\", #NA\n               #  \"rv\", #NA\n               ] \nFILE_DIR = \"eurocontrol/\"",
        "detail": "eurocontrolConverter",
        "documentation": {}
    },
    {
        "label": "FILE_DIR",
        "kind": 5,
        "importPath": "eurocontrolConverter",
        "description": "eurocontrolConverter",
        "peekOfCode": "FILE_DIR = \"eurocontrol/\"\ndef generate_flight_id():\n    # Generate a unique ID for a flight.\n    id = uuid.uuid1()\n    flight_id = id.fields[0]\n    return flight_id\ndef flights_points( data, file_name):\n    # 'data' is an ordered list represented in this way --> [ [flights_IDs], [number_waypoints_sequence], \n    #    [crossingg_waypoints_times], [flights_levels], [Latitudes], [Longitutes] ].\n    # This method take 'data' as input and put it into a .csv file (by creating it) according to the Eurocontrol standard template.",
        "detail": "eurocontrolConverter",
        "documentation": {}
    },
    {
        "label": "strDate",
        "kind": 2,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "def strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef main(mode, fixed_init_pos=None, trainedQtable=None,visited_cells = [],i_trajectory = None,outDir=None):\n    assert(mode in [\"train\",\"test\",\"random\"])\n    if(args.load_maze):\n        maze_file = args.load_maze\n    else:\n        maze_file = STD_MAZE\n    # Creo Maze",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "def main(mode, fixed_init_pos=None, trainedQtable=None,visited_cells = [],i_trajectory = None,outDir=None):\n    assert(mode in [\"train\",\"test\",\"random\"])\n    if(args.load_maze):\n        maze_file = args.load_maze\n    else:\n        maze_file = STD_MAZE\n    # Creo Maze\n    print(\"SEED\",SEED)\n    env = MazeEnv( maze_file = maze_file,                  \n        # maze_file=\"maze\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M') ),",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "cell_value",
        "kind": 2,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "def cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:\n            return 15\n    else:\n        if(r % ( obs_blocks+1)==0 or c % (obs_blocks +1 ) == 0 ):",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "IDX_TO_ACTION",
        "kind": 5,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "IDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\nSTD_MAZE = \"maze2d_004.npy\"\nINTERACTIVE = False\nOUT_FORMAT = \"csv\"\nRANDOM_TRAJECTORIES_FOLDER = \"generatedData/2dL1/csv/\"\nTRAJECTORIES_FOLDER = \"generatedData/2dL1/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 100\nTRAJECTORIES_BUFFER_SIZE = 10\nSCALE_SIZE = 20 # in meters unit",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "STD_MAZE",
        "kind": 5,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "STD_MAZE = \"maze2d_004.npy\"\nINTERACTIVE = False\nOUT_FORMAT = \"csv\"\nRANDOM_TRAJECTORIES_FOLDER = \"generatedData/2dL1/csv/\"\nTRAJECTORIES_FOLDER = \"generatedData/2dL1/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 100\nTRAJECTORIES_BUFFER_SIZE = 10\nSCALE_SIZE = 20 # in meters unit\ndef strDate():",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "INTERACTIVE",
        "kind": 5,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "INTERACTIVE = False\nOUT_FORMAT = \"csv\"\nRANDOM_TRAJECTORIES_FOLDER = \"generatedData/2dL1/csv/\"\nTRAJECTORIES_FOLDER = \"generatedData/2dL1/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 100\nTRAJECTORIES_BUFFER_SIZE = 10\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "OUT_FORMAT",
        "kind": 5,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "OUT_FORMAT = \"csv\"\nRANDOM_TRAJECTORIES_FOLDER = \"generatedData/2dL1/csv/\"\nTRAJECTORIES_FOLDER = \"generatedData/2dL1/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 100\nTRAJECTORIES_BUFFER_SIZE = 10\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "RANDOM_TRAJECTORIES_FOLDER",
        "kind": 5,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "RANDOM_TRAJECTORIES_FOLDER = \"generatedData/2dL1/csv/\"\nTRAJECTORIES_FOLDER = \"generatedData/2dL1/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 100\nTRAJECTORIES_BUFFER_SIZE = 10\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef main(mode, fixed_init_pos=None, trainedQtable=None,visited_cells = [],i_trajectory = None,outDir=None):",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "TRAJECTORIES_FOLDER",
        "kind": 5,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "TRAJECTORIES_FOLDER = \"generatedData/2dL1/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 100\nTRAJECTORIES_BUFFER_SIZE = 10\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef main(mode, fixed_init_pos=None, trainedQtable=None,visited_cells = [],i_trajectory = None,outDir=None):\n    assert(mode in [\"train\",\"test\",\"random\"])",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "TRAJECTORIES_3D_FOLDER",
        "kind": 5,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "TRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 100\nTRAJECTORIES_BUFFER_SIZE = 10\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef main(mode, fixed_init_pos=None, trainedQtable=None,visited_cells = [],i_trajectory = None,outDir=None):\n    assert(mode in [\"train\",\"test\",\"random\"])\n    if(args.load_maze):",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "N_TRAJECTORIES_TO_GENERATE",
        "kind": 5,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "N_TRAJECTORIES_TO_GENERATE = 100\nTRAJECTORIES_BUFFER_SIZE = 10\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef main(mode, fixed_init_pos=None, trainedQtable=None,visited_cells = [],i_trajectory = None,outDir=None):\n    assert(mode in [\"train\",\"test\",\"random\"])\n    if(args.load_maze):\n        maze_file = args.load_maze",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "TRAJECTORIES_BUFFER_SIZE",
        "kind": 5,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "TRAJECTORIES_BUFFER_SIZE = 10\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef main(mode, fixed_init_pos=None, trainedQtable=None,visited_cells = [],i_trajectory = None,outDir=None):\n    assert(mode in [\"train\",\"test\",\"random\"])\n    if(args.load_maze):\n        maze_file = args.load_maze\n    else:",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "SCALE_SIZE",
        "kind": 5,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "SCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef main(mode, fixed_init_pos=None, trainedQtable=None,visited_cells = [],i_trajectory = None,outDir=None):\n    assert(mode in [\"train\",\"test\",\"random\"])\n    if(args.load_maze):\n        maze_file = args.load_maze\n    else:\n        maze_file = STD_MAZE",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "EXPERIMENT_DATE",
        "kind": 5,
        "importPath": "layer1",
        "description": "layer1",
        "peekOfCode": "EXPERIMENT_DATE =  strDate()\ndef main(mode, fixed_init_pos=None, trainedQtable=None,visited_cells = [],i_trajectory = None,outDir=None):\n    assert(mode in [\"train\",\"test\",\"random\"])\n    if(args.load_maze):\n        maze_file = args.load_maze\n    else:\n        maze_file = STD_MAZE\n    # Creo Maze\n    print(\"SEED\",SEED)\n    env = MazeEnv( maze_file = maze_file,                  ",
        "detail": "layer1",
        "documentation": {}
    },
    {
        "label": "strDate",
        "kind": 2,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "def strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "cell_value",
        "kind": 2,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "def cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:\n            return 15\n    else:\n        if(r % ( obs_blocks+1)==0 or c % (obs_blocks +1 ) == 0 ):",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "select_action",
        "kind": 2,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "def select_action(state, explore_rate):\n   # Select a random action\n   if random.random() < explore_rate:\n         action = env.action_space.sample()\n   # Select the action with the highest q\n   else:\n         action = int(np.argmax(q_table[state]))\n   return action\ndef get_explore_rate(t):\n   return max(MIN_EXPLORE_RATE, min(0.8, 1.0 - math.log10((t+1)/DECAY_FACTOR)))",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "get_explore_rate",
        "kind": 2,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "def get_explore_rate(t):\n   return max(MIN_EXPLORE_RATE, min(0.8, 1.0 - math.log10((t+1)/DECAY_FACTOR)))\ndef get_learning_rate(t):\n   return max(MIN_LEARNING_RATE, min(0.8, 1.0 - math.log10((t+1)/DECAY_FACTOR)))\ndef state_to_bucket(state):\n   bucket_indice = []\n   for i in range(len(state)):\n         if state[i] <= STATE_BOUNDS[i][0]:\n            bucket_index = 0\n         elif state[i] >= STATE_BOUNDS[i][1]:",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "get_learning_rate",
        "kind": 2,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "def get_learning_rate(t):\n   return max(MIN_LEARNING_RATE, min(0.8, 1.0 - math.log10((t+1)/DECAY_FACTOR)))\ndef state_to_bucket(state):\n   bucket_indice = []\n   for i in range(len(state)):\n         if state[i] <= STATE_BOUNDS[i][0]:\n            bucket_index = 0\n         elif state[i] >= STATE_BOUNDS[i][1]:\n            bucket_index = NUM_BUCKETS[i] - 1\n         else:",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "state_to_bucket",
        "kind": 2,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "def state_to_bucket(state):\n   bucket_indice = []\n   for i in range(len(state)):\n         if state[i] <= STATE_BOUNDS[i][0]:\n            bucket_index = 0\n         elif state[i] >= STATE_BOUNDS[i][1]:\n            bucket_index = NUM_BUCKETS[i] - 1\n         else:\n            # Mapping the state bounds to the bucket array\n            bound_width = STATE_BOUNDS[i][1] - STATE_BOUNDS[i][0]",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "signal_handler",
        "kind": 2,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "def signal_handler(sig, frame):\n   print('You pressed Ctrl+C!\\nSaving...')\n   if(not args.load_qtable):\n         print(\"ENDING OF TRAIN\")\n         np.save(\"generatedData/qTable/q_table_\"+EXPERIMENT_DATE, q_table )\n         print(\"Table saved\")\n   sys.exit(0)\nif __name__ == \"__main__\":\n   parser = argparse.ArgumentParser(description='Layer 1')\n   parser.add_argument('--nepisodes', type=int, default=100,",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "IDX_TO_ACTION",
        "kind": 5,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "IDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\nSTD_MAZE = \"maze2d_004.npy\"\nINTERACTIVE = False\nOUT_FORMAT = \"csv\"\nRANDOM_TRAJECTORIES_FOLDER = \"generatedData/2dL1/csv/\"\nTRAJECTORIES_FOLDER = \"generatedData/2dL1/\" \nINT_TRAJECTORIES_FOLDER = \"generatedData/2dL1INT/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 99\nTRAJECTORIES_BUFFER_SIZE = 3",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "STD_MAZE",
        "kind": 5,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "STD_MAZE = \"maze2d_004.npy\"\nINTERACTIVE = False\nOUT_FORMAT = \"csv\"\nRANDOM_TRAJECTORIES_FOLDER = \"generatedData/2dL1/csv/\"\nTRAJECTORIES_FOLDER = \"generatedData/2dL1/\" \nINT_TRAJECTORIES_FOLDER = \"generatedData/2dL1INT/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 99\nTRAJECTORIES_BUFFER_SIZE = 3\nSCALE_SIZE = 20 # in meters unit",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "INTERACTIVE",
        "kind": 5,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "INTERACTIVE = False\nOUT_FORMAT = \"csv\"\nRANDOM_TRAJECTORIES_FOLDER = \"generatedData/2dL1/csv/\"\nTRAJECTORIES_FOLDER = \"generatedData/2dL1/\" \nINT_TRAJECTORIES_FOLDER = \"generatedData/2dL1INT/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 99\nTRAJECTORIES_BUFFER_SIZE = 3\nSCALE_SIZE = 20 # in meters unit\ndef strDate():",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "OUT_FORMAT",
        "kind": 5,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "OUT_FORMAT = \"csv\"\nRANDOM_TRAJECTORIES_FOLDER = \"generatedData/2dL1/csv/\"\nTRAJECTORIES_FOLDER = \"generatedData/2dL1/\" \nINT_TRAJECTORIES_FOLDER = \"generatedData/2dL1INT/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 99\nTRAJECTORIES_BUFFER_SIZE = 3\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "RANDOM_TRAJECTORIES_FOLDER",
        "kind": 5,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "RANDOM_TRAJECTORIES_FOLDER = \"generatedData/2dL1/csv/\"\nTRAJECTORIES_FOLDER = \"generatedData/2dL1/\" \nINT_TRAJECTORIES_FOLDER = \"generatedData/2dL1INT/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 99\nTRAJECTORIES_BUFFER_SIZE = 3\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "TRAJECTORIES_FOLDER",
        "kind": 5,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "TRAJECTORIES_FOLDER = \"generatedData/2dL1/\" \nINT_TRAJECTORIES_FOLDER = \"generatedData/2dL1INT/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 99\nTRAJECTORIES_BUFFER_SIZE = 3\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef cell_value(r,c,obs_blocks=1,street_blocks=1):",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "INT_TRAJECTORIES_FOLDER",
        "kind": 5,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "INT_TRAJECTORIES_FOLDER = \"generatedData/2dL1INT/\" \nTRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 99\nTRAJECTORIES_BUFFER_SIZE = 3\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "TRAJECTORIES_3D_FOLDER",
        "kind": 5,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "TRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\nN_TRAJECTORIES_TO_GENERATE = 99\nTRAJECTORIES_BUFFER_SIZE = 3\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "N_TRAJECTORIES_TO_GENERATE",
        "kind": 5,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "N_TRAJECTORIES_TO_GENERATE = 99\nTRAJECTORIES_BUFFER_SIZE = 3\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "TRAJECTORIES_BUFFER_SIZE",
        "kind": 5,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "TRAJECTORIES_BUFFER_SIZE = 3\nSCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "SCALE_SIZE",
        "kind": 5,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "SCALE_SIZE = 20 # in meters unit\ndef strDate():\n    return str(datetime.datetime.now().strftime('-D-%d-%m-%Y-H-%H-%M-%S-') )\nEXPERIMENT_DATE =  strDate()\ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "EXPERIMENT_DATE",
        "kind": 5,
        "importPath": "layer1mod",
        "description": "layer1mod",
        "peekOfCode": "EXPERIMENT_DATE =  strDate()\ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:\n            return 15\n    else:",
        "detail": "layer1mod",
        "documentation": {}
    },
    {
        "label": "TRAJECTORIES_3D_FOLDER",
        "kind": 5,
        "importPath": "layer2",
        "description": "layer2",
        "peekOfCode": "TRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\n# if(args.debug):\nlogging.basicConfig(filename=utils.LOG_FOLDER+\"L2log(AIRSIM)\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                        filemode='w',\n                        format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\n                        datefmt='%H:%M:%S',\n                        level=logging.INFO)\nlogger = logging.getLogger('RL Layer2')\nlogger.info('Experiment Date: {}'.format(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M') ) )\nif __name__ == \"__main__\":",
        "detail": "layer2",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "layer2",
        "description": "layer2",
        "peekOfCode": "logger = logging.getLogger('RL Layer2')\nlogger.info('Experiment Date: {}'.format(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M') ) )\nif __name__ == \"__main__\":\n   parser = argparse.ArgumentParser(description='Layer 2')\n   parser.add_argument(\"-i\", type=str,required=True,\n                     help='input folder of trajs 3d')\n   # parser.add_argument('-sx', type=int,required=True,\n   #                   help='Starting x coordinate of agent to choose correct trajectory to follow')\n   # parser.add_argument('-sy', type=int,required=True,\n   #                   help='Starting y coordinate of agent to choose correct trajectory to follow')",
        "detail": "layer2",
        "documentation": {}
    },
    {
        "label": "TRAJECTORIES_3D_FOLDER",
        "kind": 5,
        "importPath": "layer3",
        "description": "layer3",
        "peekOfCode": "TRAJECTORIES_3D_FOLDER = \"generatedData/3dL2/csv/\"\n# if(args.debug):\nlogging.basicConfig(filename=utils.LOG_FOLDER+\"L2log(AIRSIM)\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                        filemode='w',\n                        format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\n                        datefmt='%H:%M:%S',\n                        level=logging.INFO)\nlogger = logging.getLogger('RL Layer2')\nlogger.info('Experiment Date: {}'.format(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M') ) )\nif __name__ == \"__main__\":",
        "detail": "layer3",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "layer3",
        "description": "layer3",
        "peekOfCode": "logger = logging.getLogger('RL Layer2')\nlogger.info('Experiment Date: {}'.format(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M') ) )\nif __name__ == \"__main__\":\n   parser = argparse.ArgumentParser(description='Layer 2')\n   parser.add_argument(\"-i\", type=str,required=True,\n                     help='input folder of trajs 3d')\n   # parser.add_argument('-sx', type=int,required=True,\n   #                   help='Starting x coordinate of agent to choose correct trajectory to follow')\n   # parser.add_argument('-sy', type=int,required=True,\n   #                   help='Starting y coordinate of agent to choose correct trajectory to follow')",
        "detail": "layer3",
        "documentation": {}
    },
    {
        "label": "a_logger",
        "kind": 5,
        "importPath": "manualGenerator",
        "description": "manualGenerator",
        "peekOfCode": "a_logger = logging.getLogger(\"collisionTesterLog\")\na_logger.setLevel(logging.DEBUG)\noutput_file_handler = logging.FileHandler(\"finalCollisionTimeTester.log\")\nstdout_handler = logging.StreamHandler(sys.stdout)\na_logger.addHandler(output_file_handler)\na_logger.addHandler(stdout_handler)\na_logger.debug(\n   \"\\nRUNNING EXP at: \" + str(datetime.datetime.now().strftime('%Y-%m-%d--%H:%M:%S'))+\"\\n\"\n)\n# RANDOM SEED",
        "detail": "manualGenerator",
        "documentation": {}
    },
    {
        "label": "output_file_handler",
        "kind": 5,
        "importPath": "manualGenerator",
        "description": "manualGenerator",
        "peekOfCode": "output_file_handler = logging.FileHandler(\"finalCollisionTimeTester.log\")\nstdout_handler = logging.StreamHandler(sys.stdout)\na_logger.addHandler(output_file_handler)\na_logger.addHandler(stdout_handler)\na_logger.debug(\n   \"\\nRUNNING EXP at: \" + str(datetime.datetime.now().strftime('%Y-%m-%d--%H:%M:%S'))+\"\\n\"\n)\n# RANDOM SEED\n# a_logger.debug(\"SEED: \"+ str(trajs_utils.setRandomSeed())  )\na_logger.debug(\"SEED: \"+ str(trajs_utils.setSeed(999))  )",
        "detail": "manualGenerator",
        "documentation": {}
    },
    {
        "label": "stdout_handler",
        "kind": 5,
        "importPath": "manualGenerator",
        "description": "manualGenerator",
        "peekOfCode": "stdout_handler = logging.StreamHandler(sys.stdout)\na_logger.addHandler(output_file_handler)\na_logger.addHandler(stdout_handler)\na_logger.debug(\n   \"\\nRUNNING EXP at: \" + str(datetime.datetime.now().strftime('%Y-%m-%d--%H:%M:%S'))+\"\\n\"\n)\n# RANDOM SEED\n# a_logger.debug(\"SEED: \"+ str(trajs_utils.setRandomSeed())  )\na_logger.debug(\"SEED: \"+ str(trajs_utils.setSeed(999))  )\ntolerances = [0,0.2]",
        "detail": "manualGenerator",
        "documentation": {}
    },
    {
        "label": "tolerances",
        "kind": 5,
        "importPath": "manualGenerator",
        "description": "manualGenerator",
        "peekOfCode": "tolerances = [0,0.2]\nn_trajectories = [300,300,10,10,50,50,100,100]\nNUM_TESTS = 6\nOUT_FOLDER = \"randTrajs/\"\nexp_path = OUT_FOLDER + \"experiment/\"\ncreated = False\ni=1\nwhile(not created ):\n   try:\n      exp_path = exp_path[:-1]+ str(i) +\"/\"",
        "detail": "manualGenerator",
        "documentation": {}
    },
    {
        "label": "n_trajectories",
        "kind": 5,
        "importPath": "manualGenerator",
        "description": "manualGenerator",
        "peekOfCode": "n_trajectories = [300,300,10,10,50,50,100,100]\nNUM_TESTS = 6\nOUT_FOLDER = \"randTrajs/\"\nexp_path = OUT_FOLDER + \"experiment/\"\ncreated = False\ni=1\nwhile(not created ):\n   try:\n      exp_path = exp_path[:-1]+ str(i) +\"/\"\n      os.mkdir(exp_path)",
        "detail": "manualGenerator",
        "documentation": {}
    },
    {
        "label": "NUM_TESTS",
        "kind": 5,
        "importPath": "manualGenerator",
        "description": "manualGenerator",
        "peekOfCode": "NUM_TESTS = 6\nOUT_FOLDER = \"randTrajs/\"\nexp_path = OUT_FOLDER + \"experiment/\"\ncreated = False\ni=1\nwhile(not created ):\n   try:\n      exp_path = exp_path[:-1]+ str(i) +\"/\"\n      os.mkdir(exp_path)\n      print (\"Successfully created the directory %s \" % exp_path)",
        "detail": "manualGenerator",
        "documentation": {}
    },
    {
        "label": "OUT_FOLDER",
        "kind": 5,
        "importPath": "manualGenerator",
        "description": "manualGenerator",
        "peekOfCode": "OUT_FOLDER = \"randTrajs/\"\nexp_path = OUT_FOLDER + \"experiment/\"\ncreated = False\ni=1\nwhile(not created ):\n   try:\n      exp_path = exp_path[:-1]+ str(i) +\"/\"\n      os.mkdir(exp_path)\n      print (\"Successfully created the directory %s \" % exp_path)\n      created = True",
        "detail": "manualGenerator",
        "documentation": {}
    },
    {
        "label": "exp_path",
        "kind": 5,
        "importPath": "manualGenerator",
        "description": "manualGenerator",
        "peekOfCode": "exp_path = OUT_FOLDER + \"experiment/\"\ncreated = False\ni=1\nwhile(not created ):\n   try:\n      exp_path = exp_path[:-1]+ str(i) +\"/\"\n      os.mkdir(exp_path)\n      print (\"Successfully created the directory %s \" % exp_path)\n      created = True\n   except OSError:",
        "detail": "manualGenerator",
        "documentation": {}
    },
    {
        "label": "created",
        "kind": 5,
        "importPath": "manualGenerator",
        "description": "manualGenerator",
        "peekOfCode": "created = False\ni=1\nwhile(not created ):\n   try:\n      exp_path = exp_path[:-1]+ str(i) +\"/\"\n      os.mkdir(exp_path)\n      print (\"Successfully created the directory %s \" % exp_path)\n      created = True\n   except OSError:\n      print (\"Creation of the directory %s failed\" % exp_path)",
        "detail": "manualGenerator",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "tempScript",
        "description": "tempScript",
        "peekOfCode": "df = pd.read_csv( \"C:/Users/gioca/Desktop/Repos/AirSim-PredictiveManteinance/src/final/generatedData/2dL1/qTrajs2D-D-10-01-2021-H-11-44-22-/traj2d_0.csv\" ,\ndelimiter=\",\",index_col=\"index\")\n            # print(df)\nt=df.to_numpy() \ntt=t.tolist()\ntrajs_utils.plot_xy([ [ [p[0],p[1],10]for p in tt] ],cell_size=1,doScatter=True,isCell=True)\ntt2=trajs_utils.fix_traj([tt])\nprint('tt2: ', tt2)\ntrajs_utils.plot_xy([     [ [p[0],p[1],10] for p in tt2[0]] ] ,cell_size=1,doScatter=True  ,isCell=True )\n# 2d int",
        "detail": "tempScript",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "tempScript",
        "description": "tempScript",
        "peekOfCode": "df = pd.read_csv( \"generatedData/3dL2/csv/trajs3D-D-10-01-2021-H-11-44-22-/3dtraj0.csv\" ,\ndelimiter=\",\",index_col=\"index\")\n            # print(df)\nt=df.to_numpy() \ntt=t.tolist()\ntrajs_utils.plot_xy([tt],cell_size=20,dotSize=0.5,doScatter=True)\n# trajs_utils.plot_3d([ [ [p[0],p[1],10]for p in tt] ])",
        "detail": "tempScript",
        "documentation": {}
    },
    {
        "label": "setSeed",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def setSeed(seed):\n   global SEED\n   SEED=seed\n   random.seed(SEED)\n   np.random.seed(seed=SEED)\ndef setRandomSeed():\n    s = random.randint(0,int(10e8))\n    setSeed(s)\n    return SEED\ndef checkTrajsCorrectness(trajs,dimensions=2):",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "setRandomSeed",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def setRandomSeed():\n    s = random.randint(0,int(10e8))\n    setSeed(s)\n    return SEED\ndef checkTrajsCorrectness(trajs,dimensions=2):\n    assert(trajs); assert(trajs[0]); assert(trajs[0][0]); \n    for t in trajs:\n        for p in t: \n            assert(len(p)==2) \ndef fromCellsToMeters(trajs,scale_factor):",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "checkTrajsCorrectness",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def checkTrajsCorrectness(trajs,dimensions=2):\n    assert(trajs); assert(trajs[0]); assert(trajs[0][0]); \n    for t in trajs:\n        for p in t: \n            assert(len(p)==2) \ndef fromCellsToMeters(trajs,scale_factor):\n    assert(trajs); assert(trajs[0]); assert(trajs[0][0]); assert(len(trajs[0][0])==2) \n    return [ [ [ scale_factor/2+ p[0]*scale_factor, scale_factor/2+ p[1]*scale_factor] for p in traj] for traj in trajs]\ndef myInterpolate2D(trajs,step_size=20 ):\n    n_collisions = []",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "fromCellsToMeters",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def fromCellsToMeters(trajs,scale_factor):\n    assert(trajs); assert(trajs[0]); assert(trajs[0][0]); assert(len(trajs[0][0])==2) \n    return [ [ [ scale_factor/2+ p[0]*scale_factor, scale_factor/2+ p[1]*scale_factor] for p in traj] for traj in trajs]\ndef myInterpolate2D(trajs,step_size=20 ):\n    n_collisions = []\n    for arr in trajs:\n        res_t = []\n        for i,p in enumerate(arr):\n            if(i+1 >= len(arr)):\n                break",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "myInterpolate2D",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def myInterpolate2D(trajs,step_size=20 ):\n    n_collisions = []\n    for arr in trajs:\n        res_t = []\n        for i,p in enumerate(arr):\n            if(i+1 >= len(arr)):\n                break\n            x1,y1 = p[0], p[1]\n            x2,y2 = arr[i+1][0], arr[i+1][1] \n            # if(i==0):",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "build_trees",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def build_trees(trajectories):\n    _trees = []\n    for traj in trajectories:\n        _trees.append(KDTree(np.array(traj)))\n    return _trees\ndef build_tree_dict(trajectories,fixed_h = None):\n    if(trajectories is None or trajectories==[]):\n        return {},{}\n    _trees = dict()\n    _tree_by_id = dict()",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "build_tree_dict",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def build_tree_dict(trajectories,fixed_h = None):\n    if(trajectories is None or trajectories==[]):\n        return {},{}\n    _trees = dict()\n    _tree_by_id = dict()\n    dimensions = len(trajectories[0][0])\n    for idx,traj in enumerate(trajectories):\n        arr2d = np.array( traj )\n        if(dimensions==3):\n            arr2d = np.delete( arr2d ,np.s_[2:3], axis=1)",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "check_trees_collision",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def check_trees_collision(fId,point,trees,radius):\n    n_collisions = 0\n    for idx,_tree in enumerate(trees): \n        if(idx == fId):\n            # E' quella attuale\n            continue\n        n_collisions = _tree.query_radius( [point],r=radius,count_only = True )\n        if(n_collisions > 0):\n            return n_collisions\n    return n_collisions",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "complex_avoid_collision_in_busy_space",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def complex_avoid_collision_in_busy_space(trajs_2d,assigned_trajs,min_height,max_height,\n    sep_h,min_safe_points,radius=30,simpleMode=True):\n    print(\"Started col avoidance in busy space...\")\n    # First remove the points not interesting by height constraints\n    assigned_points = []\n    for traj in assigned_trajs:\n        for p in traj:\n            if min_height<=p[2]<=max_height : assigned_points.append(p)\n    zs = [[] for t in range(len(trajs_2d))]\n    trajs_3d =   []",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "avoid_collision_in_busy_space",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def avoid_collision_in_busy_space(trajs_2d,assigned_trajs,min_height,max_height,\n    sep_h,min_safe_points,radius=30,simpleMode=True,n_pool_traj=3):\n    '''\n    - trajectories are [[p11,p12,...],[p21,p22,...],...]\n      pij is a point j-th in 2d: [x,y]  for i-th flight\n    - read only assigned_trajs are [[p11,p12,...],[p21,p22,...],...]\n      pij is a point j-th in 3d: [x,y,z]  for i-th flight (they are assumed to be generated compatible with this algo)\n    - trees are built using build_trees function, they are k-d trees \n    - max_height,min_height are bounds for allocation, it starts from max and allocates towards min\n    - sep_h is the amount of height separating two trajectories with same x,y",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "avoid_collision_complex",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def avoid_collision_complex(new_trajs_2d,fids,min_height,max_height,\n    sep_h,assigned_trajs=[],radius=10, n_new_trajs_2d=None,seed=None,\n    tolerance = 0):\n    \"\"\"\n    ASSUMPTIONS\n    - assigned_trajs follows this convention\n    - threshold value is the max value of problematic points before traj\n    is considered colliding \n    \"\"\"\n    print(\"Loaded\" ,len(assigned_trajs),\"fixed trajectories\")",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "print_z_head",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def print_z_head(arr):\n    print(\"heights are:\")\n    for idx,t in enumerate(arr):\n        print(\"\\t id:\",idx,\"z\",t[0][2])\nfrom scipy.stats import poisson\ndef random_gen_2d(xmin,xmax,ymin,ymax,zmin=None,zmax=None,step=120,n_points=None,n_trajs=5):\n    \"\"\"\n    normal to choose action with (mean=0,std=1)\n    \"\"\"\n    n_drones = n_trajs",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "random_gen_2d",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def random_gen_2d(xmin,xmax,ymin,ymax,zmin=None,zmax=None,step=120,n_points=None,n_trajs=5):\n    \"\"\"\n    normal to choose action with (mean=0,std=1)\n    \"\"\"\n    n_drones = n_trajs\n    trajs = [[] for i in range(n_drones)]\n    if( n_points is None):\n        n_constant = False\n    else:\n        n_constant = True",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "umb_random_gen2d",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def umb_random_gen2d(xmin,xmax,ymin,ymax,zmin=None,zmax=None,step=120,n_points=100,n_trajs=5):\n    n_drones = n_trajs\n    trajs = [[] for i in range(n_drones)]\n    for i in range(n_drones):\n        if(n_points==None):\n            n_points = random.randrange(xmin, xmax+1,1 )\n        xs = []\n        ys = []\n        if(zmin is not None and zmax is not None):\n            z_value = random.randrange(zmin, zmax+1,1 )",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "interpolate_trajs",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def interpolate_trajs(trajs,doPlot=False):\n    trajs = myInterpolate2D(trajs,step_size=STEP_SIZE)\n    if(doPlot):\n        fig = plt.figure()\n        for i in range(len(trajs)):\n            plt.plot(*zip(*trajs[i]),\"-o\")\n        plt.title(\"interpolated\" )\n        plt.show()\n    return trajs\n# def height_algo(trajs):",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "get_action",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def get_action(s0,s1):\n    x0,y0 = s0[0],s0[1]\n    x1,y1 = s1[0],s1[1]\n    if(x1 > x0): return AINDEX[\"E\"]\n    elif(x0 > x1): return AINDEX[\"W\"]\n    elif(y1 > y0): return AINDEX[\"N\"]\n    elif(y0 > y1): return AINDEX[\"S\"]\n    # else: raise Exception(\"NOT MOVED NOT ACCEPTABLE\")\n    else: return -1\ndef are_opposite_actions(a1,a2):",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "are_opposite_actions",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def are_opposite_actions(a1,a2):\n    return a1!=a2 \\\n        and ( (ACTION[a1]==\"N\" and ACTION[a2] ==\"S\") or  \n            (ACTION[a1]==\"S\" and ACTION[a2] ==\"N\") or \n            (ACTION[a1]==\"E\" and ACTION[a2] ==\"W\") or  \n            (ACTION[a1]==\"W\" and ACTION[a2] ==\"E\") )  \ndef fix_traj(trajs):\n    \"\"\"\n        Remove states going back (indecisions in agent)\n    \"\"\"",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "fix_traj",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def fix_traj(trajs):\n    \"\"\"\n        Remove states going back (indecisions in agent)\n    \"\"\"\n    for i in range(len(trajs)):\n        last_action = None\n        last_state = None\n        history = dict()\n        j=0\n        while(j < len(trajs[i]) ):",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "convert2airsim",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def convert2airsim(trajs):\n    return     [ [    [ p[0],p[1],-p[2] ]    for p in t]  for t in trajs]\ndef plot_xy(trajs,cell_size,dotSize=3,fids=None,doScatter=False,doSave=False,date=\"\",isCell=False):\n    \"\"\" 2D plot of trajectories trajs = [t1,...,tn] \"\"\"\n    fPerHeights = dict()\n    for i in range(len(trajs)):\n        if(fids is None):\n            idx = i\n        else:\n            idx = fids[i]",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "plot_xy",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def plot_xy(trajs,cell_size,dotSize=3,fids=None,doScatter=False,doSave=False,date=\"\",isCell=False):\n    \"\"\" 2D plot of trajectories trajs = [t1,...,tn] \"\"\"\n    fPerHeights = dict()\n    for i in range(len(trajs)):\n        if(fids is None):\n            idx = i\n        else:\n            idx = fids[i]\n        if(isCell):\n            xs = [ p[0]+cell_size/2 for p in trajs[i] ]",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "plot_3d",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def plot_3d(trajs,ids,also2d=False,doSave=False,name=\"\",exploded=False,date=\"\",isCell): \n    \"\"\" 3D plot of trajectories trajs = [t1,...,tn] \"\"\"\n    fig = plt.figure(figsize=(20,10))\n    ax = fig.gca(projection='3d').invert_yaxis()\n    # fig = matplotlib.pyplot.gcf()\n    # fig.set_size_inches(18.5, 10.5)\n    altitudes = dict()\n    for i in range(len(trajs)):\n        # print(\"xs\",xs[-10:],\"ys\",ys[-10:],\"zs\",zs[-10:])\n        if(exploded):",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "plot_z",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def plot_z(trajs,fids, second_axis,doSave=False,name=\"\"):\n    \"\"\" 2D plot of zs depending second_axis (z = f(second_axis)) \"\"\"\n    if not (0 <= second_axis <= 1 ): raise Exception(\"Invalid axis\")\n    fig = plt.figure(figsize=(20,10))\n    ax = fig.add_subplot(111)\n    plt.grid()\n    for i,t in enumerate( trajs ):\n        t = [ [p[second_axis],p[2]] for p in t]\n        plt.plot(*zip(* t ),\"-o\")\n        ax.text(t[0][0], t[0][1], str(fids[i]), style='italic')",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "plot_z_id",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def plot_z_id(zs):\n    \"\"\" 2D plot of zs depending on fligth id \"\"\"\n    fig = plt.figure()\n    for i in range(len(zs)):\n        z_t = [ [t,z] for t,z in enumerate(zs[i])]\n        print(z_t)\n        plt.plot(*zip(*z_t),\"-o\")\n    plt.title(\"height\" )\n    plt.show()\ndef np_remove_z(arr):",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "np_remove_z",
        "kind": 2,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "def np_remove_z(arr):\n    return np.delete( np.array( arr ),np.s_[2:3], axis=1)\nif __name__ == \"__main__\":\n    d1 = [[0,0],[1,0],[2,0],[1,0],[2,0],[1,0],[0,0],[0,1],[0,2],[0,1],[0,0],[0,1],[0,2],[0,3],[0,4]]\n    d2 = [[1,0],[2,0],[2,1],[2,2],[2,3],[1,3],[0,3],[0,4]]\n    d3 = [[4,0,1],[4,1,1],[4,2,1],[4,3,1],[3,3,1],[2,3,1],[1,3,1],[0,3,1]]\n    d4 = [[5,0,1],[5,1,1],[5,2,1],[5,3,1],[4,3,1],[3,3,1],[3,2,1],[3,1,1],[3,0,1]]\n    trajectories = [d1,d2]\n    d3 = np.array(d3)\n    d3[:,1] += 3",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "SEED",
        "kind": 5,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "SEED = 668\nN_DRONES=5\nN_POINTS = 100\nSTEP_SIZE = 20\nACTION = [\"N\",\"S\", \"E\", \"W\"]\nAINDEX = {\"N\":0,\"S\":1, \"E\":2, \"W\":3}\nFIGS_FOLDER = \"generatedFigs\"\n# random.seed(SEED)\n# np.random.seed(seed=SEED)\ndef setSeed(seed):",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "N_POINTS",
        "kind": 5,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "N_POINTS = 100\nSTEP_SIZE = 20\nACTION = [\"N\",\"S\", \"E\", \"W\"]\nAINDEX = {\"N\":0,\"S\":1, \"E\":2, \"W\":3}\nFIGS_FOLDER = \"generatedFigs\"\n# random.seed(SEED)\n# np.random.seed(seed=SEED)\ndef setSeed(seed):\n   global SEED\n   SEED=seed",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "STEP_SIZE",
        "kind": 5,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "STEP_SIZE = 20\nACTION = [\"N\",\"S\", \"E\", \"W\"]\nAINDEX = {\"N\":0,\"S\":1, \"E\":2, \"W\":3}\nFIGS_FOLDER = \"generatedFigs\"\n# random.seed(SEED)\n# np.random.seed(seed=SEED)\ndef setSeed(seed):\n   global SEED\n   SEED=seed\n   random.seed(SEED)",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "ACTION",
        "kind": 5,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "ACTION = [\"N\",\"S\", \"E\", \"W\"]\nAINDEX = {\"N\":0,\"S\":1, \"E\":2, \"W\":3}\nFIGS_FOLDER = \"generatedFigs\"\n# random.seed(SEED)\n# np.random.seed(seed=SEED)\ndef setSeed(seed):\n   global SEED\n   SEED=seed\n   random.seed(SEED)\n   np.random.seed(seed=SEED)",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "AINDEX",
        "kind": 5,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "AINDEX = {\"N\":0,\"S\":1, \"E\":2, \"W\":3}\nFIGS_FOLDER = \"generatedFigs\"\n# random.seed(SEED)\n# np.random.seed(seed=SEED)\ndef setSeed(seed):\n   global SEED\n   SEED=seed\n   random.seed(SEED)\n   np.random.seed(seed=SEED)\ndef setRandomSeed():",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "FIGS_FOLDER",
        "kind": 5,
        "importPath": "trajs_utils",
        "description": "trajs_utils",
        "peekOfCode": "FIGS_FOLDER = \"generatedFigs\"\n# random.seed(SEED)\n# np.random.seed(seed=SEED)\ndef setSeed(seed):\n   global SEED\n   SEED=seed\n   random.seed(SEED)\n   np.random.seed(seed=SEED)\ndef setRandomSeed():\n    s = random.randint(0,int(10e8))",
        "detail": "trajs_utils",
        "documentation": {}
    },
    {
        "label": "play_audio_notification",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def play_audio_notification(n_beeps=3,frequency=2000,beep_duration=250):\n    for _ in range(n_beeps):\n        winsound.Beep(frequency, beep_duration)\n        time.sleep(0.1)\ndef initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                                filemode='w',\n                                format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\n                                datefmt='%H:%M:%S',\n                                level=logging.DEBUG)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "initiate_logger",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                                filemode='w',\n                                format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\n                                datefmt='%H:%M:%S',\n                                level=logging.DEBUG)\n    logger = logging.getLogger('multiAirGym')\n    logger.debug('Experiment Date: {}'.format(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M') ) )\n    return logger\ndef ConvertIfStringIsInt(input_string):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "ConvertIfStringIsInt",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def ConvertIfStringIsInt(input_string):\n    try:\n        float(input_string)\n        try:\n            if int(input_string) == float(input_string):\n                return int(input_string)\n            else:\n                return float(input_string)\n        except ValueError:\n            return float(input_string)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "read_cfg",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def read_cfg(config_filename='configs/map_config.cfg', verbose=False):\n    parser = ConfigParser()\n    parser.optionxform = str\n    parser.read(config_filename)\n    cfg = DotMap()\n    if verbose:\n        hyphens = '-' * int((80 - len(config_filename))/2)\n        print(hyphens + ' ' + config_filename + ' ' + hyphens)\n    for section_name in parser.sections():\n        if verbose:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "projToAirSim",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n    return proj_coords + (z,)\ndef lonlatToAirSim( lon, lat, z):\n    return projToAirSim(*lonlatToProj(lon, lat, z)   )",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "lonlatToProj",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n    return proj_coords + (z,)\ndef lonlatToAirSim( lon, lat, z):\n    return projToAirSim(*lonlatToProj(lon, lat, z)   )\ndef nedToProj( x, y, z):\n    \"\"\"\n    Converts NED coordinates to the projected map coordinates\n    Takes care of offset origin, inverted z, as well as inverted y axis\n    \"\"\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "lonlatToAirSim",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def lonlatToAirSim( lon, lat, z):\n    return projToAirSim(*lonlatToProj(lon, lat, z)   )\ndef nedToProj( x, y, z):\n    \"\"\"\n    Converts NED coordinates to the projected map coordinates\n    Takes care of offset origin, inverted z, as well as inverted y axis\n    \"\"\"\n    x_proj = x + o_x\n    y_proj = -y + o_y\n    z_proj = -z + o_z",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "nedToProj",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def nedToProj( x, y, z):\n    \"\"\"\n    Converts NED coordinates to the projected map coordinates\n    Takes care of offset origin, inverted z, as well as inverted y axis\n    \"\"\"\n    x_proj = x + o_x\n    y_proj = -y + o_y\n    z_proj = -z + o_z\n    return (x_proj, y_proj, z_proj)\ndef nedToGps( x, y, z):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "nedToGps",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def nedToGps( x, y, z):\n    return lonlatToProj(* nedToProj(x, y, z), inverse=True)\ndef dronePrint(idx,s):\n    print(\"[Drone\"+str(idx)+\"]\",s)\ndef addToDict(d: dict,k,v):\n    if k not in d:\n        d[k] = []\n    d[k].append(v)\ndef pkl_save_obj(obj, name,file_timestamp ):\n    with open(TRAJECTORIES_FOLDER + name + file_timestamp + '.pkl', 'wb') as f:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "dronePrint",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def dronePrint(idx,s):\n    print(\"[Drone\"+str(idx)+\"]\",s)\ndef addToDict(d: dict,k,v):\n    if k not in d:\n        d[k] = []\n    d[k].append(v)\ndef pkl_save_obj(obj, name,file_timestamp ):\n    with open(TRAJECTORIES_FOLDER + name + file_timestamp + '.pkl', 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\ndef pkl_load_obj(name=None,file_timestamp=None,filename=None):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "addToDict",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def addToDict(d: dict,k,v):\n    if k not in d:\n        d[k] = []\n    d[k].append(v)\ndef pkl_save_obj(obj, name,file_timestamp ):\n    with open(TRAJECTORIES_FOLDER + name + file_timestamp + '.pkl', 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\ndef pkl_load_obj(name=None,file_timestamp=None,filename=None):\n    if filename:\n        with open(TRAJECTORIES_FOLDER +filename, 'rb') as f:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "pkl_save_obj",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def pkl_save_obj(obj, name,file_timestamp ):\n    with open(TRAJECTORIES_FOLDER + name + file_timestamp + '.pkl', 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\ndef pkl_load_obj(name=None,file_timestamp=None,filename=None):\n    if filename:\n        with open(TRAJECTORIES_FOLDER +filename, 'rb') as f:\n            return pickle.load(f)\n    elif name and file_timestamp:\n        with open(TRAJECTORIES_FOLDER + name + file_timestamp+ '.pkl', 'rb') as f:\n            return pickle.load(f)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "pkl_load_obj",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def pkl_load_obj(name=None,file_timestamp=None,filename=None):\n    if filename:\n        with open(TRAJECTORIES_FOLDER +filename, 'rb') as f:\n            return pickle.load(f)\n    elif name and file_timestamp:\n        with open(TRAJECTORIES_FOLDER + name + file_timestamp+ '.pkl', 'rb') as f:\n            return pickle.load(f)\n    else:\n        raise Exception(\"Specify file name\")\ndef numpy_save(arr,folder_timestamp,filename):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "numpy_save",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def numpy_save(arr,folder_timestamp,filename):\n    file_path = TRAJECTORIES_FOLDER+\"trajectories_\"+folder_timestamp\n    if not os.path.exists(file_path):\n        os.makedirs(file_path)\n    data = np.asarray(arr)\n    # save to npy file\n    print(\"Saving\",os.path.join(file_path, filename))\n    np.save(os.path.join(file_path, filename) , data)\ndef position_to_list(position_vector) -> list:\n    return [position_vector.x_val, position_vector.y_val, position_vector.z_val]",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "position_to_list",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def position_to_list(position_vector) -> list:\n    return [position_vector.x_val, position_vector.y_val, position_vector.z_val]\ndef list_to_position(l,wcell_in_meters=20,hcell_in_meters=20) -> Vector3r:\n    # x = int(l[0]*wcell_in_meters)\n    # y = int(l[1]*hcell_in_meters)\n    x = int(l[0]*2)\n    y = int(l[1]*2)\n    z = int(l[2])\n    if len(l) != 3:\n        raise Exception(\"REQUIRED EXACTLY 3 elements\")",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "list_to_position",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def list_to_position(l,wcell_in_meters=20,hcell_in_meters=20) -> Vector3r:\n    # x = int(l[0]*wcell_in_meters)\n    # y = int(l[1]*hcell_in_meters)\n    x = int(l[0]*2)\n    y = int(l[1]*2)\n    z = int(l[2])\n    if len(l) != 3:\n        raise Exception(\"REQUIRED EXACTLY 3 elements\")\n    return Vector3r(x,y,z)\ndef set_offset_position(pos):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "set_offset_position",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def set_offset_position(pos):\n    _v = g_vehicles[\"Drone0\"]\n    _offset_x = _v[\"X\"] \n    _offset_y = _v[\"Y\"]\n    _offset_z = _v[\"Z\"]\n    pos.x_val += _offset_x\n    pos.y_val += _offset_y\n    pos.z_val += _offset_z\ndef _colorize(idx): \n    if idx == 0:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "xy_distance",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def xy_distance(point1, point2):\n    if type(point1) == Vector3r:\n        point1 = [point1.x_val,point1.y_val] \n    if type(point2) == Vector3r:\n        point2 = [point2.x_val,point2.y_val] \n    return   np.linalg.norm(point1 - point2) \ndef myInterpolate(arr, n_samples=10 ):\n    res = []\n    for i,p in enumerate(arr):\n        if(i+1 >= len(arr)):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "myInterpolate",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def myInterpolate(arr, n_samples=10 ):\n    res = []\n    for i,p in enumerate(arr):\n        if(i+1 >= len(arr)):\n            break\n        x1,y1,z1 = p[0], p[1], p[2]\n        x2,y2,z2 = arr[i+1][0], arr[i+1][1], arr[i+1][2] \n        step_length = max(abs(x2-x1),abs(y2-y1)) / n_samples\n        for i in range(n_samples):\n            if(x2 > x1):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "myInterpolate2D",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def myInterpolate2D(trajs, n_samples=10,step_size=20 ):\n    res = []\n    for arr in trajs:\n        res_t = []\n        for i,p in enumerate(arr):\n            if(i+1 >= len(arr)):\n                break\n            x1,y1 = p[0], p[1]\n            x2,y2 = arr[i+1][0], arr[i+1][1] \n            # if(i==0):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "build_trees",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def build_trees(trajectories):\n    _trees = []\n    for traj in trajectories:\n        _trees.append(KDTree(np.array(traj)))\n    return _trees\ndef avoid_collision(trajectories,trees,min_height,max_height,\n    sep_h,min_safe_points,radius=30,simpleMode=True):\n    Tmax = max([len(traj) for traj in trajectories])\n    drones = range(len(trajectories))\n    points = {}",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "avoid_collision",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def avoid_collision(trajectories,trees,min_height,max_height,\n    sep_h,min_safe_points,radius=30,simpleMode=True):\n    Tmax = max([len(traj) for traj in trajectories])\n    drones = range(len(trajectories))\n    points = {}\n    zs=[[] for d in drones] \n    trajs_3d =[[] for d in drones] \n    colliding_trajs = dict()\n    for d in drones:\n        for t in range(len(trajectories[d])):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "AIRSIM_SETTINGS_FOLDER",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "AIRSIM_SETTINGS_FOLDER = 'C:/Users/gioca/OneDrive/Documents/Airsim/'\nCONFIGS_FOLDER = \"./configs/\"\nLOG_FOLDER = \"generatedData/logs/\"\nTRAJECTORIES_FOLDER = \"./qtrajectories/\"\nwith open(AIRSIM_SETTINGS_FOLDER + 'settings.json', 'r') as jsonFile:\n    g_airsim_settings = json.load(jsonFile)\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CONFIGS_FOLDER",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "CONFIGS_FOLDER = \"./configs/\"\nLOG_FOLDER = \"generatedData/logs/\"\nTRAJECTORIES_FOLDER = \"./qtrajectories/\"\nwith open(AIRSIM_SETTINGS_FOLDER + 'settings.json', 'r') as jsonFile:\n    g_airsim_settings = json.load(jsonFile)\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "LOG_FOLDER",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "LOG_FOLDER = \"generatedData/logs/\"\nTRAJECTORIES_FOLDER = \"./qtrajectories/\"\nwith open(AIRSIM_SETTINGS_FOLDER + 'settings.json', 'r') as jsonFile:\n    g_airsim_settings = json.load(jsonFile)\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "TRAJECTORIES_FOLDER",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "TRAJECTORIES_FOLDER = \"./qtrajectories/\"\nwith open(AIRSIM_SETTINGS_FOLDER + 'settings.json', 'r') as jsonFile:\n    g_airsim_settings = json.load(jsonFile)\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "g_vehicles",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "g_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "g_config",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "g_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n    12.466382,",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "map_filename",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "map_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n    12.466382,\n    41.902491,\n    80) ",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "SRID",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "SRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n    12.466382,\n    41.902491,\n    80) \nNEW_TRAJ_PENALTY = 25 # negative reward for collision points of a new trajectory",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "ORIGIN",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "ORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n    12.466382,\n    41.902491,\n    80) \nNEW_TRAJ_PENALTY = 25 # negative reward for collision points of a new trajectory\n# GPS init position of uavs",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "DEST",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "DEST = (\n    12.466382,\n    41.902491,\n    80) \nNEW_TRAJ_PENALTY = 25 # negative reward for collision points of a new trajectory\n# GPS init position of uavs\ninit_gps = [\n    (\n        12.45727300643921,\n        41.90169011784915,",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "NEW_TRAJ_PENALTY",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "NEW_TRAJ_PENALTY = 25 # negative reward for collision points of a new trajectory\n# GPS init position of uavs\ninit_gps = [\n    (\n        12.45727300643921,\n        41.90169011784915,\n        0\n    ),\n    (\n        12.457227408885958,",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "init_gps",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "init_gps = [\n    (\n        12.45727300643921,\n        41.90169011784915,\n        0\n    ),\n    (\n        12.457227408885958,\n        41.90276414312537,\n        0",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "red_color",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "red_color = [1.0,0.0,0.0]\ngreen_color = [0.0,0.5,0.0]\nblue_color = [0.0,0.0,1.0]\norange_color =[255/255, 102/255, 0]\ndef play_audio_notification(n_beeps=3,frequency=2000,beep_duration=250):\n    for _ in range(n_beeps):\n        winsound.Beep(frequency, beep_duration)\n        time.sleep(0.1)\ndef initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "green_color",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "green_color = [0.0,0.5,0.0]\nblue_color = [0.0,0.0,1.0]\norange_color =[255/255, 102/255, 0]\ndef play_audio_notification(n_beeps=3,frequency=2000,beep_duration=250):\n    for _ in range(n_beeps):\n        winsound.Beep(frequency, beep_duration)\n        time.sleep(0.1)\ndef initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                                filemode='w',",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "blue_color",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "blue_color = [0.0,0.0,1.0]\norange_color =[255/255, 102/255, 0]\ndef play_audio_notification(n_beeps=3,frequency=2000,beep_duration=250):\n    for _ in range(n_beeps):\n        winsound.Beep(frequency, beep_duration)\n        time.sleep(0.1)\ndef initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                                filemode='w',\n                                format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "env_cfg",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "env_cfg = read_cfg(config_filename = CONFIGS_FOLDER + 'map_config.cfg')\no_x = env_cfg[\"o_x\"]\no_y = env_cfg[\"o_y\"]\no_z = env_cfg[\"o_z\"]\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "o_x",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "o_x = env_cfg[\"o_x\"]\no_y = env_cfg[\"o_y\"]\no_z = env_cfg[\"o_z\"]\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "o_y",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "o_y = env_cfg[\"o_y\"]\no_z = env_cfg[\"o_z\"]\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n    return proj_coords + (z,)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "o_z",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "o_z = env_cfg[\"o_z\"]\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n    return proj_coords + (z,)\ndef lonlatToAirSim( lon, lat, z):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "distance = lambda p1, p2: np.norm(p1-p2)\ndef xy_distance(point1, point2):\n    if type(point1) == Vector3r:\n        point1 = [point1.x_val,point1.y_val] \n    if type(point2) == Vector3r:\n        point2 = [point2.x_val,point2.y_val] \n    return   np.linalg.norm(point1 - point2) \ndef myInterpolate(arr, n_samples=10 ):\n    res = []\n    for i,p in enumerate(arr):",
        "detail": "utils",
        "documentation": {}
    }
]