[
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {
            "value": "\n```python\nimport __future__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {
            "value": "\n```python\nimport __future__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "msgpackrpc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "msgpackrpc",
        "description": "msgpackrpc",
        "detail": "msgpackrpc",
        "documentation": {
            "value": "\n```python\nimport msgpackrpc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {
            "value": "\n```python\nimport numpy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "msgpack",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "msgpack",
        "description": "msgpack",
        "detail": "msgpack",
        "documentation": {
            "value": "\n```python\nimport msgpack\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {
            "value": "\n```python\nimport time\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "localtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {
            "value": "\n```python\nimport time\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "localtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {
            "value": "\n```python\nimport time\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "localtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {
            "value": "\n```python\nimport time\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {
            "value": "\n```python\nimport math\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {
            "value": "\n```python\nimport logging\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {
            "value": "\n```python\nimport matplotlib.pyplot\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {
            "value": "\n```python\nimport re\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {
            "value": "\n```python\nimport sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdb",
        "description": "pdb",
        "detail": "pdb",
        "documentation": {
            "value": "\n```python\nimport pdb\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "O_EXCL",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {
            "value": "\n```python\nimport inspect\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {
            "value": "\n```python\nimport types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {
            "value": "\n```python\nimport cv2\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "airsim",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "airsim",
        "description": "airsim",
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Vector3r",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultirotorClient",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Vector3r",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Pose",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "to_quaternion",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Vector3r",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Pose",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "to_quaternion",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultirotorClient",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultirotorClient",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Proj",
        "importPath": "pyproj",
        "description": "pyproj",
        "isExtraImport": true,
        "detail": "pyproj",
        "documentation": {
            "value": "\n```python\nimport pyproj\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Proj",
        "importPath": "pyproj",
        "description": "pyproj",
        "isExtraImport": true,
        "detail": "pyproj",
        "documentation": {
            "value": "\n```python\nimport pyproj\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gym",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gym",
        "description": "gym",
        "detail": "gym",
        "documentation": {
            "value": "\n```python\nimport gym\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {
            "value": "\n```python\nimport gym\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {
            "value": "\n```python\nimport gym\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {
            "value": "\n```python\nimport gym\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "error",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {
            "value": "\n```python\nimport gym\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {
            "value": "\n```python\nimport gym\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {
            "value": "\n```python\nimport gym\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {
            "value": "\n```python\nimport typing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {
            "value": "\n```python\nimport typing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {
            "value": "\n```python\nimport PIL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {
            "value": "\n```python\nimport PIL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {
            "value": "\n```python\nimport PIL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {
            "value": "\n```python\nimport PIL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {
            "value": "\n```python\nimport PIL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {
            "value": "\n```python\nimport random\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {
            "value": "\n```python\nimport gym.utils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {
            "value": "\n```python\nimport gym.utils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {
            "value": "\n```python\nimport gym.utils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {
            "value": "\n```python\nimport gym.utils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {
            "value": "\n```python\nimport gym.spaces\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Box",
        "importPath": "gym.spaces.box",
        "description": "gym.spaces.box",
        "isExtraImport": true,
        "detail": "gym.spaces.box",
        "documentation": {
            "value": "\n```python\nimport gym.spaces.box\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Box",
        "importPath": "gym.spaces.box",
        "description": "gym.spaces.box",
        "isExtraImport": true,
        "detail": "gym.spaces.box",
        "documentation": {
            "value": "\n```python\nimport gym.spaces.box\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Box",
        "importPath": "gym.spaces.box",
        "description": "gym.spaces.box",
        "isExtraImport": true,
        "detail": "gym.spaces.box",
        "documentation": {
            "value": "\n```python\nimport gym.spaces.box\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "newMyAirSimClient",
        "importPath": "newMyAirSimClient",
        "description": "newMyAirSimClient",
        "isExtraImport": true,
        "detail": "newMyAirSimClient",
        "documentation": {
            "value": "\n```python\nimport newMyAirSimClient\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lock",
        "importPath": "newMyAirSimClient",
        "description": "newMyAirSimClient",
        "isExtraImport": true,
        "detail": "newMyAirSimClient",
        "documentation": {
            "value": "\n```python\nimport newMyAirSimClient\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "newMyAirSimClient",
        "importPath": "newMyAirSimClient",
        "description": "newMyAirSimClient",
        "isExtraImport": true,
        "detail": "newMyAirSimClient",
        "documentation": {
            "value": "\n```python\nimport newMyAirSimClient\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lock",
        "importPath": "newMyAirSimClient",
        "description": "newMyAirSimClient",
        "isExtraImport": true,
        "detail": "newMyAirSimClient",
        "documentation": {
            "value": "\n```python\nimport newMyAirSimClient\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "newMyAirSimClient",
        "importPath": "newMyAirSimClient",
        "description": "newMyAirSimClient",
        "isExtraImport": true,
        "detail": "newMyAirSimClient",
        "documentation": {
            "value": "\n```python\nimport newMyAirSimClient\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nimport utils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {
            "value": "\n```python\nimport concurrent.futures\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "eventlet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "eventlet",
        "description": "eventlet",
        "detail": "eventlet",
        "documentation": {
            "value": "\n```python\nimport eventlet\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Timeout",
        "importPath": "eventlet",
        "description": "eventlet",
        "isExtraImport": true,
        "detail": "eventlet",
        "documentation": {
            "value": "\n```python\nimport eventlet\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Timeout",
        "importPath": "eventlet",
        "description": "eventlet",
        "isExtraImport": true,
        "detail": "eventlet",
        "documentation": {
            "value": "\n```python\nimport eventlet\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {
            "value": "\n```python\nimport threading\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {
            "value": "\n```python\nimport signal\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AirSimEnv",
        "importPath": "gym_airsim.envs.airSimEnv",
        "description": "gym_airsim.envs.airSimEnv",
        "isExtraImport": true,
        "detail": "gym_airsim.envs.airSimEnv",
        "documentation": {
            "value": "\n```python\nimport gym_airsim.envs.airSimEnv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "register",
        "importPath": "gym.envs.registration",
        "description": "gym.envs.registration",
        "isExtraImport": true,
        "detail": "gym.envs.registration",
        "documentation": {
            "value": "\n```python\nimport gym.envs.registration\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "register",
        "importPath": "gym.envs.registration",
        "description": "gym.envs.registration",
        "isExtraImport": true,
        "detail": "gym.envs.registration",
        "documentation": {
            "value": "\n```python\nimport gym.envs.registration\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "mul",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {
            "value": "\n```python\nimport operator\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeView2D",
        "importPath": "gym_maze.envs.maze_view_2d",
        "description": "gym_maze.envs.maze_view_2d",
        "isExtraImport": true,
        "detail": "gym_maze.envs.maze_view_2d",
        "documentation": {
            "value": "\n```python\nimport gym_maze.envs.maze_view_2d\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeView2D",
        "importPath": "gym_maze.envs.maze_view_2d",
        "description": "gym_maze.envs.maze_view_2d",
        "isExtraImport": true,
        "detail": "gym_maze.envs.maze_view_2d",
        "documentation": {
            "value": "\n```python\nimport gym_maze.envs.maze_view_2d\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {
            "value": "\n```python\nimport itertools\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "KDTree",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {
            "value": "\n```python\nimport sklearn.neighbors\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "KDTree",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {
            "value": "\n```python\nimport sklearn.neighbors\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "KDTree",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {
            "value": "\n```python\nimport sklearn.neighbors\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Maze",
        "importPath": "maze_view_2d",
        "description": "maze_view_2d",
        "isExtraImport": true,
        "detail": "maze_view_2d",
        "documentation": {
            "value": "\n```python\nimport maze_view_2d\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {
            "value": "\n```python\nimport pygame\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {
            "value": "\n```python\nimport collections.abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "block",
        "importPath": "numpy.core.shape_base",
        "description": "numpy.core.shape_base",
        "isExtraImport": true,
        "detail": "numpy.core.shape_base",
        "documentation": {
            "value": "\n```python\nimport numpy.core.shape_base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "*",
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "isExtraImport": true,
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nimport gym_maze.envs.maze_env\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnv",
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "isExtraImport": true,
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nimport gym_maze.envs.maze_env\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnv",
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "isExtraImport": true,
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nimport gym_maze.envs.maze_env\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnv",
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "isExtraImport": true,
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nimport gym_maze.envs.maze_env\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Vector3r",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {
            "value": "\n```python\nimport airsim.types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Vector3r",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {
            "value": "\n```python\nimport airsim.types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "*",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {
            "value": "\n```python\nimport airsim.types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ImageRequest",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {
            "value": "\n```python\nimport airsim.types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Vector3r",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {
            "value": "\n```python\nimport airsim.types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ImageRequest",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {
            "value": "\n```python\nimport airsim.types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Vector3r",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {
            "value": "\n```python\nimport airsim.types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Vector3r",
        "importPath": "airsim.types",
        "description": "airsim.types",
        "isExtraImport": true,
        "detail": "airsim.types",
        "documentation": {
            "value": "\n```python\nimport airsim.types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {
            "value": "\n```python\nimport datetime\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {
            "value": "\n```python\nimport pickle\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {
            "value": "\n```python\nimport argparse\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {
            "value": "\n```python\nimport json\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gym_maze",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gym_maze",
        "description": "gym_maze",
        "detail": "gym_maze",
        "documentation": {
            "value": "\n```python\nimport gym_maze\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CollectEnv",
        "importPath": "gym_airsim.envs.collectEnv",
        "description": "gym_airsim.envs.collectEnv",
        "isExtraImport": true,
        "detail": "gym_airsim.envs.collectEnv",
        "documentation": {
            "value": "\n```python\nimport gym_airsim.envs.collectEnv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CollectEnv",
        "importPath": "gym_airsim.envs.collectEnv",
        "description": "gym_airsim.envs.collectEnv",
        "isExtraImport": true,
        "detail": "gym_airsim.envs.collectEnv",
        "documentation": {
            "value": "\n```python\nimport gym_airsim.envs.collectEnv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TrajectoryTrackerClient",
        "importPath": "trajectoryTrackerClient",
        "description": "trajectoryTrackerClient",
        "isExtraImport": true,
        "detail": "trajectoryTrackerClient",
        "documentation": {
            "value": "\n```python\nimport trajectoryTrackerClient\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TrajectoryTrackerClient",
        "importPath": "trajectoryTrackerClient",
        "description": "trajectoryTrackerClient",
        "isExtraImport": true,
        "detail": "trajectoryTrackerClient",
        "documentation": {
            "value": "\n```python\nimport trajectoryTrackerClient\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TrajectoryTrackerClient",
        "importPath": "trajectoryTrackerClient",
        "description": "trajectoryTrackerClient",
        "isExtraImport": true,
        "detail": "trajectoryTrackerClient",
        "documentation": {
            "value": "\n```python\nimport trajectoryTrackerClient\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gym_airsim.envs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gym_airsim.envs",
        "description": "gym_airsim.envs",
        "detail": "gym_airsim.envs",
        "documentation": {
            "value": "\n```python\nimport gym_airsim.envs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AirSimEnv",
        "importPath": "gym_airsim.envs",
        "description": "gym_airsim.envs",
        "isExtraImport": true,
        "detail": "gym_airsim.envs",
        "documentation": {
            "value": "\n```python\nimport gym_airsim.envs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AirSimEnv",
        "importPath": "gym_airsim.envs",
        "description": "gym_airsim.envs",
        "isExtraImport": true,
        "detail": "gym_airsim.envs",
        "documentation": {
            "value": "\n```python\nimport gym_airsim.envs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AirSimEnv",
        "importPath": "gym_airsim.envs",
        "description": "gym_airsim.envs",
        "isExtraImport": true,
        "detail": "gym_airsim.envs",
        "documentation": {
            "value": "\n```python\nimport gym_airsim.envs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gym_airsim",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gym_airsim",
        "description": "gym_airsim",
        "detail": "gym_airsim",
        "documentation": {
            "value": "\n```python\nimport gym_airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "arraypad",
        "importPath": "numpy.lib",
        "description": "numpy.lib",
        "isExtraImport": true,
        "detail": "numpy.lib",
        "documentation": {
            "value": "\n```python\nimport numpy.lib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "array",
        "importPath": "pylab",
        "description": "pylab",
        "isExtraImport": true,
        "detail": "pylab",
        "documentation": {
            "value": "\n```python\nimport pylab\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "arange",
        "importPath": "pylab",
        "description": "pylab",
        "isExtraImport": true,
        "detail": "pylab",
        "documentation": {
            "value": "\n```python\nimport pylab\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "uint8",
        "importPath": "pylab",
        "description": "pylab",
        "isExtraImport": true,
        "detail": "pylab",
        "documentation": {
            "value": "\n```python\nimport pylab\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "array",
        "importPath": "pylab",
        "description": "pylab",
        "isExtraImport": true,
        "detail": "pylab",
        "documentation": {
            "value": "\n```python\nimport pylab\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "arange",
        "importPath": "pylab",
        "description": "pylab",
        "isExtraImport": true,
        "detail": "pylab",
        "documentation": {
            "value": "\n```python\nimport pylab\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "uint8",
        "importPath": "pylab",
        "description": "pylab",
        "isExtraImport": true,
        "detail": "pylab",
        "documentation": {
            "value": "\n```python\nimport pylab\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "array",
        "importPath": "pylab",
        "description": "pylab",
        "isExtraImport": true,
        "detail": "pylab",
        "documentation": {
            "value": "\n```python\nimport pylab\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "arange",
        "importPath": "pylab",
        "description": "pylab",
        "isExtraImport": true,
        "detail": "pylab",
        "documentation": {
            "value": "\n```python\nimport pylab\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "uint8",
        "importPath": "pylab",
        "description": "pylab",
        "isExtraImport": true,
        "detail": "pylab",
        "documentation": {
            "value": "\n```python\nimport pylab\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "airsim,time,threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "airsim.time.threading",
        "description": "airsim.time.threading",
        "detail": "airsim.time.threading",
        "documentation": {
            "value": "\n```python\nimport airsim.time.threading\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "to_eularian_angles",
        "importPath": "airsim.utils",
        "description": "airsim.utils",
        "isExtraImport": true,
        "detail": "airsim.utils",
        "documentation": {
            "value": "\n```python\nimport airsim.utils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {
            "value": "\n```python\nimport multiprocessing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {
            "value": "\n```python\nimport gc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CollectMTEnv",
        "importPath": "gym_airsim.envs.collectMTEnv",
        "description": "gym_airsim.envs.collectMTEnv",
        "isExtraImport": true,
        "detail": "gym_airsim.envs.collectMTEnv",
        "documentation": {
            "value": "\n```python\nimport gym_airsim.envs.collectMTEnv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CollectMTEnv",
        "importPath": "gym_airsim.envs.collectMTEnv",
        "description": "gym_airsim.envs.collectMTEnv",
        "isExtraImport": true,
        "detail": "gym_airsim.envs.collectMTEnv",
        "documentation": {
            "value": "\n```python\nimport gym_airsim.envs.collectMTEnv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AirSimGeoClient",
        "importPath": "airsimgeo",
        "description": "airsimgeo",
        "isExtraImport": true,
        "detail": "airsimgeo",
        "documentation": {
            "value": "\n```python\nimport airsimgeo\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NavMapper",
        "importPath": "navMapWindow",
        "description": "navMapWindow",
        "isExtraImport": true,
        "detail": "navMapWindow",
        "documentation": {
            "value": "\n```python\nimport navMapWindow\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DotMap",
        "importPath": "dotmap",
        "description": "dotmap",
        "isExtraImport": true,
        "detail": "dotmap",
        "documentation": {
            "value": "\n```python\nimport dotmap\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {
            "value": "\n```python\nimport configparser\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "VehicleClient",
        "kind": 6,
        "importPath": "airsim-.client",
        "description": "airsim-.client",
        "peekOfCode": "class VehicleClient:\n    def __init__(self, ip = \"\", port = 41451, timeout_value = 3600):\n        # print(\"Initing...\")\n        if (ip == \"\"):\n            ip = \"127.0.0.1\"\n        self.client = msgpackrpc.Client(msgpackrpc.Address(ip, port), timeout = timeout_value, pack_encoding = 'utf-8', unpack_encoding = 'utf-8')\n    # -----------------------------------  Common vehicle APIs ---------------------------------------------\n    def reset(self):\n        \"\"\"\n        Reset the vehicle to its original starting state",
        "detail": "airsim-.client",
        "documentation": {
            "value": "\n```python\nfrom airsim-.client import VehicleClient\n```\n\n```python\n\n\n```\n\n```python\nclass VehicleClient:\n    def __init__(self, ip = \"\", port = 41451, timeout_value = 3600):\n        # print(\"Initing...\")\n        if (ip == \"\"):\n            ip = \"127.0.0.1\"\n        self.client = msgpackrpc.Client(msgpackrpc.Address(ip, port), timeout = timeout_value, pack_encoding = 'utf-8', unpack_encoding = 'utf-8')\n    # -----------------------------------  Common vehicle APIs ---------------------------------------------\n    def reset(self):\n        \"\"\"\n        Reset the vehicle to its original starting state\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultirotorClient",
        "kind": 6,
        "importPath": "airsim-.client",
        "description": "airsim-.client",
        "peekOfCode": "class MultirotorClient(VehicleClient, object):\n    def __init__(self, ip = \"\", port = 41451, timeout_value = 3600):\n        super(MultirotorClient, self).__init__(ip, port, timeout_value)\n    def takeoffAsync(self, timeout_sec = 20, vehicle_name = ''):\n        \"\"\"\n        Takeoff vehicle to 3m above ground. Vehicle should not be moving when this API is used\n        Args:\n            timeout_sec (int, optional): Timeout for the vehicle to reach desired altitude\n            vehicle_name (str, optional): Name of the vehicle to send this command to\n        Returns:",
        "detail": "airsim-.client",
        "documentation": {
            "value": "\n```python\nfrom airsim-.client import MultirotorClient\n```\n\n```python\n\n\n```\n\n```python\nclass MultirotorClient(VehicleClient, object):\n    def __init__(self, ip = \"\", port = 41451, timeout_value = 3600):\n        super(MultirotorClient, self).__init__(ip, port, timeout_value)\n    def takeoffAsync(self, timeout_sec = 20, vehicle_name = ''):\n        \"\"\"\n        Takeoff vehicle to 3m above ground. Vehicle should not be moving when this API is used\n        Args:\n            timeout_sec (int, optional): Timeout for the vehicle to reach desired altitude\n            vehicle_name (str, optional): Name of the vehicle to send this command to\n        Returns:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CarClient",
        "kind": 6,
        "importPath": "airsim-.client",
        "description": "airsim-.client",
        "peekOfCode": "class CarClient(VehicleClient, object):\n    def __init__(self, ip = \"\", port = 41451, timeout_value = 3600):\n        super(CarClient, self).__init__(ip, port, timeout_value)\n    def setCarControls(self, controls, vehicle_name = ''):\n        \"\"\"\n        Control the car using throttle, steering, brake, etc.\n        Args:\n            controls (CarControls): Struct containing control values\n            vehicle_name (str, optional): Name of vehicle to be controlled\n        \"\"\"",
        "detail": "airsim-.client",
        "documentation": {
            "value": "\n```python\nfrom airsim-.client import CarClient\n```\n\n```python\n\n\n```\n\n```python\nclass CarClient(VehicleClient, object):\n    def __init__(self, ip = \"\", port = 41451, timeout_value = 3600):\n        super(CarClient, self).__init__(ip, port, timeout_value)\n    def setCarControls(self, controls, vehicle_name = ''):\n        \"\"\"\n        Control the car using throttle, steering, brake, etc.\n        Args:\n            controls (CarControls): Struct containing control values\n            vehicle_name (str, optional): Name of vehicle to be controlled\n        \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "read_pfm",
        "kind": 2,
        "importPath": "airsim-.pfm",
        "description": "airsim-.pfm",
        "peekOfCode": "def read_pfm(file):\n    \"\"\" Read a pfm file \"\"\"\n    file = open(file, 'rb')\n    color = None\n    width = None\n    height = None\n    scale = None\n    endian = None\n    header = file.readline().rstrip()\n    header = str(bytes.decode(header, encoding='utf-8'))",
        "detail": "airsim-.pfm",
        "documentation": {
            "value": "\n```python\nfrom airsim-.pfm import read_pfm\n```\n\n```python\n\n\n```\n\n```python\ndef read_pfm(file):\n    \"\"\" Read a pfm file \"\"\"\n    file = open(file, 'rb')\n    color = None\n    width = None\n    height = None\n    scale = None\n    endian = None\n    header = file.readline().rstrip()\n    header = str(bytes.decode(header, encoding='utf-8'))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "write_pfm",
        "kind": 2,
        "importPath": "airsim-.pfm",
        "description": "airsim-.pfm",
        "peekOfCode": "def write_pfm(file, image, scale=1):\n    \"\"\" Write a pfm file \"\"\"\n    file = open(file, 'wb')\n    color = None\n    if image.dtype.name != 'float32':\n        raise Exception('Image dtype must be float32.')\n    if len(image.shape) == 3 and image.shape[2] == 3: # color image\n        color = True\n    elif len(image.shape) == 2 or len(image.shape) == 3 and image.shape[2] == 1: # greyscale\n        color = False",
        "detail": "airsim-.pfm",
        "documentation": {
            "value": "\n```python\nfrom airsim-.pfm import write_pfm\n```\n\n```python\n\n\n```\n\n```python\ndef write_pfm(file, image, scale=1):\n    \"\"\" Write a pfm file \"\"\"\n    file = open(file, 'wb')\n    color = None\n    if image.dtype.name != 'float32':\n        raise Exception('Image dtype must be float32.')\n    if len(image.shape) == 3 and image.shape[2] == 3: # color image\n        color = True\n    elif len(image.shape) == 2 or len(image.shape) == 3 and image.shape[2] == 1: # greyscale\n        color = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MsgpackMixin",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class MsgpackMixin:\n    def __repr__(self):\n        from pprint import pformat\n        return \"<\" + type(self).__name__ + \"> \" + pformat(vars(self), indent=4, width=1)\n    def to_msgpack(self, *args, **kwargs):\n        return self.__dict__\n    @classmethod\n    def from_msgpack(cls, encoded):\n        obj = cls()\n        #obj.__dict__ = {k.decode('utf-8'): (from_msgpack(v.__class__, v) if hasattr(v, \"__dict__\") else v) for k, v in encoded.items()}",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import MsgpackMixin\n```\n\n```python\n\n\n```\n\n```python\nclass MsgpackMixin:\n    def __repr__(self):\n        from pprint import pformat\n        return \"<\" + type(self).__name__ + \"> \" + pformat(vars(self), indent=4, width=1)\n    def to_msgpack(self, *args, **kwargs):\n        return self.__dict__\n    @classmethod\n    def from_msgpack(cls, encoded):\n        obj = cls()\n        #obj.__dict__ = {k.decode('utf-8'): (from_msgpack(v.__class__, v) if hasattr(v, \"__dict__\") else v) for k, v in encoded.items()}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ImageType",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class ImageType:\n    Scene = 0\n    DepthPlanner = 1\n    DepthPerspective = 2\n    DepthVis = 3\n    DisparityNormalized = 4\n    Segmentation = 5\n    SurfaceNormals = 6\n    Infrared = 7\nclass DrivetrainType:",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import ImageType\n```\n\n```python\n\n\n```\n\n```python\nclass ImageType:\n    Scene = 0\n    DepthPlanner = 1\n    DepthPerspective = 2\n    DepthVis = 3\n    DisparityNormalized = 4\n    Segmentation = 5\n    SurfaceNormals = 6\n    Infrared = 7\nclass DrivetrainType:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DrivetrainType",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class DrivetrainType:\n    MaxDegreeOfFreedom = 0\n    ForwardOnly = 1\nclass LandedState:\n    Landed = 0\n    Flying = 1\nclass WeatherParameter:\n    Rain = 0\n    Roadwetness = 1\n    Snow = 2",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import DrivetrainType\n```\n\n```python\n\n\n```\n\n```python\nclass DrivetrainType:\n    MaxDegreeOfFreedom = 0\n    ForwardOnly = 1\nclass LandedState:\n    Landed = 0\n    Flying = 1\nclass WeatherParameter:\n    Rain = 0\n    Roadwetness = 1\n    Snow = 2\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LandedState",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class LandedState:\n    Landed = 0\n    Flying = 1\nclass WeatherParameter:\n    Rain = 0\n    Roadwetness = 1\n    Snow = 2\n    RoadSnow = 3\n    MapleLeaf = 4\n    RoadLeaf = 5",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import LandedState\n```\n\n```python\n\n\n```\n\n```python\nclass LandedState:\n    Landed = 0\n    Flying = 1\nclass WeatherParameter:\n    Rain = 0\n    Roadwetness = 1\n    Snow = 2\n    RoadSnow = 3\n    MapleLeaf = 4\n    RoadLeaf = 5\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WeatherParameter",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class WeatherParameter:\n    Rain = 0\n    Roadwetness = 1\n    Snow = 2\n    RoadSnow = 3\n    MapleLeaf = 4\n    RoadLeaf = 5\n    Dust = 6\n    Fog = 7\n    Enabled = 8",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import WeatherParameter\n```\n\n```python\n\n\n```\n\n```python\nclass WeatherParameter:\n    Rain = 0\n    Roadwetness = 1\n    Snow = 2\n    RoadSnow = 3\n    MapleLeaf = 4\n    RoadLeaf = 5\n    Dust = 6\n    Fog = 7\n    Enabled = 8\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Vector3r",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class Vector3r(MsgpackMixin):\n    x_val = 0.0\n    y_val = 0.0\n    z_val = 0.0\n    def __init__(self, x_val = 0.0, y_val = 0.0, z_val = 0.0):\n        self.x_val = x_val\n        self.y_val = y_val\n        self.z_val = z_val\n    @staticmethod\n    def nanVector3r():",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import Vector3r\n```\n\n```python\n\n\n```\n\n```python\nclass Vector3r(MsgpackMixin):\n    x_val = 0.0\n    y_val = 0.0\n    z_val = 0.0\n    def __init__(self, x_val = 0.0, y_val = 0.0, z_val = 0.0):\n        self.x_val = x_val\n        self.y_val = y_val\n        self.z_val = z_val\n    @staticmethod\n    def nanVector3r():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Quaternionr",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class Quaternionr(MsgpackMixin):\n    w_val = 0.0\n    x_val = 0.0\n    y_val = 0.0\n    z_val = 0.0\n    def __init__(self, x_val = 0.0, y_val = 0.0, z_val = 0.0, w_val = 1.0):\n        self.x_val = x_val\n        self.y_val = y_val\n        self.z_val = z_val\n        self.w_val = w_val",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import Quaternionr\n```\n\n```python\n\n\n```\n\n```python\nclass Quaternionr(MsgpackMixin):\n    w_val = 0.0\n    x_val = 0.0\n    y_val = 0.0\n    z_val = 0.0\n    def __init__(self, x_val = 0.0, y_val = 0.0, z_val = 0.0, w_val = 1.0):\n        self.x_val = x_val\n        self.y_val = y_val\n        self.z_val = z_val\n        self.w_val = w_val\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Pose",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class Pose(MsgpackMixin):\n    position = Vector3r()\n    orientation = Quaternionr()\n    def __init__(self, position_val = None, orientation_val = None):\n        position_val = position_val if position_val != None else Vector3r()\n        orientation_val = orientation_val if orientation_val != None else Quaternionr()\n        self.position = position_val\n        self.orientation = orientation_val\n    @staticmethod\n    def nanPose():",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import Pose\n```\n\n```python\n\n\n```\n\n```python\nclass Pose(MsgpackMixin):\n    position = Vector3r()\n    orientation = Quaternionr()\n    def __init__(self, position_val = None, orientation_val = None):\n        position_val = position_val if position_val != None else Vector3r()\n        orientation_val = orientation_val if orientation_val != None else Quaternionr()\n        self.position = position_val\n        self.orientation = orientation_val\n    @staticmethod\n    def nanPose():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CollisionInfo",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class CollisionInfo(MsgpackMixin):\n    has_collided = False\n    normal = Vector3r()\n    impact_point = Vector3r()\n    position = Vector3r()\n    penetration_depth = 0.0\n    time_stamp = 0.0\n    object_name = \"\"\n    object_id = -1\nclass GeoPoint(MsgpackMixin):",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import CollisionInfo\n```\n\n```python\n\n\n```\n\n```python\nclass CollisionInfo(MsgpackMixin):\n    has_collided = False\n    normal = Vector3r()\n    impact_point = Vector3r()\n    position = Vector3r()\n    penetration_depth = 0.0\n    time_stamp = 0.0\n    object_name = \"\"\n    object_id = -1\nclass GeoPoint(MsgpackMixin):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GeoPoint",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class GeoPoint(MsgpackMixin):\n    latitude = 0.0\n    longitude = 0.0\n    altitude = 0.0\nclass YawMode(MsgpackMixin):\n    is_rate = True\n    yaw_or_rate = 0.0\n    def __init__(self, is_rate = True, yaw_or_rate = 0.0):\n        self.is_rate = is_rate\n        self.yaw_or_rate = yaw_or_rate",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import GeoPoint\n```\n\n```python\n\n\n```\n\n```python\nclass GeoPoint(MsgpackMixin):\n    latitude = 0.0\n    longitude = 0.0\n    altitude = 0.0\nclass YawMode(MsgpackMixin):\n    is_rate = True\n    yaw_or_rate = 0.0\n    def __init__(self, is_rate = True, yaw_or_rate = 0.0):\n        self.is_rate = is_rate\n        self.yaw_or_rate = yaw_or_rate\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "YawMode",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class YawMode(MsgpackMixin):\n    is_rate = True\n    yaw_or_rate = 0.0\n    def __init__(self, is_rate = True, yaw_or_rate = 0.0):\n        self.is_rate = is_rate\n        self.yaw_or_rate = yaw_or_rate\nclass RCData(MsgpackMixin):\n    timestamp = 0\n    pitch, roll, throttle, yaw = (0.0,)*4 #init 4 variable to 0.0\n    switch1, switch2, switch3, switch4 = (0,)*4",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import YawMode\n```\n\n```python\n\n\n```\n\n```python\nclass YawMode(MsgpackMixin):\n    is_rate = True\n    yaw_or_rate = 0.0\n    def __init__(self, is_rate = True, yaw_or_rate = 0.0):\n        self.is_rate = is_rate\n        self.yaw_or_rate = yaw_or_rate\nclass RCData(MsgpackMixin):\n    timestamp = 0\n    pitch, roll, throttle, yaw = (0.0,)*4 #init 4 variable to 0.0\n    switch1, switch2, switch3, switch4 = (0,)*4\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RCData",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class RCData(MsgpackMixin):\n    timestamp = 0\n    pitch, roll, throttle, yaw = (0.0,)*4 #init 4 variable to 0.0\n    switch1, switch2, switch3, switch4 = (0,)*4\n    switch5, switch6, switch7, switch8 = (0,)*4\n    is_initialized = False\n    is_valid = False\n    def __init__(self, timestamp = 0, pitch = 0.0, roll = 0.0, throttle = 0.0, yaw = 0.0, switch1 = 0,\n                 switch2 = 0, switch3 = 0, switch4 = 0, switch5 = 0, switch6 = 0, switch7 = 0, switch8 = 0, is_initialized = False, is_valid = False):\n        self.timestamp = timestamp",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import RCData\n```\n\n```python\n\n\n```\n\n```python\nclass RCData(MsgpackMixin):\n    timestamp = 0\n    pitch, roll, throttle, yaw = (0.0,)*4 #init 4 variable to 0.0\n    switch1, switch2, switch3, switch4 = (0,)*4\n    switch5, switch6, switch7, switch8 = (0,)*4\n    is_initialized = False\n    is_valid = False\n    def __init__(self, timestamp = 0, pitch = 0.0, roll = 0.0, throttle = 0.0, yaw = 0.0, switch1 = 0,\n                 switch2 = 0, switch3 = 0, switch4 = 0, switch5 = 0, switch6 = 0, switch7 = 0, switch8 = 0, is_initialized = False, is_valid = False):\n        self.timestamp = timestamp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ImageRequest",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class ImageRequest(MsgpackMixin):\n    camera_name = '0'\n    image_type = ImageType.Scene\n    pixels_as_float = False\n    compress = False\n    def __init__(self, camera_name, image_type, pixels_as_float = False, compress = True):\n        # todo: in future remove str(), it's only for compatibility to pre v1.2\n        self.camera_name = str(camera_name)\n        self.image_type = image_type\n        self.pixels_as_float = pixels_as_float",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import ImageRequest\n```\n\n```python\n\n\n```\n\n```python\nclass ImageRequest(MsgpackMixin):\n    camera_name = '0'\n    image_type = ImageType.Scene\n    pixels_as_float = False\n    compress = False\n    def __init__(self, camera_name, image_type, pixels_as_float = False, compress = True):\n        # todo: in future remove str(), it's only for compatibility to pre v1.2\n        self.camera_name = str(camera_name)\n        self.image_type = image_type\n        self.pixels_as_float = pixels_as_float\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ImageResponse",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class ImageResponse(MsgpackMixin):\n    image_data_uint8 = np.uint8(0)\n    image_data_float = 0.0\n    camera_position = Vector3r()\n    camera_orientation = Quaternionr()\n    time_stamp = np.uint64(0)\n    message = ''\n    pixels_as_float = 0.0\n    compress = True\n    width = 0",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import ImageResponse\n```\n\n```python\n\n\n```\n\n```python\nclass ImageResponse(MsgpackMixin):\n    image_data_uint8 = np.uint8(0)\n    image_data_float = 0.0\n    camera_position = Vector3r()\n    camera_orientation = Quaternionr()\n    time_stamp = np.uint64(0)\n    message = ''\n    pixels_as_float = 0.0\n    compress = True\n    width = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CarControls",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class CarControls(MsgpackMixin):\n    throttle = 0.0\n    steering = 0.0\n    brake = 0.0\n    handbrake = False\n    is_manual_gear = False\n    manual_gear = 0\n    gear_immediate = True\n    def __init__(self, throttle = 0, steering = 0, brake = 0,\n        handbrake = False, is_manual_gear = False, manual_gear = 0, gear_immediate = True):",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import CarControls\n```\n\n```python\n\n\n```\n\n```python\nclass CarControls(MsgpackMixin):\n    throttle = 0.0\n    steering = 0.0\n    brake = 0.0\n    handbrake = False\n    is_manual_gear = False\n    manual_gear = 0\n    gear_immediate = True\n    def __init__(self, throttle = 0, steering = 0, brake = 0,\n        handbrake = False, is_manual_gear = False, manual_gear = 0, gear_immediate = True):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "KinematicsState",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class KinematicsState(MsgpackMixin):\n    position = Vector3r()\n    orientation = Quaternionr()\n    linear_velocity = Vector3r()\n    angular_velocity = Vector3r()\n    linear_acceleration = Vector3r()\n    angular_acceleration = Vector3r()\nclass EnvironmentState(MsgpackMixin):\n    position = Vector3r()\n    geo_point = GeoPoint()",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import KinematicsState\n```\n\n```python\n\n\n```\n\n```python\nclass KinematicsState(MsgpackMixin):\n    position = Vector3r()\n    orientation = Quaternionr()\n    linear_velocity = Vector3r()\n    angular_velocity = Vector3r()\n    linear_acceleration = Vector3r()\n    angular_acceleration = Vector3r()\nclass EnvironmentState(MsgpackMixin):\n    position = Vector3r()\n    geo_point = GeoPoint()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EnvironmentState",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class EnvironmentState(MsgpackMixin):\n    position = Vector3r()\n    geo_point = GeoPoint()\n    gravity = Vector3r()\n    air_pressure = 0.0\n    temperature = 0.0\n    air_density = 0.0\nclass CarState(MsgpackMixin):\n    speed = 0.0\n    gear = 0",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import EnvironmentState\n```\n\n```python\n\n\n```\n\n```python\nclass EnvironmentState(MsgpackMixin):\n    position = Vector3r()\n    geo_point = GeoPoint()\n    gravity = Vector3r()\n    air_pressure = 0.0\n    temperature = 0.0\n    air_density = 0.0\nclass CarState(MsgpackMixin):\n    speed = 0.0\n    gear = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CarState",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class CarState(MsgpackMixin):\n    speed = 0.0\n    gear = 0\n    rpm = 0.0\n    maxrpm = 0.0\n    handbrake = False\n    collision = CollisionInfo()\n    kinematics_estimated = KinematicsState()\n    timestamp = np.uint64(0)\nclass MultirotorState(MsgpackMixin):",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import CarState\n```\n\n```python\n\n\n```\n\n```python\nclass CarState(MsgpackMixin):\n    speed = 0.0\n    gear = 0\n    rpm = 0.0\n    maxrpm = 0.0\n    handbrake = False\n    collision = CollisionInfo()\n    kinematics_estimated = KinematicsState()\n    timestamp = np.uint64(0)\nclass MultirotorState(MsgpackMixin):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultirotorState",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class MultirotorState(MsgpackMixin):\n    collision = CollisionInfo()\n    kinematics_estimated = KinematicsState()\n    gps_location = GeoPoint()\n    timestamp = np.uint64(0)\n    landed_state = LandedState.Landed\n    rc_data = RCData()\n    ready = False\n    ready_message = \"\"\n    can_arm = False",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import MultirotorState\n```\n\n```python\n\n\n```\n\n```python\nclass MultirotorState(MsgpackMixin):\n    collision = CollisionInfo()\n    kinematics_estimated = KinematicsState()\n    gps_location = GeoPoint()\n    timestamp = np.uint64(0)\n    landed_state = LandedState.Landed\n    rc_data = RCData()\n    ready = False\n    ready_message = \"\"\n    can_arm = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ProjectionMatrix",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class ProjectionMatrix(MsgpackMixin):\n    matrix = []\nclass CameraInfo(MsgpackMixin):\n    pose = Pose()\n    fov = -1\n    proj_mat = ProjectionMatrix()\nclass LidarData(MsgpackMixin):\n    point_cloud = 0.0\n    time_stamp = np.uint64(0)\n    pose = Pose()",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import ProjectionMatrix\n```\n\n```python\n\n\n```\n\n```python\nclass ProjectionMatrix(MsgpackMixin):\n    matrix = []\nclass CameraInfo(MsgpackMixin):\n    pose = Pose()\n    fov = -1\n    proj_mat = ProjectionMatrix()\nclass LidarData(MsgpackMixin):\n    point_cloud = 0.0\n    time_stamp = np.uint64(0)\n    pose = Pose()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CameraInfo",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class CameraInfo(MsgpackMixin):\n    pose = Pose()\n    fov = -1\n    proj_mat = ProjectionMatrix()\nclass LidarData(MsgpackMixin):\n    point_cloud = 0.0\n    time_stamp = np.uint64(0)\n    pose = Pose()\nclass ImuData(MsgpackMixin):\n    time_stamp = np.uint64(0)",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import CameraInfo\n```\n\n```python\n\n\n```\n\n```python\nclass CameraInfo(MsgpackMixin):\n    pose = Pose()\n    fov = -1\n    proj_mat = ProjectionMatrix()\nclass LidarData(MsgpackMixin):\n    point_cloud = 0.0\n    time_stamp = np.uint64(0)\n    pose = Pose()\nclass ImuData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LidarData",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class LidarData(MsgpackMixin):\n    point_cloud = 0.0\n    time_stamp = np.uint64(0)\n    pose = Pose()\nclass ImuData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    orientation = Quaternionr()\n    angular_velocity = Vector3r()\n    linear_acceleration = Vector3r()\nclass BarometerData(MsgpackMixin):",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import LidarData\n```\n\n```python\n\n\n```\n\n```python\nclass LidarData(MsgpackMixin):\n    point_cloud = 0.0\n    time_stamp = np.uint64(0)\n    pose = Pose()\nclass ImuData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    orientation = Quaternionr()\n    angular_velocity = Vector3r()\n    linear_acceleration = Vector3r()\nclass BarometerData(MsgpackMixin):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ImuData",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class ImuData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    orientation = Quaternionr()\n    angular_velocity = Vector3r()\n    linear_acceleration = Vector3r()\nclass BarometerData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    altitude = Quaternionr()\n    pressure = Vector3r()\n    qnh = Vector3r()",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import ImuData\n```\n\n```python\n\n\n```\n\n```python\nclass ImuData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    orientation = Quaternionr()\n    angular_velocity = Vector3r()\n    linear_acceleration = Vector3r()\nclass BarometerData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    altitude = Quaternionr()\n    pressure = Vector3r()\n    qnh = Vector3r()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BarometerData",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class BarometerData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    altitude = Quaternionr()\n    pressure = Vector3r()\n    qnh = Vector3r()\nclass MagnetometerData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    magnetic_field_body = Vector3r()\n    magnetic_field_covariance = 0.0\nclass GnssFixType(MsgpackMixin):",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import BarometerData\n```\n\n```python\n\n\n```\n\n```python\nclass BarometerData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    altitude = Quaternionr()\n    pressure = Vector3r()\n    qnh = Vector3r()\nclass MagnetometerData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    magnetic_field_body = Vector3r()\n    magnetic_field_covariance = 0.0\nclass GnssFixType(MsgpackMixin):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MagnetometerData",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class MagnetometerData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    magnetic_field_body = Vector3r()\n    magnetic_field_covariance = 0.0\nclass GnssFixType(MsgpackMixin):\n    GNSS_FIX_NO_FIX = 0\n    GNSS_FIX_TIME_ONLY = 1\n    GNSS_FIX_2D_FIX = 2\n    GNSS_FIX_3D_FIX = 3\nclass GnssReport(MsgpackMixin):",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import MagnetometerData\n```\n\n```python\n\n\n```\n\n```python\nclass MagnetometerData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    magnetic_field_body = Vector3r()\n    magnetic_field_covariance = 0.0\nclass GnssFixType(MsgpackMixin):\n    GNSS_FIX_NO_FIX = 0\n    GNSS_FIX_TIME_ONLY = 1\n    GNSS_FIX_2D_FIX = 2\n    GNSS_FIX_3D_FIX = 3\nclass GnssReport(MsgpackMixin):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GnssFixType",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class GnssFixType(MsgpackMixin):\n    GNSS_FIX_NO_FIX = 0\n    GNSS_FIX_TIME_ONLY = 1\n    GNSS_FIX_2D_FIX = 2\n    GNSS_FIX_3D_FIX = 3\nclass GnssReport(MsgpackMixin):\n    geo_point = GeoPoint()\n    eph = 0.0\n    epv = 0.0\n    velocity = Vector3r()",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import GnssFixType\n```\n\n```python\n\n\n```\n\n```python\nclass GnssFixType(MsgpackMixin):\n    GNSS_FIX_NO_FIX = 0\n    GNSS_FIX_TIME_ONLY = 1\n    GNSS_FIX_2D_FIX = 2\n    GNSS_FIX_3D_FIX = 3\nclass GnssReport(MsgpackMixin):\n    geo_point = GeoPoint()\n    eph = 0.0\n    epv = 0.0\n    velocity = Vector3r()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GnssReport",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class GnssReport(MsgpackMixin):\n    geo_point = GeoPoint()\n    eph = 0.0\n    epv = 0.0\n    velocity = Vector3r()\n    fix_type = GnssFixType()\n    time_utc = np.uint64(0)\nclass GpsData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    gnss = GnssReport()",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import GnssReport\n```\n\n```python\n\n\n```\n\n```python\nclass GnssReport(MsgpackMixin):\n    geo_point = GeoPoint()\n    eph = 0.0\n    epv = 0.0\n    velocity = Vector3r()\n    fix_type = GnssFixType()\n    time_utc = np.uint64(0)\nclass GpsData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    gnss = GnssReport()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GpsData",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class GpsData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    gnss = GnssReport()\n    is_valid = False\nclass DistanceSensorData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    distance = 0.0\n    min_distance = 0.0\n    max_distance = 0.0\n    relative_pose = Pose()",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import GpsData\n```\n\n```python\n\n\n```\n\n```python\nclass GpsData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    gnss = GnssReport()\n    is_valid = False\nclass DistanceSensorData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    distance = 0.0\n    min_distance = 0.0\n    max_distance = 0.0\n    relative_pose = Pose()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DistanceSensorData",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class DistanceSensorData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    distance = 0.0\n    min_distance = 0.0\n    max_distance = 0.0\n    relative_pose = Pose()\nclass PIDGains():\n    \"\"\"\n    Struct to store values of PID gains. Used to transmit controller gain values while instantiating\n    AngleLevel/AngleRate/Velocity/PositionControllerGains objects.",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import DistanceSensorData\n```\n\n```python\n\n\n```\n\n```python\nclass DistanceSensorData(MsgpackMixin):\n    time_stamp = np.uint64(0)\n    distance = 0.0\n    min_distance = 0.0\n    max_distance = 0.0\n    relative_pose = Pose()\nclass PIDGains():\n    \"\"\"\n    Struct to store values of PID gains. Used to transmit controller gain values while instantiating\n    AngleLevel/AngleRate/Velocity/PositionControllerGains objects.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PIDGains",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class PIDGains():\n    \"\"\"\n    Struct to store values of PID gains. Used to transmit controller gain values while instantiating\n    AngleLevel/AngleRate/Velocity/PositionControllerGains objects.\n    Attributes:\n        kP (float): Proportional gain\n        kI (float): Integrator gain\n        kD (float): Derivative gain\n    \"\"\"\n    def __init__(self, kp, ki, kd):",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import PIDGains\n```\n\n```python\n\n\n```\n\n```python\nclass PIDGains():\n    \"\"\"\n    Struct to store values of PID gains. Used to transmit controller gain values while instantiating\n    AngleLevel/AngleRate/Velocity/PositionControllerGains objects.\n    Attributes:\n        kP (float): Proportional gain\n        kI (float): Integrator gain\n        kD (float): Derivative gain\n    \"\"\"\n    def __init__(self, kp, ki, kd):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AngleRateControllerGains",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class AngleRateControllerGains():\n    \"\"\"\n    Struct to contain controller gains used by angle level PID controller\n    Attributes:\n        roll_gains (PIDGains): kP, kI, kD for roll axis\n        pitch_gains (PIDGains): kP, kI, kD for pitch axis\n        yaw_gains (PIDGains): kP, kI, kD for yaw axis\n    \"\"\"\n    def __init__(self, roll_gains = PIDGains(0.25, 0, 0),\n                       pitch_gains = PIDGains(0.25, 0, 0),",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import AngleRateControllerGains\n```\n\n```python\n\n\n```\n\n```python\nclass AngleRateControllerGains():\n    \"\"\"\n    Struct to contain controller gains used by angle level PID controller\n    Attributes:\n        roll_gains (PIDGains): kP, kI, kD for roll axis\n        pitch_gains (PIDGains): kP, kI, kD for pitch axis\n        yaw_gains (PIDGains): kP, kI, kD for yaw axis\n    \"\"\"\n    def __init__(self, roll_gains = PIDGains(0.25, 0, 0),\n                       pitch_gains = PIDGains(0.25, 0, 0),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AngleLevelControllerGains",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class AngleLevelControllerGains():\n    \"\"\"\n    Struct to contain controller gains used by angle rate PID controller\n    Attributes:\n        roll_gains (PIDGains): kP, kI, kD for roll axis\n        pitch_gains (PIDGains): kP, kI, kD for pitch axis\n        yaw_gains (PIDGains): kP, kI, kD for yaw axis\n    \"\"\"\n    def __init__(self, roll_gains = PIDGains(2.5, 0, 0),\n                       pitch_gains = PIDGains(2.5, 0, 0),",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import AngleLevelControllerGains\n```\n\n```python\n\n\n```\n\n```python\nclass AngleLevelControllerGains():\n    \"\"\"\n    Struct to contain controller gains used by angle rate PID controller\n    Attributes:\n        roll_gains (PIDGains): kP, kI, kD for roll axis\n        pitch_gains (PIDGains): kP, kI, kD for pitch axis\n        yaw_gains (PIDGains): kP, kI, kD for yaw axis\n    \"\"\"\n    def __init__(self, roll_gains = PIDGains(2.5, 0, 0),\n                       pitch_gains = PIDGains(2.5, 0, 0),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "VelocityControllerGains",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class VelocityControllerGains():\n    \"\"\"\n    Struct to contain controller gains used by velocity PID controller\n    Attributes:\n        x_gains (PIDGains): kP, kI, kD for X axis\n        y_gains (PIDGains): kP, kI, kD for Y axis\n        z_gains (PIDGains): kP, kI, kD for Z axis\n    \"\"\"\n    def __init__(self, x_gains = PIDGains(0.2, 0, 0),\n                       y_gains = PIDGains(0.2, 0, 0),",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import VelocityControllerGains\n```\n\n```python\n\n\n```\n\n```python\nclass VelocityControllerGains():\n    \"\"\"\n    Struct to contain controller gains used by velocity PID controller\n    Attributes:\n        x_gains (PIDGains): kP, kI, kD for X axis\n        y_gains (PIDGains): kP, kI, kD for Y axis\n        z_gains (PIDGains): kP, kI, kD for Z axis\n    \"\"\"\n    def __init__(self, x_gains = PIDGains(0.2, 0, 0),\n                       y_gains = PIDGains(0.2, 0, 0),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PositionControllerGains",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class PositionControllerGains():\n    \"\"\"\n    Struct to contain controller gains used by position PID controller\n    Attributes:\n        x_gains (PIDGains): kP, kI, kD for X axis\n        y_gains (PIDGains): kP, kI, kD for Y axis\n        z_gains (PIDGains): kP, kI, kD for Z axis\n    \"\"\"\n    def __init__(self, x_gains = PIDGains(0.25, 0, 0),\n                       y_gains = PIDGains(0.25, 0, 0),",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import PositionControllerGains\n```\n\n```python\n\n\n```\n\n```python\nclass PositionControllerGains():\n    \"\"\"\n    Struct to contain controller gains used by position PID controller\n    Attributes:\n        x_gains (PIDGains): kP, kI, kD for X axis\n        y_gains (PIDGains): kP, kI, kD for Y axis\n        z_gains (PIDGains): kP, kI, kD for Z axis\n    \"\"\"\n    def __init__(self, x_gains = PIDGains(0.25, 0, 0),\n                       y_gains = PIDGains(0.25, 0, 0),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MeshPositionVertexBuffersResponse",
        "kind": 6,
        "importPath": "airsim-.types",
        "description": "airsim-.types",
        "peekOfCode": "class MeshPositionVertexBuffersResponse(MsgpackMixin):\n    position = Vector3r()\n    orientation = Quaternionr()\n    vertices = 0.0\n    indices = 0.0\n    name = ''",
        "detail": "airsim-.types",
        "documentation": {
            "value": "\n```python\nfrom airsim-.types import MeshPositionVertexBuffersResponse\n```\n\n```python\n\n\n```\n\n```python\nclass MeshPositionVertexBuffersResponse(MsgpackMixin):\n    position = Vector3r()\n    orientation = Quaternionr()\n    vertices = 0.0\n    indices = 0.0\n    name = ''\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "string_to_uint8_array",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def string_to_uint8_array(bstr):\n    return np.fromstring(bstr, np.uint8)\ndef string_to_float_array(bstr):\n    return np.fromstring(bstr, np.float32)\ndef list_to_2d_float_array(flst, width, height):\n    return np.reshape(np.asarray(flst, np.float32), (height, width))\ndef get_pfm_array(response):\n    return list_to_2d_float_array(response.image_data_float, response.width, response.height)\ndef get_public_fields(obj):\n    return [attr for attr in dir(obj)",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import string_to_uint8_array\n```\n\n```python\n\n\n```\n\n```python\ndef string_to_uint8_array(bstr):\n    return np.fromstring(bstr, np.uint8)\ndef string_to_float_array(bstr):\n    return np.fromstring(bstr, np.float32)\ndef list_to_2d_float_array(flst, width, height):\n    return np.reshape(np.asarray(flst, np.float32), (height, width))\ndef get_pfm_array(response):\n    return list_to_2d_float_array(response.image_data_float, response.width, response.height)\ndef get_public_fields(obj):\n    return [attr for attr in dir(obj)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "string_to_float_array",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def string_to_float_array(bstr):\n    return np.fromstring(bstr, np.float32)\ndef list_to_2d_float_array(flst, width, height):\n    return np.reshape(np.asarray(flst, np.float32), (height, width))\ndef get_pfm_array(response):\n    return list_to_2d_float_array(response.image_data_float, response.width, response.height)\ndef get_public_fields(obj):\n    return [attr for attr in dir(obj)\n                            if not (attr.startswith(\"_\") \n                            or inspect.isbuiltin(attr)",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import string_to_float_array\n```\n\n```python\n\n\n```\n\n```python\ndef string_to_float_array(bstr):\n    return np.fromstring(bstr, np.float32)\ndef list_to_2d_float_array(flst, width, height):\n    return np.reshape(np.asarray(flst, np.float32), (height, width))\ndef get_pfm_array(response):\n    return list_to_2d_float_array(response.image_data_float, response.width, response.height)\ndef get_public_fields(obj):\n    return [attr for attr in dir(obj)\n                            if not (attr.startswith(\"_\") \n                            or inspect.isbuiltin(attr)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "list_to_2d_float_array",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def list_to_2d_float_array(flst, width, height):\n    return np.reshape(np.asarray(flst, np.float32), (height, width))\ndef get_pfm_array(response):\n    return list_to_2d_float_array(response.image_data_float, response.width, response.height)\ndef get_public_fields(obj):\n    return [attr for attr in dir(obj)\n                            if not (attr.startswith(\"_\") \n                            or inspect.isbuiltin(attr)\n                            or inspect.isfunction(attr)\n                            or inspect.ismethod(attr))]",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import list_to_2d_float_array\n```\n\n```python\n\n\n```\n\n```python\ndef list_to_2d_float_array(flst, width, height):\n    return np.reshape(np.asarray(flst, np.float32), (height, width))\ndef get_pfm_array(response):\n    return list_to_2d_float_array(response.image_data_float, response.width, response.height)\ndef get_public_fields(obj):\n    return [attr for attr in dir(obj)\n                            if not (attr.startswith(\"_\") \n                            or inspect.isbuiltin(attr)\n                            or inspect.isfunction(attr)\n                            or inspect.ismethod(attr))]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_pfm_array",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def get_pfm_array(response):\n    return list_to_2d_float_array(response.image_data_float, response.width, response.height)\ndef get_public_fields(obj):\n    return [attr for attr in dir(obj)\n                            if not (attr.startswith(\"_\") \n                            or inspect.isbuiltin(attr)\n                            or inspect.isfunction(attr)\n                            or inspect.ismethod(attr))]\ndef to_dict(obj):\n    return dict([attr, getattr(obj, attr)] for attr in get_public_fields(obj))",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import get_pfm_array\n```\n\n```python\n\n\n```\n\n```python\ndef get_pfm_array(response):\n    return list_to_2d_float_array(response.image_data_float, response.width, response.height)\ndef get_public_fields(obj):\n    return [attr for attr in dir(obj)\n                            if not (attr.startswith(\"_\") \n                            or inspect.isbuiltin(attr)\n                            or inspect.isfunction(attr)\n                            or inspect.ismethod(attr))]\ndef to_dict(obj):\n    return dict([attr, getattr(obj, attr)] for attr in get_public_fields(obj))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_public_fields",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def get_public_fields(obj):\n    return [attr for attr in dir(obj)\n                            if not (attr.startswith(\"_\") \n                            or inspect.isbuiltin(attr)\n                            or inspect.isfunction(attr)\n                            or inspect.ismethod(attr))]\ndef to_dict(obj):\n    return dict([attr, getattr(obj, attr)] for attr in get_public_fields(obj))\ndef to_str(obj):\n    return str(to_dict(obj))",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import get_public_fields\n```\n\n```python\n\n\n```\n\n```python\ndef get_public_fields(obj):\n    return [attr for attr in dir(obj)\n                            if not (attr.startswith(\"_\") \n                            or inspect.isbuiltin(attr)\n                            or inspect.isfunction(attr)\n                            or inspect.ismethod(attr))]\ndef to_dict(obj):\n    return dict([attr, getattr(obj, attr)] for attr in get_public_fields(obj))\ndef to_str(obj):\n    return str(to_dict(obj))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "to_dict",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def to_dict(obj):\n    return dict([attr, getattr(obj, attr)] for attr in get_public_fields(obj))\ndef to_str(obj):\n    return str(to_dict(obj))\ndef write_file(filename, bstr):\n    \"\"\"\n    Write binary data to file.\n    Used for writing compressed PNG images\n    \"\"\"\n    with open(filename, 'wb') as afile:",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import to_dict\n```\n\n```python\n\n\n```\n\n```python\ndef to_dict(obj):\n    return dict([attr, getattr(obj, attr)] for attr in get_public_fields(obj))\ndef to_str(obj):\n    return str(to_dict(obj))\ndef write_file(filename, bstr):\n    \"\"\"\n    Write binary data to file.\n    Used for writing compressed PNG images\n    \"\"\"\n    with open(filename, 'wb') as afile:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "to_str",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def to_str(obj):\n    return str(to_dict(obj))\ndef write_file(filename, bstr):\n    \"\"\"\n    Write binary data to file.\n    Used for writing compressed PNG images\n    \"\"\"\n    with open(filename, 'wb') as afile:\n        afile.write(bstr)\n# helper method for converting getOrientation to roll/pitch/yaw",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import to_str\n```\n\n```python\n\n\n```\n\n```python\ndef to_str(obj):\n    return str(to_dict(obj))\ndef write_file(filename, bstr):\n    \"\"\"\n    Write binary data to file.\n    Used for writing compressed PNG images\n    \"\"\"\n    with open(filename, 'wb') as afile:\n        afile.write(bstr)\n# helper method for converting getOrientation to roll/pitch/yaw\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "write_file",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def write_file(filename, bstr):\n    \"\"\"\n    Write binary data to file.\n    Used for writing compressed PNG images\n    \"\"\"\n    with open(filename, 'wb') as afile:\n        afile.write(bstr)\n# helper method for converting getOrientation to roll/pitch/yaw\n# https:#en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles\ndef to_eularian_angles(q):",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import write_file\n```\n\n```python\n\n\n```\n\n```python\ndef write_file(filename, bstr):\n    \"\"\"\n    Write binary data to file.\n    Used for writing compressed PNG images\n    \"\"\"\n    with open(filename, 'wb') as afile:\n        afile.write(bstr)\n# helper method for converting getOrientation to roll/pitch/yaw\n# https:#en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles\ndef to_eularian_angles(q):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "to_eularian_angles",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def to_eularian_angles(q):\n    z = q.z_val\n    y = q.y_val\n    x = q.x_val\n    w = q.w_val\n    ysqr = y * y\n    # roll (x-axis rotation)\n    t0 = +2.0 * (w*x + y*z)\n    t1 = +1.0 - 2.0*(x*x + ysqr)\n    roll = math.atan2(t0, t1)",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import to_eularian_angles\n```\n\n```python\n\n\n```\n\n```python\ndef to_eularian_angles(q):\n    z = q.z_val\n    y = q.y_val\n    x = q.x_val\n    w = q.w_val\n    ysqr = y * y\n    # roll (x-axis rotation)\n    t0 = +2.0 * (w*x + y*z)\n    t1 = +1.0 - 2.0*(x*x + ysqr)\n    roll = math.atan2(t0, t1)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "to_quaternion",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def to_quaternion(pitch, roll, yaw):\n    t0 = math.cos(yaw * 0.5)\n    t1 = math.sin(yaw * 0.5)\n    t2 = math.cos(roll * 0.5)\n    t3 = math.sin(roll * 0.5)\n    t4 = math.cos(pitch * 0.5)\n    t5 = math.sin(pitch * 0.5)\n    q = Quaternionr()\n    q.w_val = t0 * t2 * t4 + t1 * t3 * t5 #w\n    q.x_val = t0 * t3 * t4 - t1 * t2 * t5 #x",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import to_quaternion\n```\n\n```python\n\n\n```\n\n```python\ndef to_quaternion(pitch, roll, yaw):\n    t0 = math.cos(yaw * 0.5)\n    t1 = math.sin(yaw * 0.5)\n    t2 = math.cos(roll * 0.5)\n    t3 = math.sin(roll * 0.5)\n    t4 = math.cos(pitch * 0.5)\n    t5 = math.sin(pitch * 0.5)\n    q = Quaternionr()\n    q.w_val = t0 * t2 * t4 + t1 * t3 * t5 #w\n    q.x_val = t0 * t3 * t4 - t1 * t2 * t5 #x\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "wait_key",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def wait_key(message = ''):\n    ''' Wait for a key press on the console and return it. '''\n    if message != '':\n        print (message)\n    result = None\n    if os.name == 'nt':\n        import msvcrt\n        result = msvcrt.getch()\n    else:\n        import termios",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import wait_key\n```\n\n```python\n\n\n```\n\n```python\ndef wait_key(message = ''):\n    ''' Wait for a key press on the console and return it. '''\n    if message != '':\n        print (message)\n    result = None\n    if os.name == 'nt':\n        import msvcrt\n        result = msvcrt.getch()\n    else:\n        import termios\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "read_pfm",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def read_pfm(file):\n    \"\"\" Read a pfm file \"\"\"\n    file = open(file, 'rb')\n    color = None\n    width = None\n    height = None\n    scale = None\n    endian = None\n    header = file.readline().rstrip()\n    header = str(bytes.decode(header, encoding='utf-8'))",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import read_pfm\n```\n\n```python\n\n\n```\n\n```python\ndef read_pfm(file):\n    \"\"\" Read a pfm file \"\"\"\n    file = open(file, 'rb')\n    color = None\n    width = None\n    height = None\n    scale = None\n    endian = None\n    header = file.readline().rstrip()\n    header = str(bytes.decode(header, encoding='utf-8'))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "write_pfm",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def write_pfm(file, image, scale=1):\n    \"\"\" Write a pfm file \"\"\"\n    file = open(file, 'wb')\n    color = None\n    if image.dtype.name != 'float32':\n        raise Exception('Image dtype must be float32.')\n    if len(image.shape) == 3 and image.shape[2] == 3: # color image\n        color = True\n    elif len(image.shape) == 2 or len(image.shape) == 3 and image.shape[2] == 1: # grayscale\n        color = False",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import write_pfm\n```\n\n```python\n\n\n```\n\n```python\ndef write_pfm(file, image, scale=1):\n    \"\"\" Write a pfm file \"\"\"\n    file = open(file, 'wb')\n    color = None\n    if image.dtype.name != 'float32':\n        raise Exception('Image dtype must be float32.')\n    if len(image.shape) == 3 and image.shape[2] == 3: # color image\n        color = True\n    elif len(image.shape) == 2 or len(image.shape) == 3 and image.shape[2] == 1: # grayscale\n        color = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "write_png",
        "kind": 2,
        "importPath": "airsim-.utils",
        "description": "airsim-.utils",
        "peekOfCode": "def write_png(filename, image):\n    \"\"\" image must be numpy array H X W X channels\n    \"\"\"\n    ret = cv2.imwrite(filename, image)\n    if not ret:\n        logging.error(f\"Writing PNG file {filename} failed\")",
        "detail": "airsim-.utils",
        "documentation": {
            "value": "\n```python\nfrom airsim-.utils import write_png\n```\n\n```python\n\n\n```\n\n```python\ndef write_png(filename, image):\n    \"\"\" image must be numpy array H X W X channels\n    \"\"\"\n    ret = cv2.imwrite(filename, image)\n    if not ret:\n        logging.error(f\"Writing PNG file {filename} failed\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AirSimGeoClient",
        "kind": 6,
        "importPath": "airsimgeo.__init__",
        "description": "airsimgeo.__init__",
        "peekOfCode": "class AirSimGeoClient(MultirotorClient):\n    def __init__(self, srid, origin, **kwargs):\n        \"\"\"AirSim client that understands arbitrary projection systems\n        Assumes that the simulation environment (unreal) is in the coordinate system specified\n        by the srid but offset by the origin specified.\n        Arguments:\n            srid {str} -- EPSG SRID string. Example \"EPSG:3857\"\n            origin {list} -- [Longitude, Latitude, Height]\n            kwargs -- Any keyword arguments forwared to AirSim\n        \"\"\"",
        "detail": "airsimgeo.__init__",
        "documentation": {
            "value": "\n```python\nfrom airsimgeo.__init__ import AirSimGeoClient\n```\n\n```python\n\n\n```\n\n```python\nclass AirSimGeoClient(MultirotorClient):\n    def __init__(self, srid, origin, **kwargs):\n        \"\"\"AirSim client that understands arbitrary projection systems\n        Assumes that the simulation environment (unreal) is in the coordinate system specified\n        by the srid but offset by the origin specified.\n        Arguments:\n            srid {str} -- EPSG SRID string. Example \"EPSG:3857\"\n            origin {list} -- [Longitude, Latitude, Height]\n            kwargs -- Any keyword arguments forwared to AirSim\n        \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultiAgentActionSpace",
        "kind": 6,
        "importPath": "gym_airsim.envs.gymUtils.action_space",
        "description": "gym_airsim.envs.gymUtils.action_space",
        "peekOfCode": "class MultiAgentActionSpace(list):\n    def __init__(self, agents_action_space):\n        for x in agents_action_space:\n            assert isinstance(x, gym.spaces.space.Space)\n        super(MultiAgentActionSpace, self).__init__(agents_action_space)\n        self._agents_action_space = agents_action_space\n    def sample(self):\n        \"\"\" samples action for each agent from uniform distribution\"\"\"\n        return [agent_action_space.sample() for agent_action_space in self._agents_action_space]",
        "detail": "gym_airsim.envs.gymUtils.action_space",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.gymUtils.action_space import MultiAgentActionSpace\n```\n\n```python\n\n\n```\n\n```python\nclass MultiAgentActionSpace(list):\n    def __init__(self, agents_action_space):\n        for x in agents_action_space:\n            assert isinstance(x, gym.spaces.space.Space)\n        super(MultiAgentActionSpace, self).__init__(agents_action_space)\n        self._agents_action_space = agents_action_space\n    def sample(self):\n        \"\"\" samples action for each agent from uniform distribution\"\"\"\n        return [agent_action_space.sample() for agent_action_space in self._agents_action_space]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_cell_sizes",
        "kind": 2,
        "importPath": "gym_airsim.envs.gymUtils.draw",
        "description": "gym_airsim.envs.gymUtils.draw",
        "peekOfCode": "def get_cell_sizes(cell_size: Union[int, list, tuple]):\n    \"\"\"Handle multiple type options of `cell_size`.\n    In order to keep the old API of following functions, as well as add\n    support for non-square grids we need to check cell_size type and\n    extend it appropriately.\n    Args:\n        cell_size: integer of tuple/list size of two with cell size \n            in horizontal and vertical direction.\n    Returns:\n        Horizontal and vertical cell size.",
        "detail": "gym_airsim.envs.gymUtils.draw",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.gymUtils.draw import get_cell_sizes\n```\n\n```python\n\n\n```\n\n```python\ndef get_cell_sizes(cell_size: Union[int, list, tuple]):\n    \"\"\"Handle multiple type options of `cell_size`.\n    In order to keep the old API of following functions, as well as add\n    support for non-square grids we need to check cell_size type and\n    extend it appropriately.\n    Args:\n        cell_size: integer of tuple/list size of two with cell size \n            in horizontal and vertical direction.\n    Returns:\n        Horizontal and vertical cell size.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "draw_grid",
        "kind": 2,
        "importPath": "gym_airsim.envs.gymUtils.draw",
        "description": "gym_airsim.envs.gymUtils.draw",
        "peekOfCode": "def draw_grid(rows, cols, cell_size=50, fill='black', line_color='black'):\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n    width = cols * cell_size_x\n    height = rows * cell_size_y\n    image = Image.new(mode='RGB', size=(width, height), color=fill)\n    # Draw some lines\n    draw = ImageDraw.Draw(image)\n    y_start = 0\n    y_end = image.height\n    for x in range(0, image.width, cell_size_x):",
        "detail": "gym_airsim.envs.gymUtils.draw",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.gymUtils.draw import draw_grid\n```\n\n```python\n\n\n```\n\n```python\ndef draw_grid(rows, cols, cell_size=50, fill='black', line_color='black'):\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n    width = cols * cell_size_x\n    height = rows * cell_size_y\n    image = Image.new(mode='RGB', size=(width, height), color=fill)\n    # Draw some lines\n    draw = ImageDraw.Draw(image)\n    y_start = 0\n    y_end = image.height\n    for x in range(0, image.width, cell_size_x):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fill_cell",
        "kind": 2,
        "importPath": "gym_airsim.envs.gymUtils.draw",
        "description": "gym_airsim.envs.gymUtils.draw",
        "peekOfCode": "def fill_cell(image, pos, cell_size=None, fill='black', margin=0):\n    assert cell_size is not None and 0 <= margin <= 1\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n    col, row = pos\n    row, col = row * cell_size_x, col * cell_size_y\n    margin_x, margin_y = margin * cell_size_x, margin * cell_size_y\n    x, y, x_dash, y_dash = row + margin_x, col + margin_y, row + cell_size_x - margin_x, col + cell_size_y - margin_y\n    ImageDraw.Draw(image).rectangle([(x, y), (x_dash, y_dash)], fill=fill)\ndef write_cell_text(image, text, pos, cell_size=None, fill='black', margin=0):\n    assert cell_size is not None and 0 <= margin <= 1",
        "detail": "gym_airsim.envs.gymUtils.draw",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.gymUtils.draw import fill_cell\n```\n\n```python\n\n\n```\n\n```python\ndef fill_cell(image, pos, cell_size=None, fill='black', margin=0):\n    assert cell_size is not None and 0 <= margin <= 1\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n    col, row = pos\n    row, col = row * cell_size_x, col * cell_size_y\n    margin_x, margin_y = margin * cell_size_x, margin * cell_size_y\n    x, y, x_dash, y_dash = row + margin_x, col + margin_y, row + cell_size_x - margin_x, col + cell_size_y - margin_y\n    ImageDraw.Draw(image).rectangle([(x, y), (x_dash, y_dash)], fill=fill)\ndef write_cell_text(image, text, pos, cell_size=None, fill='black', margin=0):\n    assert cell_size is not None and 0 <= margin <= 1\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "write_cell_text",
        "kind": 2,
        "importPath": "gym_airsim.envs.gymUtils.draw",
        "description": "gym_airsim.envs.gymUtils.draw",
        "peekOfCode": "def write_cell_text(image, text, pos, cell_size=None, fill='black', margin=0):\n    assert cell_size is not None and 0 <= margin <= 1\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n    col, row = pos\n    row, col = row * cell_size_x, col * cell_size_y\n    margin_x, margin_y = margin * cell_size_x, margin * cell_size_y\n    x, y = row + margin_x, col + margin_y\n    ImageDraw.Draw(image).text((x, y), text=text, fill=fill)\ndef draw_cell_outline(image, pos, cell_size=50, fill='black'):\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)",
        "detail": "gym_airsim.envs.gymUtils.draw",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.gymUtils.draw import write_cell_text\n```\n\n```python\n\n\n```\n\n```python\ndef write_cell_text(image, text, pos, cell_size=None, fill='black', margin=0):\n    assert cell_size is not None and 0 <= margin <= 1\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n    col, row = pos\n    row, col = row * cell_size_x, col * cell_size_y\n    margin_x, margin_y = margin * cell_size_x, margin * cell_size_y\n    x, y = row + margin_x, col + margin_y\n    ImageDraw.Draw(image).text((x, y), text=text, fill=fill)\ndef draw_cell_outline(image, pos, cell_size=50, fill='black'):\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "draw_cell_outline",
        "kind": 2,
        "importPath": "gym_airsim.envs.gymUtils.draw",
        "description": "gym_airsim.envs.gymUtils.draw",
        "peekOfCode": "def draw_cell_outline(image, pos, cell_size=50, fill='black'):\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n    col, row = pos\n    row, col = row * cell_size_x, col * cell_size_y\n    ImageDraw.Draw(image).rectangle([(row, col), (row + cell_size_x, col + cell_size_y)], outline=fill, width=3)\ndef draw_circle(image, pos, cell_size=50, fill='black', radius=0.3):\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n    col, row = pos\n    row, col = row * cell_size_x, col * cell_size_y\n    gap_x, gap_y = cell_size_x * radius, cell_size_y * radius",
        "detail": "gym_airsim.envs.gymUtils.draw",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.gymUtils.draw import draw_cell_outline\n```\n\n```python\n\n\n```\n\n```python\ndef draw_cell_outline(image, pos, cell_size=50, fill='black'):\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n    col, row = pos\n    row, col = row * cell_size_x, col * cell_size_y\n    ImageDraw.Draw(image).rectangle([(row, col), (row + cell_size_x, col + cell_size_y)], outline=fill, width=3)\ndef draw_circle(image, pos, cell_size=50, fill='black', radius=0.3):\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n    col, row = pos\n    row, col = row * cell_size_x, col * cell_size_y\n    gap_x, gap_y = cell_size_x * radius, cell_size_y * radius\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "draw_circle",
        "kind": 2,
        "importPath": "gym_airsim.envs.gymUtils.draw",
        "description": "gym_airsim.envs.gymUtils.draw",
        "peekOfCode": "def draw_circle(image, pos, cell_size=50, fill='black', radius=0.3):\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n    col, row = pos\n    row, col = row * cell_size_x, col * cell_size_y\n    gap_x, gap_y = cell_size_x * radius, cell_size_y * radius\n    x, y = row + gap_x, col + gap_y\n    x_dash, y_dash = row + cell_size_x - gap_x, col + cell_size_y - gap_y\n    ImageDraw.Draw(image).ellipse([(x, y), (x_dash, y_dash)], outline=fill, fill=fill)\ndef draw_border(image, border_width=1, fill='black'):\n    width, height = image.size",
        "detail": "gym_airsim.envs.gymUtils.draw",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.gymUtils.draw import draw_circle\n```\n\n```python\n\n\n```\n\n```python\ndef draw_circle(image, pos, cell_size=50, fill='black', radius=0.3):\n    cell_size_x, cell_size_y = get_cell_sizes(cell_size)\n    col, row = pos\n    row, col = row * cell_size_x, col * cell_size_y\n    gap_x, gap_y = cell_size_x * radius, cell_size_y * radius\n    x, y = row + gap_x, col + gap_y\n    x_dash, y_dash = row + cell_size_x - gap_x, col + cell_size_y - gap_y\n    ImageDraw.Draw(image).ellipse([(x, y), (x_dash, y_dash)], outline=fill, fill=fill)\ndef draw_border(image, border_width=1, fill='black'):\n    width, height = image.size\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "draw_border",
        "kind": 2,
        "importPath": "gym_airsim.envs.gymUtils.draw",
        "description": "gym_airsim.envs.gymUtils.draw",
        "peekOfCode": "def draw_border(image, border_width=1, fill='black'):\n    width, height = image.size\n    new_im = Image.new(\"RGB\", size=(width + 2 * border_width, height + 2 * border_width), color=fill)\n    new_im.paste(image, (border_width, border_width))\n    return new_im\ndef draw_score_board(image, score, board_height=30):\n    im_width, im_height = image.size\n    new_im = Image.new(\"RGB\", size=(im_width, im_height + board_height), color='#e1e4e8')\n    new_im.paste(image, (0, board_height))\n    _text = ', '.join([str(round(x, 2)) for x in score])",
        "detail": "gym_airsim.envs.gymUtils.draw",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.gymUtils.draw import draw_border\n```\n\n```python\n\n\n```\n\n```python\ndef draw_border(image, border_width=1, fill='black'):\n    width, height = image.size\n    new_im = Image.new(\"RGB\", size=(width + 2 * border_width, height + 2 * border_width), color=fill)\n    new_im.paste(image, (border_width, border_width))\n    return new_im\ndef draw_score_board(image, score, board_height=30):\n    im_width, im_height = image.size\n    new_im = Image.new(\"RGB\", size=(im_width, im_height + board_height), color='#e1e4e8')\n    new_im.paste(image, (0, board_height))\n    _text = ', '.join([str(round(x, 2)) for x in score])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "draw_score_board",
        "kind": 2,
        "importPath": "gym_airsim.envs.gymUtils.draw",
        "description": "gym_airsim.envs.gymUtils.draw",
        "peekOfCode": "def draw_score_board(image, score, board_height=30):\n    im_width, im_height = image.size\n    new_im = Image.new(\"RGB\", size=(im_width, im_height + board_height), color='#e1e4e8')\n    new_im.paste(image, (0, board_height))\n    _text = ', '.join([str(round(x, 2)) for x in score])\n    ImageDraw.Draw(new_im).text((10, board_height // 3), text=_text, fill='black')\n    return new_im",
        "detail": "gym_airsim.envs.gymUtils.draw",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.gymUtils.draw import draw_score_board\n```\n\n```python\n\n\n```\n\n```python\ndef draw_score_board(image, score, board_height=30):\n    im_width, im_height = image.size\n    new_im = Image.new(\"RGB\", size=(im_width, im_height + board_height), color='#e1e4e8')\n    new_im.paste(image, (0, board_height))\n    _text = ', '.join([str(round(x, 2)) for x in score])\n    ImageDraw.Draw(new_im).text((10, board_height // 3), text=_text, fill='black')\n    return new_im\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultiAgentObservationSpace",
        "kind": 6,
        "importPath": "gym_airsim.envs.gymUtils.observation_space",
        "description": "gym_airsim.envs.gymUtils.observation_space",
        "peekOfCode": "class MultiAgentObservationSpace(list):\n    def __init__(self, agents_observation_space):\n        for x in agents_observation_space:\n            assert isinstance(x, gym.spaces.space.Space)\n        super().__init__(agents_observation_space)\n        self._agents_observation_space = agents_observation_space\n    def sample(self):\n        \"\"\" samples observations for each agent from uniform distribution\"\"\"\n        return [agent_observation_space.sample() for agent_observation_space in self._agents_observation_space]\n    def contains(self, obs):",
        "detail": "gym_airsim.envs.gymUtils.observation_space",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.gymUtils.observation_space import MultiAgentObservationSpace\n```\n\n```python\n\n\n```\n\n```python\nclass MultiAgentObservationSpace(list):\n    def __init__(self, agents_observation_space):\n        for x in agents_observation_space:\n            assert isinstance(x, gym.spaces.space.Space)\n        super().__init__(agents_observation_space)\n        self._agents_observation_space = agents_observation_space\n    def sample(self):\n        \"\"\" samples observations for each agent from uniform distribution\"\"\"\n        return [agent_observation_space.sample() for agent_observation_space in self._agents_observation_space]\n    def contains(self, obs):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultiAgentActionSpace",
        "kind": 6,
        "importPath": "gym_airsim.envs.airSimEnv",
        "description": "gym_airsim.envs.airSimEnv",
        "peekOfCode": "class MultiAgentActionSpace(list):\n    def __init__(self, agents_action_space):\n        for x in agents_action_space:\n            assert isinstance(x, gym.spaces.space.Space)\n        super(MultiAgentActionSpace, self).__init__(agents_action_space)\n        self._agents_action_space = agents_action_space\n    def sample(self):\n        \"\"\" samples action for each agent from uniform distribution\"\"\"\n        return [agent_action_space.sample() for agent_action_space in self._agents_action_space]\nclass AirSimEnv(gym.Env):",
        "detail": "gym_airsim.envs.airSimEnv",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.airSimEnv import MultiAgentActionSpace\n```\n\n```python\n\n\n```\n\n```python\nclass MultiAgentActionSpace(list):\n    def __init__(self, agents_action_space):\n        for x in agents_action_space:\n            assert isinstance(x, gym.spaces.space.Space)\n        super(MultiAgentActionSpace, self).__init__(agents_action_space)\n        self._agents_action_space = agents_action_space\n    def sample(self):\n        \"\"\" samples action for each agent from uniform distribution\"\"\"\n        return [agent_action_space.sample() for agent_action_space in self._agents_action_space]\nclass AirSimEnv(gym.Env):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AirSimEnv",
        "kind": 6,
        "importPath": "gym_airsim.envs.airSimEnv",
        "description": "gym_airsim.envs.airSimEnv",
        "peekOfCode": "class AirSimEnv(gym.Env):\n    def __init__(self,n_agents = 3,n_actions = 3, step_cost = -1):\n        self.n_agents = n_agents\n        # left depth, center depth, right depth, yaw\n        self.observation_space = spaces.Box(low=0, high=255, shape=(30, 100))\n        self.states = [np.zeros((30, 100), dtype=np.uint8) for _ in range(n_agents)] \n        self.n_actions = n_actions\n        self.action_space = MultiAgentActionSpace([spaces.Discrete(n_actions) for _ in range(n_agents)])\n        self.agent_names = [v for v in utils.g_airsim_settings[\"Vehicles\"] ]\n        self.episodeN = 0",
        "detail": "gym_airsim.envs.airSimEnv",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.airSimEnv import AirSimEnv\n```\n\n```python\n\n\n```\n\n```python\nclass AirSimEnv(gym.Env):\n    def __init__(self,n_agents = 3,n_actions = 3, step_cost = -1):\n        self.n_agents = n_agents\n        # left depth, center depth, right depth, yaw\n        self.observation_space = spaces.Box(low=0, high=255, shape=(30, 100))\n        self.states = [np.zeros((30, 100), dtype=np.uint8) for _ in range(n_agents)] \n        self.n_actions = n_actions\n        self.action_space = MultiAgentActionSpace([spaces.Discrete(n_actions) for _ in range(n_agents)])\n        self.agent_names = [v for v in utils.g_airsim_settings[\"Vehicles\"] ]\n        self.episodeN = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gym_airsim.envs.airSimEnv",
        "description": "gym_airsim.envs.airSimEnv",
        "peekOfCode": "logger = logging.getLogger(__name__)\nimport utils\nimport sys\nimport concurrent.futures\n# print = main.logger.info\n# All coords\n# this format -> (lon,lat,height)\nclass MultiAgentActionSpace(list):\n    def __init__(self, agents_action_space):\n        for x in agents_action_space:",
        "detail": "gym_airsim.envs.airSimEnv",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.airSimEnv import logger\n```\n\n```python\n\n\n```\n\n```python\nlogger = logging.getLogger(__name__)\nimport utils\nimport sys\nimport concurrent.futures\n# print = main.logger.info\n# All coords\n# this format -> (lon,lat,height)\nclass MultiAgentActionSpace(list):\n    def __init__(self, agents_action_space):\n        for x in agents_action_space:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultiAgentActionSpace",
        "kind": 6,
        "importPath": "gym_airsim.envs.collectEnv",
        "description": "gym_airsim.envs.collectEnv",
        "peekOfCode": "class MultiAgentActionSpace(list):\n    def __init__(self, agents_action_space):\n        for x in agents_action_space:\n            assert isinstance(x, gym.spaces.space.Space)\n        super(MultiAgentActionSpace, self).__init__(agents_action_space)\n        self._agents_action_space = agents_action_space\n    def sample(self):\n        \"\"\" samples action for each agent from uniform distribution\"\"\"\n        return [agent_action_space.sample() for agent_action_space in self._agents_action_space]\nclass ServiceExit(Exception):",
        "detail": "gym_airsim.envs.collectEnv",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.collectEnv import MultiAgentActionSpace\n```\n\n```python\n\n\n```\n\n```python\nclass MultiAgentActionSpace(list):\n    def __init__(self, agents_action_space):\n        for x in agents_action_space:\n            assert isinstance(x, gym.spaces.space.Space)\n        super(MultiAgentActionSpace, self).__init__(agents_action_space)\n        self._agents_action_space = agents_action_space\n    def sample(self):\n        \"\"\" samples action for each agent from uniform distribution\"\"\"\n        return [agent_action_space.sample() for agent_action_space in self._agents_action_space]\nclass ServiceExit(Exception):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ServiceExit",
        "kind": 6,
        "importPath": "gym_airsim.envs.collectEnv",
        "description": "gym_airsim.envs.collectEnv",
        "peekOfCode": "class ServiceExit(Exception):\n    \"\"\"\n    Custom exception which is used to trigger the clean exit\n    of all running threads and the main program.\n    \"\"\"\n    pass\ndef service_shutdown(signum, frame):\n    print('Caught signal %d' % signum)\n    raise ServiceExit\nclass CollectEnv(gym.Env):",
        "detail": "gym_airsim.envs.collectEnv",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.collectEnv import ServiceExit\n```\n\n```python\n\n\n```\n\n```python\nclass ServiceExit(Exception):\n    \"\"\"\n    Custom exception which is used to trigger the clean exit\n    of all running threads and the main program.\n    \"\"\"\n    pass\ndef service_shutdown(signum, frame):\n    print('Caught signal %d' % signum)\n    raise ServiceExit\nclass CollectEnv(gym.Env):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CollectEnv",
        "kind": 6,
        "importPath": "gym_airsim.envs.collectEnv",
        "description": "gym_airsim.envs.collectEnv",
        "peekOfCode": "class CollectEnv(gym.Env):\n    \"\"\"\n    Environment in which the agents have to collect the balls\n    \"\"\"\n    ACTION = [\"LEFT\",\"FRONT\",\"RIGHT\",\"BACK\",]\n    def __init__(\n        self,\n        trajColFlag,\n        size=10,\n        width=None,",
        "detail": "gym_airsim.envs.collectEnv",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.collectEnv import CollectEnv\n```\n\n```python\n\n\n```\n\n```python\nclass CollectEnv(gym.Env):\n    \"\"\"\n    Environment in which the agents have to collect the balls\n    \"\"\"\n    ACTION = [\"LEFT\",\"FRONT\",\"RIGHT\",\"BACK\",]\n    def __init__(\n        self,\n        trajColFlag,\n        size=10,\n        width=None,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "service_shutdown",
        "kind": 2,
        "importPath": "gym_airsim.envs.collectEnv",
        "description": "gym_airsim.envs.collectEnv",
        "peekOfCode": "def service_shutdown(signum, frame):\n    print('Caught signal %d' % signum)\n    raise ServiceExit\nclass CollectEnv(gym.Env):\n    \"\"\"\n    Environment in which the agents have to collect the balls\n    \"\"\"\n    ACTION = [\"LEFT\",\"FRONT\",\"RIGHT\",\"BACK\",]\n    def __init__(\n        self,",
        "detail": "gym_airsim.envs.collectEnv",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.collectEnv import service_shutdown\n```\n\n```python\n\n\n```\n\n```python\ndef service_shutdown(signum, frame):\n    print('Caught signal %d' % signum)\n    raise ServiceExit\nclass CollectEnv(gym.Env):\n    \"\"\"\n    Environment in which the agents have to collect the balls\n    \"\"\"\n    ACTION = [\"LEFT\",\"FRONT\",\"RIGHT\",\"BACK\",]\n    def __init__(\n        self,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MultiAgentActionSpace",
        "kind": 6,
        "importPath": "gym_airsim.envs.collectMTEnv",
        "description": "gym_airsim.envs.collectMTEnv",
        "peekOfCode": "class MultiAgentActionSpace(list):\n    def __init__(self, agents_action_space):\n        for x in agents_action_space:\n            assert isinstance(x, gym.spaces.space.Space)\n        super(MultiAgentActionSpace, self).__init__(agents_action_space)\n        self._agents_action_space = agents_action_space\n    def sample(self):\n        \"\"\" samples action for each agent from uniform distribution\"\"\"\n        return [agent_action_space.sample() for agent_action_space in self._agents_action_space]\nclass Job(threading.Thread):",
        "detail": "gym_airsim.envs.collectMTEnv",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.collectMTEnv import MultiAgentActionSpace\n```\n\n```python\n\n\n```\n\n```python\nclass MultiAgentActionSpace(list):\n    def __init__(self, agents_action_space):\n        for x in agents_action_space:\n            assert isinstance(x, gym.spaces.space.Space)\n        super(MultiAgentActionSpace, self).__init__(agents_action_space)\n        self._agents_action_space = agents_action_space\n    def sample(self):\n        \"\"\" samples action for each agent from uniform distribution\"\"\"\n        return [agent_action_space.sample() for agent_action_space in self._agents_action_space]\nclass Job(threading.Thread):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "gym_airsim.envs.collectMTEnv",
        "description": "gym_airsim.envs.collectMTEnv",
        "peekOfCode": "class Job(threading.Thread):\n    def __init__(self,timer = 0.5,callback = None, **kwargs):\n        threading.Thread.__init__(self)\n        self.callback = callback\n        self.timer = timer\n        self.args_dict = kwargs\n        # The shutdown_flag is a threading.Event object that\n        # indicates whether the thread should be terminated.\n        self.shutdown_flag = threading.Event()\n        # ... Other thread setup code here ...",
        "detail": "gym_airsim.envs.collectMTEnv",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.collectMTEnv import Job\n```\n\n```python\n\n\n```\n\n```python\nclass Job(threading.Thread):\n    def __init__(self,timer = 0.5,callback = None, **kwargs):\n        threading.Thread.__init__(self)\n        self.callback = callback\n        self.timer = timer\n        self.args_dict = kwargs\n        # The shutdown_flag is a threading.Event object that\n        # indicates whether the thread should be terminated.\n        self.shutdown_flag = threading.Event()\n        # ... Other thread setup code here ...\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ServiceExit",
        "kind": 6,
        "importPath": "gym_airsim.envs.collectMTEnv",
        "description": "gym_airsim.envs.collectMTEnv",
        "peekOfCode": "class ServiceExit(Exception):\n    \"\"\"\n    Custom exception which is used to trigger the clean exit\n    of all running threads and the main program.\n    \"\"\"\n    pass\ndef service_shutdown(signum, frame):\n    print('Caught signal %d' % signum)\n    raise ServiceExit\nclass CollectMTEnv(gym.Env):",
        "detail": "gym_airsim.envs.collectMTEnv",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.collectMTEnv import ServiceExit\n```\n\n```python\n\n\n```\n\n```python\nclass ServiceExit(Exception):\n    \"\"\"\n    Custom exception which is used to trigger the clean exit\n    of all running threads and the main program.\n    \"\"\"\n    pass\ndef service_shutdown(signum, frame):\n    print('Caught signal %d' % signum)\n    raise ServiceExit\nclass CollectMTEnv(gym.Env):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CollectMTEnv",
        "kind": 6,
        "importPath": "gym_airsim.envs.collectMTEnv",
        "description": "gym_airsim.envs.collectMTEnv",
        "peekOfCode": "class CollectMTEnv(gym.Env):\n    \"\"\"\n    Environment in which the agents have to collect the balls\n    \"\"\"\n    def __init__(\n        self,\n        trajColFlag,\n        size=10,\n        width=None,\n        height=None,",
        "detail": "gym_airsim.envs.collectMTEnv",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.collectMTEnv import CollectMTEnv\n```\n\n```python\n\n\n```\n\n```python\nclass CollectMTEnv(gym.Env):\n    \"\"\"\n    Environment in which the agents have to collect the balls\n    \"\"\"\n    def __init__(\n        self,\n        trajColFlag,\n        size=10,\n        width=None,\n        height=None,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "service_shutdown",
        "kind": 2,
        "importPath": "gym_airsim.envs.collectMTEnv",
        "description": "gym_airsim.envs.collectMTEnv",
        "peekOfCode": "def service_shutdown(signum, frame):\n    print('Caught signal %d' % signum)\n    raise ServiceExit\nclass CollectMTEnv(gym.Env):\n    \"\"\"\n    Environment in which the agents have to collect the balls\n    \"\"\"\n    def __init__(\n        self,\n        trajColFlag,",
        "detail": "gym_airsim.envs.collectMTEnv",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.collectMTEnv import service_shutdown\n```\n\n```python\n\n\n```\n\n```python\ndef service_shutdown(signum, frame):\n    print('Caught signal %d' % signum)\n    raise ServiceExit\nclass CollectMTEnv(gym.Env):\n    \"\"\"\n    Environment in which the agents have to collect the balls\n    \"\"\"\n    def __init__(\n        self,\n        trajColFlag,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Target",
        "kind": 6,
        "importPath": "gym_airsim.envs.Target",
        "description": "gym_airsim.envs.Target",
        "peekOfCode": "class Target:\n    def __init__(self,id,lat,lon,z=0):\n        self.id = id\n        self.name = \"Target_\" + str(id)\n        self.lat = lat \n        self.lon = lon\n        self.z = z\n        self.x_val , self.y_val , self.z_val  = utils.lonlatToAirSim(lon,lat,z,\n                                # utils.env_cfg.o_x,utils.env_cfg.o_y,utils.env_cfg.o_z)\n                                    0,0,0)",
        "detail": "gym_airsim.envs.Target",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.Target import Target\n```\n\n```python\n\n\n```\n\n```python\nclass Target:\n    def __init__(self,id,lat,lon,z=0):\n        self.id = id\n        self.name = \"Target_\" + str(id)\n        self.lat = lat \n        self.lon = lon\n        self.z = z\n        self.x_val , self.y_val , self.z_val  = utils.lonlatToAirSim(lon,lat,z,\n                                # utils.env_cfg.o_x,utils.env_cfg.o_y,utils.env_cfg.o_z)\n                                    0,0,0)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TargetManager",
        "kind": 6,
        "importPath": "gym_airsim.envs.Target",
        "description": "gym_airsim.envs.Target",
        "peekOfCode": "class TargetManager:\n    def __init__(self, n_targets):\n        self.targets = {}\n        self.num_targets = n_targets\n        self.ts_allocated = {}\n        self.ts_unallocated = {}\n        self.resetTargets()\n    def getGPSCoo(self,i):\n        if i == 0:\n            return 12.459601163864138, 41.902277040963696",
        "detail": "gym_airsim.envs.Target",
        "documentation": {
            "value": "\n```python\nfrom gym_airsim.envs.Target import TargetManager\n```\n\n```python\n\n\n```\n\n```python\nclass TargetManager:\n    def __init__(self, n_targets):\n        self.targets = {}\n        self.num_targets = n_targets\n        self.ts_allocated = {}\n        self.ts_unallocated = {}\n        self.resetTargets()\n    def getGPSCoo(self,i):\n        if i == 0:\n            return 12.459601163864138, 41.902277040963696\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnv",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnv(gym.Env):\n    metadata = {\n        \"render.modes\": [\"human\", \"rgb_array\"],\n    }\n    ACTION = [\"N\",\"S\", \"E\", \"W\"]\n    def __init__(self, maze_file=None, maze_size=None, mode=None, enable_render=True,do_track_trajectories=False,num_goals = 1):\n        self.viewer = None\n        self.enable_render = enable_render\n        self.num_goals = num_goals\n        if maze_file:",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_env import MazeEnv\n```\n\n```python\n\n\n```\n\n```python\nclass MazeEnv(gym.Env):\n    metadata = {\n        \"render.modes\": [\"human\", \"rgb_array\"],\n    }\n    ACTION = [\"N\",\"S\", \"E\", \"W\"]\n    def __init__(self, maze_file=None, maze_size=None, mode=None, enable_render=True,do_track_trajectories=False,num_goals = 1):\n        self.viewer = None\n        self.enable_render = enable_render\n        self.num_goals = num_goals\n        if maze_file:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnvSample5x5",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnvSample5x5(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample5x5, self).__init__(maze_file=\"maze2d_5x5.npy\", enable_render=enable_render)\nclass MazeEnvRandom5x5(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom5x5, self).__init__(maze_size=(5, 5), enable_render=enable_render)\nclass MazeEnvSample10x10(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample10x10, self).__init__(maze_file=\"maze2d_10x10.npy\", enable_render=enable_render)\nclass MazeEnvRandom10x10(MazeEnv):",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_env import MazeEnvSample5x5\n```\n\n```python\n\n\n```\n\n```python\nclass MazeEnvSample5x5(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample5x5, self).__init__(maze_file=\"maze2d_5x5.npy\", enable_render=enable_render)\nclass MazeEnvRandom5x5(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom5x5, self).__init__(maze_size=(5, 5), enable_render=enable_render)\nclass MazeEnvSample10x10(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample10x10, self).__init__(maze_file=\"maze2d_10x10.npy\", enable_render=enable_render)\nclass MazeEnvRandom10x10(MazeEnv):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnvRandom5x5",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnvRandom5x5(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom5x5, self).__init__(maze_size=(5, 5), enable_render=enable_render)\nclass MazeEnvSample10x10(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample10x10, self).__init__(maze_file=\"maze2d_10x10.npy\", enable_render=enable_render)\nclass MazeEnvRandom10x10(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom10x10, self).__init__(maze_size=(10, 10), enable_render=enable_render)\nclass MazeEnvSample3x3(MazeEnv):",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_env import MazeEnvRandom5x5\n```\n\n```python\n\n\n```\n\n```python\nclass MazeEnvRandom5x5(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom5x5, self).__init__(maze_size=(5, 5), enable_render=enable_render)\nclass MazeEnvSample10x10(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample10x10, self).__init__(maze_file=\"maze2d_10x10.npy\", enable_render=enable_render)\nclass MazeEnvRandom10x10(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom10x10, self).__init__(maze_size=(10, 10), enable_render=enable_render)\nclass MazeEnvSample3x3(MazeEnv):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnvSample10x10",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnvSample10x10(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample10x10, self).__init__(maze_file=\"maze2d_10x10.npy\", enable_render=enable_render)\nclass MazeEnvRandom10x10(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom10x10, self).__init__(maze_size=(10, 10), enable_render=enable_render)\nclass MazeEnvSample3x3(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample3x3, self).__init__(maze_file=\"maze2d_3x3.npy\", enable_render=enable_render)\nclass MazeEnvRandom3x3(MazeEnv):",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_env import MazeEnvSample10x10\n```\n\n```python\n\n\n```\n\n```python\nclass MazeEnvSample10x10(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample10x10, self).__init__(maze_file=\"maze2d_10x10.npy\", enable_render=enable_render)\nclass MazeEnvRandom10x10(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom10x10, self).__init__(maze_size=(10, 10), enable_render=enable_render)\nclass MazeEnvSample3x3(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample3x3, self).__init__(maze_file=\"maze2d_3x3.npy\", enable_render=enable_render)\nclass MazeEnvRandom3x3(MazeEnv):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnvRandom10x10",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnvRandom10x10(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom10x10, self).__init__(maze_size=(10, 10), enable_render=enable_render)\nclass MazeEnvSample3x3(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample3x3, self).__init__(maze_file=\"maze2d_3x3.npy\", enable_render=enable_render)\nclass MazeEnvRandom3x3(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom3x3, self).__init__(maze_size=(3, 3), enable_render=enable_render)\nclass MazeEnvSample100x100(MazeEnv):",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_env import MazeEnvRandom10x10\n```\n\n```python\n\n\n```\n\n```python\nclass MazeEnvRandom10x10(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom10x10, self).__init__(maze_size=(10, 10), enable_render=enable_render)\nclass MazeEnvSample3x3(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample3x3, self).__init__(maze_file=\"maze2d_3x3.npy\", enable_render=enable_render)\nclass MazeEnvRandom3x3(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom3x3, self).__init__(maze_size=(3, 3), enable_render=enable_render)\nclass MazeEnvSample100x100(MazeEnv):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnvSample3x3",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnvSample3x3(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample3x3, self).__init__(maze_file=\"maze2d_3x3.npy\", enable_render=enable_render)\nclass MazeEnvRandom3x3(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom3x3, self).__init__(maze_size=(3, 3), enable_render=enable_render)\nclass MazeEnvSample100x100(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample100x100, self).__init__(maze_file=\"maze2d_100x100.npy\", enable_render=enable_render)\nclass MazeEnvRandom100x100(MazeEnv):",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_env import MazeEnvSample3x3\n```\n\n```python\n\n\n```\n\n```python\nclass MazeEnvSample3x3(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample3x3, self).__init__(maze_file=\"maze2d_3x3.npy\", enable_render=enable_render)\nclass MazeEnvRandom3x3(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom3x3, self).__init__(maze_size=(3, 3), enable_render=enable_render)\nclass MazeEnvSample100x100(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample100x100, self).__init__(maze_file=\"maze2d_100x100.npy\", enable_render=enable_render)\nclass MazeEnvRandom100x100(MazeEnv):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnvRandom3x3",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnvRandom3x3(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom3x3, self).__init__(maze_size=(3, 3), enable_render=enable_render)\nclass MazeEnvSample100x100(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample100x100, self).__init__(maze_file=\"maze2d_100x100.npy\", enable_render=enable_render)\nclass MazeEnvRandom100x100(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom100x100, self).__init__(maze_size=(100, 100), enable_render=enable_render)\nclass MazeEnvRandom10x10Plus(MazeEnv):",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_env import MazeEnvRandom3x3\n```\n\n```python\n\n\n```\n\n```python\nclass MazeEnvRandom3x3(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom3x3, self).__init__(maze_size=(3, 3), enable_render=enable_render)\nclass MazeEnvSample100x100(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample100x100, self).__init__(maze_file=\"maze2d_100x100.npy\", enable_render=enable_render)\nclass MazeEnvRandom100x100(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom100x100, self).__init__(maze_size=(100, 100), enable_render=enable_render)\nclass MazeEnvRandom10x10Plus(MazeEnv):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnvSample100x100",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnvSample100x100(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample100x100, self).__init__(maze_file=\"maze2d_100x100.npy\", enable_render=enable_render)\nclass MazeEnvRandom100x100(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom100x100, self).__init__(maze_size=(100, 100), enable_render=enable_render)\nclass MazeEnvRandom10x10Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom10x10Plus, self).__init__(maze_size=(10, 10), mode=\"plus\", enable_render=enable_render)\nclass MazeEnvRandom20x20Plus(MazeEnv):",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_env import MazeEnvSample100x100\n```\n\n```python\n\n\n```\n\n```python\nclass MazeEnvSample100x100(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvSample100x100, self).__init__(maze_file=\"maze2d_100x100.npy\", enable_render=enable_render)\nclass MazeEnvRandom100x100(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom100x100, self).__init__(maze_size=(100, 100), enable_render=enable_render)\nclass MazeEnvRandom10x10Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom10x10Plus, self).__init__(maze_size=(10, 10), mode=\"plus\", enable_render=enable_render)\nclass MazeEnvRandom20x20Plus(MazeEnv):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnvRandom100x100",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnvRandom100x100(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom100x100, self).__init__(maze_size=(100, 100), enable_render=enable_render)\nclass MazeEnvRandom10x10Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom10x10Plus, self).__init__(maze_size=(10, 10), mode=\"plus\", enable_render=enable_render)\nclass MazeEnvRandom20x20Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom20x20Plus, self).__init__(maze_size=(20, 20), mode=\"plus\", enable_render=enable_render)\nclass MazeEnvRandom30x30Plus(MazeEnv):",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_env import MazeEnvRandom100x100\n```\n\n```python\n\n\n```\n\n```python\nclass MazeEnvRandom100x100(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom100x100, self).__init__(maze_size=(100, 100), enable_render=enable_render)\nclass MazeEnvRandom10x10Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom10x10Plus, self).__init__(maze_size=(10, 10), mode=\"plus\", enable_render=enable_render)\nclass MazeEnvRandom20x20Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom20x20Plus, self).__init__(maze_size=(20, 20), mode=\"plus\", enable_render=enable_render)\nclass MazeEnvRandom30x30Plus(MazeEnv):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnvRandom10x10Plus",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnvRandom10x10Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom10x10Plus, self).__init__(maze_size=(10, 10), mode=\"plus\", enable_render=enable_render)\nclass MazeEnvRandom20x20Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom20x20Plus, self).__init__(maze_size=(20, 20), mode=\"plus\", enable_render=enable_render)\nclass MazeEnvRandom30x30Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom30x30Plus, self).__init__(maze_size=(30, 30), mode=\"plus\", enable_render=enable_render)\nif __name__ == \"__main__\" :",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_env import MazeEnvRandom10x10Plus\n```\n\n```python\n\n\n```\n\n```python\nclass MazeEnvRandom10x10Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom10x10Plus, self).__init__(maze_size=(10, 10), mode=\"plus\", enable_render=enable_render)\nclass MazeEnvRandom20x20Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom20x20Plus, self).__init__(maze_size=(20, 20), mode=\"plus\", enable_render=enable_render)\nclass MazeEnvRandom30x30Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom30x30Plus, self).__init__(maze_size=(30, 30), mode=\"plus\", enable_render=enable_render)\nif __name__ == \"__main__\" :\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnvRandom20x20Plus",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnvRandom20x20Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom20x20Plus, self).__init__(maze_size=(20, 20), mode=\"plus\", enable_render=enable_render)\nclass MazeEnvRandom30x30Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom30x30Plus, self).__init__(maze_size=(30, 30), mode=\"plus\", enable_render=enable_render)\nif __name__ == \"__main__\" :\n    env = MazeEnv( maze_file = \"maze_samples/maze2d_001.npy\",                  \n            # maze_file=\"maze\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M') ),\n                                        # maze_size=(640, 640), ",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_env import MazeEnvRandom20x20Plus\n```\n\n```python\n\n\n```\n\n```python\nclass MazeEnvRandom20x20Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom20x20Plus, self).__init__(maze_size=(20, 20), mode=\"plus\", enable_render=enable_render)\nclass MazeEnvRandom30x30Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom30x30Plus, self).__init__(maze_size=(30, 30), mode=\"plus\", enable_render=enable_render)\nif __name__ == \"__main__\" :\n    env = MazeEnv( maze_file = \"maze_samples/maze2d_001.npy\",                  \n            # maze_file=\"maze\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M') ),\n                                        # maze_size=(640, 640), \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeEnvRandom30x30Plus",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_env",
        "description": "gym_maze.envs.maze_env",
        "peekOfCode": "class MazeEnvRandom30x30Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom30x30Plus, self).__init__(maze_size=(30, 30), mode=\"plus\", enable_render=enable_render)\nif __name__ == \"__main__\" :\n    env = MazeEnv( maze_file = \"maze_samples/maze2d_001.npy\",                  \n            # maze_file=\"maze\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M') ),\n                                        # maze_size=(640, 640), \n                                        enable_render=True)\n    env.render()\n    import time",
        "detail": "gym_maze.envs.maze_env",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_env import MazeEnvRandom30x30Plus\n```\n\n```python\n\n\n```\n\n```python\nclass MazeEnvRandom30x30Plus(MazeEnv):\n    def __init__(self, enable_render=True):\n        super(MazeEnvRandom30x30Plus, self).__init__(maze_size=(30, 30), mode=\"plus\", enable_render=enable_render)\nif __name__ == \"__main__\" :\n    env = MazeEnv( maze_file = \"maze_samples/maze2d_001.npy\",                  \n            # maze_file=\"maze\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M') ),\n                                        # maze_size=(640, 640), \n                                        enable_render=True)\n    env.render()\n    import time\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MazeView2D",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_view_2d",
        "description": "gym_maze.envs.maze_view_2d",
        "peekOfCode": "class MazeView2D:\n    def __init__(self, maze_name=\"Maze2D\", maze_file_path=None,\n                 maze_size=(30, 30), screen_size=(600, 600),\n                 has_loops=False, num_portals=0, enable_render=True,num_goals = 1):\n        if(num_goals<=0 ):\n            raise ValueError(\"Error in num_goals parameter\")\n        self.num_goals = num_goals\n        # PyGame configurations\n        pygame.init()\n        pygame.display.set_caption(maze_name)",
        "detail": "gym_maze.envs.maze_view_2d",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_view_2d import MazeView2D\n```\n\n```python\n\n\n```\n\n```python\nclass MazeView2D:\n    def __init__(self, maze_name=\"Maze2D\", maze_file_path=None,\n                 maze_size=(30, 30), screen_size=(600, 600),\n                 has_loops=False, num_portals=0, enable_render=True,num_goals = 1):\n        if(num_goals<=0 ):\n            raise ValueError(\"Error in num_goals parameter\")\n        self.num_goals = num_goals\n        # PyGame configurations\n        pygame.init()\n        pygame.display.set_caption(maze_name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Maze",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_view_2d",
        "description": "gym_maze.envs.maze_view_2d",
        "peekOfCode": "class Maze:\n    COMPASS = {\n        \"N\": (0, -1),\n        \"E\": (1, 0),\n        \"S\": (0, 1),\n        \"W\": (-1, 0)\n    }\n    def __init__(self, maze_cells=None, maze_size=(10,10), has_loops=True, num_portals=0):\n        # maze member variables\n        self.maze_cells = maze_cells",
        "detail": "gym_maze.envs.maze_view_2d",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_view_2d import Maze\n```\n\n```python\n\n\n```\n\n```python\nclass Maze:\n    COMPASS = {\n        \"N\": (0, -1),\n        \"E\": (1, 0),\n        \"S\": (0, 1),\n        \"W\": (-1, 0)\n    }\n    def __init__(self, maze_cells=None, maze_size=(10,10), has_loops=True, num_portals=0):\n        # maze member variables\n        self.maze_cells = maze_cells\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Portal",
        "kind": 6,
        "importPath": "gym_maze.envs.maze_view_2d",
        "description": "gym_maze.envs.maze_view_2d",
        "peekOfCode": "class Portal:\n    def __init__(self, *locations):\n        self.__locations = []\n        for location in locations:\n            if isinstance(location, (tuple, list)):\n                self.__locations.append(tuple(location))\n            else:\n                raise ValueError(\"location must be a list or a tuple.\")\n    def teleport(self, cell):\n        if cell in self.locations:",
        "detail": "gym_maze.envs.maze_view_2d",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.maze_view_2d import Portal\n```\n\n```python\n\n\n```\n\n```python\nclass Portal:\n    def __init__(self, *locations):\n        self.__locations = []\n        for location in locations:\n            if isinstance(location, (tuple, list)):\n                self.__locations.append(tuple(location))\n            else:\n                raise ValueError(\"location must be a list or a tuple.\")\n    def teleport(self, cell):\n        if cell in self.locations:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "actions_to_value",
        "kind": 2,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "def actions_to_value(actions = None):\n    value = 0x0\n    if not actions:\n        return value \n    if \"N\" in actions:\n        value |= 0x1\n    if \"E\" in actions:\n        value |= 0x2\n    if \"S\" in actions:\n        value |= 0x4",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import actions_to_value\n```\n\n```python\n\n\n```\n\n```python\ndef actions_to_value(actions = None):\n    value = 0x0\n    if not actions:\n        return value \n    if \"N\" in actions:\n        value |= 0x1\n    if \"E\" in actions:\n        value |= 0x2\n    if \"S\" in actions:\n        value |= 0x4\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "add_action",
        "kind": 2,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "def add_action(value,action):\n    if \"N\" in action:\n        value |= 0x1\n    if \"E\" in action:\n        value |= 0x2\n    if \"S\" in action:\n        value |= 0x4\n    if \"W\" in action:\n        value |= 0x8\n    return value",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import add_action\n```\n\n```python\n\n\n```\n\n```python\ndef add_action(value,action):\n    if \"N\" in action:\n        value |= 0x1\n    if \"E\" in action:\n        value |= 0x2\n    if \"S\" in action:\n        value |= 0x4\n    if \"W\" in action:\n        value |= 0x8\n    return value\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "remove_action",
        "kind": 2,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "def remove_action(value,action):\n    if \"N\" in action:\n        value &= ~ 0x1\n    if \"E\" in action:\n        value &= ~ 0x2\n    if \"S\" in action:\n        value &= ~ 0x4\n    if \"W\" in action:\n        value &= ~ 0x8\n    return value",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import remove_action\n```\n\n```python\n\n\n```\n\n```python\ndef remove_action(value,action):\n    if \"N\" in action:\n        value &= ~ 0x1\n    if \"E\" in action:\n        value &= ~ 0x2\n    if \"S\" in action:\n        value &= ~ 0x4\n    if \"W\" in action:\n        value &= ~ 0x8\n    return value\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cell_value",
        "kind": 2,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "def cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:\n            return 15\n    else:\n        if(r % ( obs_blocks+1)==0 or c % (obs_blocks +1 ) == 0 ):",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import cell_value\n```\n\n```python\n\n\n```\n\n```python\ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:\n            return 15\n    else:\n        if(r % ( obs_blocks+1)==0 or c % (obs_blocks +1 ) == 0 ):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a = np.load(\"maze_samples/maze2d_001.npy\")\nprint(\"BEFORE\")\nprint(a)\ndef actions_to_value(actions = None):\n    value = 0x0\n    if not actions:\n        return value \n    if \"N\" in actions:\n        value |= 0x1\n    if \"E\" in actions:",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import a\n```\n\n```python\n\n\n```\n\n```python\na = np.load(\"maze_samples/maze2d_001.npy\")\nprint(\"BEFORE\")\nprint(a)\ndef actions_to_value(actions = None):\n    value = 0x0\n    if not actions:\n        return value \n    if \"N\" in actions:\n        value |= 0x1\n    if \"E\" in actions:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "a[1,1]",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a[1,1] = 0\na[3,3] = 0\na[1,3] = 0\na[3,1] = 0\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import a[1,1]\n```\n\n```python\n\n\n```\n\n```python\na[1,1] = 0\na[3,3] = 0\na[1,3] = 0\na[3,1] = 0\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "a[3,3]",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a[3,3] = 0\na[1,3] = 0\na[3,1] = 0\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import a[3,3]\n```\n\n```python\n\n\n```\n\n```python\na[3,3] = 0\na[1,3] = 0\na[3,1] = 0\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "a[1,3]",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a[1,3] = 0\na[3,1] = 0\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n]",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import a[1,3]\n```\n\n```python\n\n\n```\n\n```python\na[1,3] = 0\na[3,1] = 0\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "a[3,1]",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a[3,1] = 0\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n]\na = np.array(a)",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import a[3,1]\n```\n\n```python\n\n\n```\n\n```python\na[3,1] = 0\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n]\na = np.array(a)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "av",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "av = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n]\na = np.array(a)\nprint(\"AFTER\")",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import av\n```\n\n```python\n\n\n```\n\n```python\nav = actions_to_value\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n]\na = np.array(a)\nprint(\"AFTER\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n]\na = np.array(a)\nprint(\"AFTER\")\nprint(a)",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import a\n```\n\n```python\n\n\n```\n\n```python\na = [\n    [av(\"ES\"),av(\"WE\"),av(\"WES\"),av(\"WE\"),av(\"WS\")],\n    [av(\"NS\"),av(\"\"),    av(\"NS\"),  av(\"\"), av(\"NS\")],\n    [av(\"NES\"),av(\"WE\"),av(\"NEWS\"),av(\"WE\"),av(\"NWS\")],\n    [av(\"NS\"),av(\"\"),av(\"NS\"),av(\"\"),av(\"NS\")],\n    [av(\"NE\"),av(\"WE\"),av(\"WEN\"),av(\"WE\"),av(\"WN\")],\n]\na = np.array(a)\nprint(\"AFTER\")\nprint(a)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "a = np.array(a)\nprint(\"AFTER\")\nprint(a)\nprint(actions_to_value(\"NEWS\"),actions_to_value(\"\"))\nnp.save(\"maze_samples/maze2d_001.npy\",a)\nNROWS = 21\nNCOLS = 21\nOBS_BLOCKS = 3\n# Each block can be considered 20m x 20m \ndef cell_value(r,c,obs_blocks=1,street_blocks=1):",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import a\n```\n\n```python\n\n\n```\n\n```python\na = np.array(a)\nprint(\"AFTER\")\nprint(a)\nprint(actions_to_value(\"NEWS\"),actions_to_value(\"\"))\nnp.save(\"maze_samples/maze2d_001.npy\",a)\nNROWS = 21\nNCOLS = 21\nOBS_BLOCKS = 3\n# Each block can be considered 20m x 20m \ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NROWS",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "NROWS = 21\nNCOLS = 21\nOBS_BLOCKS = 3\n# Each block can be considered 20m x 20m \ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import NROWS\n```\n\n```python\n\n\n```\n\n```python\nNROWS = 21\nNCOLS = 21\nOBS_BLOCKS = 3\n# Each block can be considered 20m x 20m \ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NCOLS",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "NCOLS = 21\nOBS_BLOCKS = 3\n# Each block can be considered 20m x 20m \ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import NCOLS\n```\n\n```python\n\n\n```\n\n```python\nNCOLS = 21\nOBS_BLOCKS = 3\n# Each block can be considered 20m x 20m \ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OBS_BLOCKS",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "OBS_BLOCKS = 3\n# Each block can be considered 20m x 20m \ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:\n            return 15",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import OBS_BLOCKS\n```\n\n```python\n\n\n```\n\n```python\nOBS_BLOCKS = 3\n# Each block can be considered 20m x 20m \ndef cell_value(r,c,obs_blocks=1,street_blocks=1):\n    if(obs_blocks ==1):\n        if r %2 ==0 or c %2 ==0:\n            return 15\n        elif r != 0 and c !=0 and r != NROWS -1 and c != NCOLS -1 :\n            return 0\n        else:\n            return 15\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "aa",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "aa = [ [cell_value(r,c,obs_blocks=OBS_BLOCKS) for c in range(NCOLS) ] for r in range(NROWS)]\naa = np.array(aa)\nprint('aa BEF: \\n', aa)  \nfor r in range(len(aa)):\n    for c in range( len(aa[0] )):\n        cell = aa[r,c]\n        if r -1 < 0 or  aa[r-1,c] == 0:\n            cell = remove_action( cell,\"N\") \n        if r+1 >= len(aa) or aa[r+1,c] == 0:\n            cell = remove_action( cell,\"S\") ",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import aa\n```\n\n```python\n\n\n```\n\n```python\naa = [ [cell_value(r,c,obs_blocks=OBS_BLOCKS) for c in range(NCOLS) ] for r in range(NROWS)]\naa = np.array(aa)\nprint('aa BEF: \\n', aa)  \nfor r in range(len(aa)):\n    for c in range( len(aa[0] )):\n        cell = aa[r,c]\n        if r -1 < 0 or  aa[r-1,c] == 0:\n            cell = remove_action( cell,\"N\") \n        if r+1 >= len(aa) or aa[r+1,c] == 0:\n            cell = remove_action( cell,\"S\") \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "aa",
        "kind": 5,
        "importPath": "gym_maze.envs.my_maze_generator",
        "description": "gym_maze.envs.my_maze_generator",
        "peekOfCode": "aa = np.array(aa)\nprint('aa BEF: \\n', aa)  \nfor r in range(len(aa)):\n    for c in range( len(aa[0] )):\n        cell = aa[r,c]\n        if r -1 < 0 or  aa[r-1,c] == 0:\n            cell = remove_action( cell,\"N\") \n        if r+1 >= len(aa) or aa[r+1,c] == 0:\n            cell = remove_action( cell,\"S\") \n        if c -1 < 0 or  aa[r,c-1] == 0:",
        "detail": "gym_maze.envs.my_maze_generator",
        "documentation": {
            "value": "\n```python\nfrom gym_maze.envs.my_maze_generator import aa\n```\n\n```python\n\n\n```\n\n```python\naa = np.array(aa)\nprint('aa BEF: \\n', aa)  \nfor r in range(len(aa)):\n    for c in range( len(aa[0] )):\n        cell = aa[r,c]\n        if r -1 < 0 or  aa[r-1,c] == 0:\n            cell = remove_action( cell,\"N\") \n        if r+1 >= len(aa) or aa[r+1,c] == 0:\n            cell = remove_action( cell,\"S\") \n        if c -1 < 0 or  aa[r,c-1] == 0:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "rng",
        "kind": 5,
        "importPath": "scripts.test_tree",
        "description": "scripts.test_tree",
        "peekOfCode": "rng = np.random.RandomState(0)\nX = rng.random_sample((10, 3))  # 10 points in 3 dimensions\nX = np.vstack( (X,np.array([0.1,0.1,0.1])) )\nX = np.vstack( (X,np.array([-0.1,-0.1,-0.1])) )\n# X = np.array(X)\nprint(X)\ntree = KDTree(X, leaf_size=2)     # doctest: +SKIP\nres =tree.query_radius([[0,0,0]], r=0.3, count_only=True)\nprint(res)\nprint([ X[i] for i in res])  # indices of neighbors within distance 0.3",
        "detail": "scripts.test_tree",
        "documentation": {
            "value": "\n```python\nfrom scripts.test_tree import rng\n```\n\n```python\n\n\n```\n\n```python\nrng = np.random.RandomState(0)\nX = rng.random_sample((10, 3))  # 10 points in 3 dimensions\nX = np.vstack( (X,np.array([0.1,0.1,0.1])) )\nX = np.vstack( (X,np.array([-0.1,-0.1,-0.1])) )\n# X = np.array(X)\nprint(X)\ntree = KDTree(X, leaf_size=2)     # doctest: +SKIP\nres =tree.query_radius([[0,0,0]], r=0.3, count_only=True)\nprint(res)\nprint([ X[i] for i in res])  # indices of neighbors within distance 0.3\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "scripts.test_tree",
        "description": "scripts.test_tree",
        "peekOfCode": "X = rng.random_sample((10, 3))  # 10 points in 3 dimensions\nX = np.vstack( (X,np.array([0.1,0.1,0.1])) )\nX = np.vstack( (X,np.array([-0.1,-0.1,-0.1])) )\n# X = np.array(X)\nprint(X)\ntree = KDTree(X, leaf_size=2)     # doctest: +SKIP\nres =tree.query_radius([[0,0,0]], r=0.3, count_only=True)\nprint(res)\nprint([ X[i] for i in res])  # indices of neighbors within distance 0.3",
        "detail": "scripts.test_tree",
        "documentation": {
            "value": "\n```python\nfrom scripts.test_tree import X\n```\n\n```python\n\n\n```\n\n```python\nX = rng.random_sample((10, 3))  # 10 points in 3 dimensions\nX = np.vstack( (X,np.array([0.1,0.1,0.1])) )\nX = np.vstack( (X,np.array([-0.1,-0.1,-0.1])) )\n# X = np.array(X)\nprint(X)\ntree = KDTree(X, leaf_size=2)     # doctest: +SKIP\nres =tree.query_radius([[0,0,0]], r=0.3, count_only=True)\nprint(res)\nprint([ X[i] for i in res])  # indices of neighbors within distance 0.3\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "scripts.test_tree",
        "description": "scripts.test_tree",
        "peekOfCode": "X = np.vstack( (X,np.array([0.1,0.1,0.1])) )\nX = np.vstack( (X,np.array([-0.1,-0.1,-0.1])) )\n# X = np.array(X)\nprint(X)\ntree = KDTree(X, leaf_size=2)     # doctest: +SKIP\nres =tree.query_radius([[0,0,0]], r=0.3, count_only=True)\nprint(res)\nprint([ X[i] for i in res])  # indices of neighbors within distance 0.3",
        "detail": "scripts.test_tree",
        "documentation": {
            "value": "\n```python\nfrom scripts.test_tree import X\n```\n\n```python\n\n\n```\n\n```python\nX = np.vstack( (X,np.array([0.1,0.1,0.1])) )\nX = np.vstack( (X,np.array([-0.1,-0.1,-0.1])) )\n# X = np.array(X)\nprint(X)\ntree = KDTree(X, leaf_size=2)     # doctest: +SKIP\nres =tree.query_radius([[0,0,0]], r=0.3, count_only=True)\nprint(res)\nprint([ X[i] for i in res])  # indices of neighbors within distance 0.3\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "scripts.test_tree",
        "description": "scripts.test_tree",
        "peekOfCode": "X = np.vstack( (X,np.array([-0.1,-0.1,-0.1])) )\n# X = np.array(X)\nprint(X)\ntree = KDTree(X, leaf_size=2)     # doctest: +SKIP\nres =tree.query_radius([[0,0,0]], r=0.3, count_only=True)\nprint(res)\nprint([ X[i] for i in res])  # indices of neighbors within distance 0.3",
        "detail": "scripts.test_tree",
        "documentation": {
            "value": "\n```python\nfrom scripts.test_tree import X\n```\n\n```python\n\n\n```\n\n```python\nX = np.vstack( (X,np.array([-0.1,-0.1,-0.1])) )\n# X = np.array(X)\nprint(X)\ntree = KDTree(X, leaf_size=2)     # doctest: +SKIP\nres =tree.query_radius([[0,0,0]], r=0.3, count_only=True)\nprint(res)\nprint([ X[i] for i in res])  # indices of neighbors within distance 0.3\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "scripts.test_tree",
        "description": "scripts.test_tree",
        "peekOfCode": "tree = KDTree(X, leaf_size=2)     # doctest: +SKIP\nres =tree.query_radius([[0,0,0]], r=0.3, count_only=True)\nprint(res)\nprint([ X[i] for i in res])  # indices of neighbors within distance 0.3",
        "detail": "scripts.test_tree",
        "documentation": {
            "value": "\n```python\nfrom scripts.test_tree import tree\n```\n\n```python\n\n\n```\n\n```python\ntree = KDTree(X, leaf_size=2)     # doctest: +SKIP\nres =tree.query_radius([[0,0,0]], r=0.3, count_only=True)\nprint(res)\nprint([ X[i] for i in res])  # indices of neighbors within distance 0.3\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "check_pos",
        "kind": 2,
        "importPath": "scripts.track_trajectories",
        "description": "scripts.track_trajectories",
        "peekOfCode": "def check_pos(vName):\n    p = client.simGetGroundTruthKinematics(vehicle_name = vName).position\n    ts = time.time()\n    print(\"[\",vName,\"]\",(p.x_val,p.y_val,p.z_val) )\n    return p,ts\ndef signal_handler(sig, frame):\n    print('You pressed Ctrl+C! Exiting...')\n    utils.pkl_save_obj(trajectories,\"trajectory_\",file_timestamp)\n    sys.exit(0)\nif __name__ == \"__main__\":",
        "detail": "scripts.track_trajectories",
        "documentation": {
            "value": "\n```python\nfrom scripts.track_trajectories import check_pos\n```\n\n```python\n\n\n```\n\n```python\ndef check_pos(vName):\n    p = client.simGetGroundTruthKinematics(vehicle_name = vName).position\n    ts = time.time()\n    print(\"[\",vName,\"]\",(p.x_val,p.y_val,p.z_val) )\n    return p,ts\ndef signal_handler(sig, frame):\n    print('You pressed Ctrl+C! Exiting...')\n    utils.pkl_save_obj(trajectories,\"trajectory_\",file_timestamp)\n    sys.exit(0)\nif __name__ == \"__main__\":\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "signal_handler",
        "kind": 2,
        "importPath": "scripts.track_trajectories",
        "description": "scripts.track_trajectories",
        "peekOfCode": "def signal_handler(sig, frame):\n    print('You pressed Ctrl+C! Exiting...')\n    utils.pkl_save_obj(trajectories,\"trajectory_\",file_timestamp)\n    sys.exit(0)\nif __name__ == \"__main__\":\n    signal.signal(signal.SIGINT, signal_handler)\n    print('Press Ctrl+C TO STOP')\n    client = airsim.MultirotorClient()\n    # connect to the AirSim simulator\n    print(client.confirmConnection() )",
        "detail": "scripts.track_trajectories",
        "documentation": {
            "value": "\n```python\nfrom scripts.track_trajectories import signal_handler\n```\n\n```python\n\n\n```\n\n```python\ndef signal_handler(sig, frame):\n    print('You pressed Ctrl+C! Exiting...')\n    utils.pkl_save_obj(trajectories,\"trajectory_\",file_timestamp)\n    sys.exit(0)\nif __name__ == \"__main__\":\n    signal.signal(signal.SIGINT, signal_handler)\n    print('Press Ctrl+C TO STOP')\n    client = airsim.MultirotorClient()\n    # connect to the AirSim simulator\n    print(client.confirmConnection() )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "timestep",
        "kind": 5,
        "importPath": "scripts.track_trajectories",
        "description": "scripts.track_trajectories",
        "peekOfCode": "timestep = 0.1 # s\nmonitor_timeout =  20 * 60 # s\nmonitor_iterations = int(monitor_timeout // timestep)\ndoTimestamp = False\ndef check_pos(vName):\n    p = client.simGetGroundTruthKinematics(vehicle_name = vName).position\n    ts = time.time()\n    print(\"[\",vName,\"]\",(p.x_val,p.y_val,p.z_val) )\n    return p,ts\ndef signal_handler(sig, frame):",
        "detail": "scripts.track_trajectories",
        "documentation": {
            "value": "\n```python\nfrom scripts.track_trajectories import timestep\n```\n\n```python\n\n\n```\n\n```python\ntimestep = 0.1 # s\nmonitor_timeout =  20 * 60 # s\nmonitor_iterations = int(monitor_timeout // timestep)\ndoTimestamp = False\ndef check_pos(vName):\n    p = client.simGetGroundTruthKinematics(vehicle_name = vName).position\n    ts = time.time()\n    print(\"[\",vName,\"]\",(p.x_val,p.y_val,p.z_val) )\n    return p,ts\ndef signal_handler(sig, frame):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "monitor_timeout",
        "kind": 5,
        "importPath": "scripts.track_trajectories",
        "description": "scripts.track_trajectories",
        "peekOfCode": "monitor_timeout =  20 * 60 # s\nmonitor_iterations = int(monitor_timeout // timestep)\ndoTimestamp = False\ndef check_pos(vName):\n    p = client.simGetGroundTruthKinematics(vehicle_name = vName).position\n    ts = time.time()\n    print(\"[\",vName,\"]\",(p.x_val,p.y_val,p.z_val) )\n    return p,ts\ndef signal_handler(sig, frame):\n    print('You pressed Ctrl+C! Exiting...')",
        "detail": "scripts.track_trajectories",
        "documentation": {
            "value": "\n```python\nfrom scripts.track_trajectories import monitor_timeout\n```\n\n```python\n\n\n```\n\n```python\nmonitor_timeout =  20 * 60 # s\nmonitor_iterations = int(monitor_timeout // timestep)\ndoTimestamp = False\ndef check_pos(vName):\n    p = client.simGetGroundTruthKinematics(vehicle_name = vName).position\n    ts = time.time()\n    print(\"[\",vName,\"]\",(p.x_val,p.y_val,p.z_val) )\n    return p,ts\ndef signal_handler(sig, frame):\n    print('You pressed Ctrl+C! Exiting...')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "monitor_iterations",
        "kind": 5,
        "importPath": "scripts.track_trajectories",
        "description": "scripts.track_trajectories",
        "peekOfCode": "monitor_iterations = int(monitor_timeout // timestep)\ndoTimestamp = False\ndef check_pos(vName):\n    p = client.simGetGroundTruthKinematics(vehicle_name = vName).position\n    ts = time.time()\n    print(\"[\",vName,\"]\",(p.x_val,p.y_val,p.z_val) )\n    return p,ts\ndef signal_handler(sig, frame):\n    print('You pressed Ctrl+C! Exiting...')\n    utils.pkl_save_obj(trajectories,\"trajectory_\",file_timestamp)",
        "detail": "scripts.track_trajectories",
        "documentation": {
            "value": "\n```python\nfrom scripts.track_trajectories import monitor_iterations\n```\n\n```python\n\n\n```\n\n```python\nmonitor_iterations = int(monitor_timeout // timestep)\ndoTimestamp = False\ndef check_pos(vName):\n    p = client.simGetGroundTruthKinematics(vehicle_name = vName).position\n    ts = time.time()\n    print(\"[\",vName,\"]\",(p.x_val,p.y_val,p.z_val) )\n    return p,ts\ndef signal_handler(sig, frame):\n    print('You pressed Ctrl+C! Exiting...')\n    utils.pkl_save_obj(trajectories,\"trajectory_\",file_timestamp)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "doTimestamp",
        "kind": 5,
        "importPath": "scripts.track_trajectories",
        "description": "scripts.track_trajectories",
        "peekOfCode": "doTimestamp = False\ndef check_pos(vName):\n    p = client.simGetGroundTruthKinematics(vehicle_name = vName).position\n    ts = time.time()\n    print(\"[\",vName,\"]\",(p.x_val,p.y_val,p.z_val) )\n    return p,ts\ndef signal_handler(sig, frame):\n    print('You pressed Ctrl+C! Exiting...')\n    utils.pkl_save_obj(trajectories,\"trajectory_\",file_timestamp)\n    sys.exit(0)",
        "detail": "scripts.track_trajectories",
        "documentation": {
            "value": "\n```python\nfrom scripts.track_trajectories import doTimestamp\n```\n\n```python\n\n\n```\n\n```python\ndoTimestamp = False\ndef check_pos(vName):\n    p = client.simGetGroundTruthKinematics(vehicle_name = vName).position\n    ts = time.time()\n    print(\"[\",vName,\"]\",(p.x_val,p.y_val,p.z_val) )\n    return p,ts\ndef signal_handler(sig, frame):\n    print('You pressed Ctrl+C! Exiting...')\n    utils.pkl_save_obj(trajectories,\"trajectory_\",file_timestamp)\n    sys.exit(0)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TRAJECTORIES_FOLDER",
        "kind": 5,
        "importPath": "scripts.trajectories_fix",
        "description": "scripts.trajectories_fix",
        "peekOfCode": "TRAJECTORIES_FOLDER = \"./trajectories/\"\nAIRSIM_SETTINGS_FOLDER = 'C:/Users/gioca/OneDrive/Documents/Airsim/'\nif __name__ == \"__main__\":  \n    parser = argparse.ArgumentParser(description='Traj fixer')\n    parser.add_argument('--folder', type=str, required = True,\n        help='folder of trajectory (default: %(default)s)')\n    # parser.add_argument('--debug', type=bool, default=False,\n    # help='Log into file (default: %(default)s)')\n    # parser.add_argument('--track-trajectories', type=bool, default=True,\n    #     help='Track trajectories into file (default: %(default)s)')",
        "detail": "scripts.trajectories_fix",
        "documentation": {
            "value": "\n```python\nfrom scripts.trajectories_fix import TRAJECTORIES_FOLDER\n```\n\n```python\n\n\n```\n\n```python\nTRAJECTORIES_FOLDER = \"./trajectories/\"\nAIRSIM_SETTINGS_FOLDER = 'C:/Users/gioca/OneDrive/Documents/Airsim/'\nif __name__ == \"__main__\":  \n    parser = argparse.ArgumentParser(description='Traj fixer')\n    parser.add_argument('--folder', type=str, required = True,\n        help='folder of trajectory (default: %(default)s)')\n    # parser.add_argument('--debug', type=bool, default=False,\n    # help='Log into file (default: %(default)s)')\n    # parser.add_argument('--track-trajectories', type=bool, default=True,\n    #     help='Track trajectories into file (default: %(default)s)')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AIRSIM_SETTINGS_FOLDER",
        "kind": 5,
        "importPath": "scripts.trajectories_fix",
        "description": "scripts.trajectories_fix",
        "peekOfCode": "AIRSIM_SETTINGS_FOLDER = 'C:/Users/gioca/OneDrive/Documents/Airsim/'\nif __name__ == \"__main__\":  \n    parser = argparse.ArgumentParser(description='Traj fixer')\n    parser.add_argument('--folder', type=str, required = True,\n        help='folder of trajectory (default: %(default)s)')\n    # parser.add_argument('--debug', type=bool, default=False,\n    # help='Log into file (default: %(default)s)')\n    # parser.add_argument('--track-trajectories', type=bool, default=True,\n    #     help='Track trajectories into file (default: %(default)s)')\n    args = parser.parse_args()",
        "detail": "scripts.trajectories_fix",
        "documentation": {
            "value": "\n```python\nfrom scripts.trajectories_fix import AIRSIM_SETTINGS_FOLDER\n```\n\n```python\n\n\n```\n\n```python\nAIRSIM_SETTINGS_FOLDER = 'C:/Users/gioca/OneDrive/Documents/Airsim/'\nif __name__ == \"__main__\":  \n    parser = argparse.ArgumentParser(description='Traj fixer')\n    parser.add_argument('--folder', type=str, required = True,\n        help='folder of trajectory (default: %(default)s)')\n    # parser.add_argument('--debug', type=bool, default=False,\n    # help='Log into file (default: %(default)s)')\n    # parser.add_argument('--track-trajectories', type=bool, default=True,\n    #     help='Track trajectories into file (default: %(default)s)')\n    args = parser.parse_args()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "select_action",
        "kind": 2,
        "importPath": "dqn_main",
        "description": "dqn_main",
        "peekOfCode": "def select_action(state, explore_rate):\n    # Select a random action\n    if random.random() < explore_rate:\n        action = env.action_space.sample()\n    # Select the action with the highest q\n    else:\n        action = int(np.argmax(q_table[state]))\n    return action\ndef get_explore_rate(t):\n    return max(MIN_EXPLORE_RATE, min(0.8, 1.0 - math.log10((t+1)/DECAY_FACTOR)))",
        "detail": "dqn_main",
        "documentation": {
            "value": "\n```python\nfrom dqn_main import select_action\n```\n\n```python\n\n\n```\n\n```python\ndef select_action(state, explore_rate):\n    # Select a random action\n    if random.random() < explore_rate:\n        action = env.action_space.sample()\n    # Select the action with the highest q\n    else:\n        action = int(np.argmax(q_table[state]))\n    return action\ndef get_explore_rate(t):\n    return max(MIN_EXPLORE_RATE, min(0.8, 1.0 - math.log10((t+1)/DECAY_FACTOR)))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_explore_rate",
        "kind": 2,
        "importPath": "dqn_main",
        "description": "dqn_main",
        "peekOfCode": "def get_explore_rate(t):\n    return max(MIN_EXPLORE_RATE, min(0.8, 1.0 - math.log10((t+1)/DECAY_FACTOR)))\ndef get_learning_rate(t):\n    return max(MIN_LEARNING_RATE, min(0.8, 1.0 - math.log10((t+1)/DECAY_FACTOR)))\ndef state_to_bucket(state):\n    bucket_indice = []\n    for i in range(len(state)):\n        if state[i] <= STATE_BOUNDS[i][0]:\n            bucket_index = 0\n        elif state[i] >= STATE_BOUNDS[i][1]:",
        "detail": "dqn_main",
        "documentation": {
            "value": "\n```python\nfrom dqn_main import get_explore_rate\n```\n\n```python\n\n\n```\n\n```python\ndef get_explore_rate(t):\n    return max(MIN_EXPLORE_RATE, min(0.8, 1.0 - math.log10((t+1)/DECAY_FACTOR)))\ndef get_learning_rate(t):\n    return max(MIN_LEARNING_RATE, min(0.8, 1.0 - math.log10((t+1)/DECAY_FACTOR)))\ndef state_to_bucket(state):\n    bucket_indice = []\n    for i in range(len(state)):\n        if state[i] <= STATE_BOUNDS[i][0]:\n            bucket_index = 0\n        elif state[i] >= STATE_BOUNDS[i][1]:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_learning_rate",
        "kind": 2,
        "importPath": "dqn_main",
        "description": "dqn_main",
        "peekOfCode": "def get_learning_rate(t):\n    return max(MIN_LEARNING_RATE, min(0.8, 1.0 - math.log10((t+1)/DECAY_FACTOR)))\ndef state_to_bucket(state):\n    bucket_indice = []\n    for i in range(len(state)):\n        if state[i] <= STATE_BOUNDS[i][0]:\n            bucket_index = 0\n        elif state[i] >= STATE_BOUNDS[i][1]:\n            bucket_index = NUM_BUCKETS[i] - 1\n        else:",
        "detail": "dqn_main",
        "documentation": {
            "value": "\n```python\nfrom dqn_main import get_learning_rate\n```\n\n```python\n\n\n```\n\n```python\ndef get_learning_rate(t):\n    return max(MIN_LEARNING_RATE, min(0.8, 1.0 - math.log10((t+1)/DECAY_FACTOR)))\ndef state_to_bucket(state):\n    bucket_indice = []\n    for i in range(len(state)):\n        if state[i] <= STATE_BOUNDS[i][0]:\n            bucket_index = 0\n        elif state[i] >= STATE_BOUNDS[i][1]:\n            bucket_index = NUM_BUCKETS[i] - 1\n        else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "state_to_bucket",
        "kind": 2,
        "importPath": "dqn_main",
        "description": "dqn_main",
        "peekOfCode": "def state_to_bucket(state):\n    bucket_indice = []\n    for i in range(len(state)):\n        if state[i] <= STATE_BOUNDS[i][0]:\n            bucket_index = 0\n        elif state[i] >= STATE_BOUNDS[i][1]:\n            bucket_index = NUM_BUCKETS[i] - 1\n        else:\n            # Mapping the state bounds to the bucket array\n            bound_width = STATE_BOUNDS[i][1] - STATE_BOUNDS[i][0]",
        "detail": "dqn_main",
        "documentation": {
            "value": "\n```python\nfrom dqn_main import state_to_bucket\n```\n\n```python\n\n\n```\n\n```python\ndef state_to_bucket(state):\n    bucket_indice = []\n    for i in range(len(state)):\n        if state[i] <= STATE_BOUNDS[i][0]:\n            bucket_index = 0\n        elif state[i] >= STATE_BOUNDS[i][1]:\n            bucket_index = NUM_BUCKETS[i] - 1\n        else:\n            # Mapping the state bounds to the bucket array\n            bound_width = STATE_BOUNDS[i][1] - STATE_BOUNDS[i][0]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "custom_random",
        "kind": 2,
        "importPath": "dqn_main",
        "description": "dqn_main",
        "peekOfCode": "def custom_random(past_action):\n    action = env.action_space.sample() # Random actions DEBUG ONLY            \n    if(past_action and past_action != ACTION_TO_IDX[\"FRONT\"] ):\n        while(action == past_action):\n            action = env.action_space.sample() # Random actions DEBUG ONLY                    \n    return action\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=10,\n                        help='episodes (default: %(default)s)')",
        "detail": "dqn_main",
        "documentation": {
            "value": "\n```python\nfrom dqn_main import custom_random\n```\n\n```python\n\n\n```\n\n```python\ndef custom_random(past_action):\n    action = env.action_space.sample() # Random actions DEBUG ONLY            \n    if(past_action and past_action != ACTION_TO_IDX[\"FRONT\"] ):\n        while(action == past_action):\n            action = env.action_space.sample() # Random actions DEBUG ONLY                    \n    return action\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=10,\n                        help='episodes (default: %(default)s)')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "episode_cooldown",
        "kind": 5,
        "importPath": "dqn_main",
        "description": "dqn_main",
        "peekOfCode": "episode_cooldown = 3\nACTION_TO_IDX = {\"LEFT\":0, \"FRONT\":1, \"RIGHT\":2,\"BACK\" : 3}\nIDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\ndef select_action(state, explore_rate):\n    # Select a random action\n    if random.random() < explore_rate:\n        action = env.action_space.sample()\n    # Select the action with the highest q\n    else:\n        action = int(np.argmax(q_table[state]))",
        "detail": "dqn_main",
        "documentation": {
            "value": "\n```python\nfrom dqn_main import episode_cooldown\n```\n\n```python\n\n\n```\n\n```python\nepisode_cooldown = 3\nACTION_TO_IDX = {\"LEFT\":0, \"FRONT\":1, \"RIGHT\":2,\"BACK\" : 3}\nIDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\ndef select_action(state, explore_rate):\n    # Select a random action\n    if random.random() < explore_rate:\n        action = env.action_space.sample()\n    # Select the action with the highest q\n    else:\n        action = int(np.argmax(q_table[state]))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ACTION_TO_IDX",
        "kind": 5,
        "importPath": "dqn_main",
        "description": "dqn_main",
        "peekOfCode": "ACTION_TO_IDX = {\"LEFT\":0, \"FRONT\":1, \"RIGHT\":2,\"BACK\" : 3}\nIDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\ndef select_action(state, explore_rate):\n    # Select a random action\n    if random.random() < explore_rate:\n        action = env.action_space.sample()\n    # Select the action with the highest q\n    else:\n        action = int(np.argmax(q_table[state]))\n    return action",
        "detail": "dqn_main",
        "documentation": {
            "value": "\n```python\nfrom dqn_main import ACTION_TO_IDX\n```\n\n```python\n\n\n```\n\n```python\nACTION_TO_IDX = {\"LEFT\":0, \"FRONT\":1, \"RIGHT\":2,\"BACK\" : 3}\nIDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\ndef select_action(state, explore_rate):\n    # Select a random action\n    if random.random() < explore_rate:\n        action = env.action_space.sample()\n    # Select the action with the highest q\n    else:\n        action = int(np.argmax(q_table[state]))\n    return action\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IDX_TO_ACTION",
        "kind": 5,
        "importPath": "dqn_main",
        "description": "dqn_main",
        "peekOfCode": "IDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\ndef select_action(state, explore_rate):\n    # Select a random action\n    if random.random() < explore_rate:\n        action = env.action_space.sample()\n    # Select the action with the highest q\n    else:\n        action = int(np.argmax(q_table[state]))\n    return action\ndef get_explore_rate(t):",
        "detail": "dqn_main",
        "documentation": {
            "value": "\n```python\nfrom dqn_main import IDX_TO_ACTION\n```\n\n```python\n\n\n```\n\n```python\nIDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\ndef select_action(state, explore_rate):\n    # Select a random action\n    if random.random() < explore_rate:\n        action = env.action_space.sample()\n    # Select the action with the highest q\n    else:\n        action = int(np.argmax(q_table[state]))\n    return action\ndef get_explore_rate(t):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DroneAgent",
        "kind": 6,
        "importPath": "Drone",
        "description": "Drone",
        "peekOfCode": "class DroneAgent:\n    def __init__(self,vehicle_name = None ,img1=None,img2=None,\n        home_pos=None,home_ori=None,z=None,client = None):\n        self.vehicle_name = vehicle_name\n        self.img1 = img1\n        self.img2 = img2\n        self.home_pos = home_pos\n        self.home_ori = home_ori\n        self.z = z\n        self.client = client",
        "detail": "Drone",
        "documentation": {
            "value": "\n```python\nfrom Drone import DroneAgent\n```\n\n```python\n\n\n```\n\n```python\nclass DroneAgent:\n    def __init__(self,vehicle_name = None ,img1=None,img2=None,\n        home_pos=None,home_ori=None,z=None,client = None):\n        self.vehicle_name = vehicle_name\n        self.img1 = img1\n        self.img2 = img2\n        self.home_pos = home_pos\n        self.home_ori = home_ori\n        self.z = z\n        self.client = client\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "myjoint_TAKEOFF",
        "kind": 2,
        "importPath": "multiThreadFlight",
        "description": "multiThreadFlight",
        "peekOfCode": "def myjoint_TAKEOFF(goalx, goaly, goalz, Vel,vehicle_name):\n    dist=(abs(goalz) - abs(client.simGetGroundTruthKinematics(vehicle_name).position.z_val))\n    time.sleep(abs(dist)/Vel)  \n#################################################################### NAVIGATE\ndef myjoint(goalx,goaly,goalz,Vel,vehicle_name):\n    global lk\n    lk.acquire()\n    pos = client.simGetGroundTruthKinematics(vehicle_name)\n    lk.release()\n    dist = ((np.sqrt(np.power((goalx -pos.position.x_val),2) + np.power((goaly - pos.position.y_val),2)+ np.power((goalz - pos.position.z_val),2))))",
        "detail": "multiThreadFlight",
        "documentation": {
            "value": "\n```python\nfrom multiThreadFlight import myjoint_TAKEOFF\n```\n\n```python\n\n\n```\n\n```python\ndef myjoint_TAKEOFF(goalx, goaly, goalz, Vel,vehicle_name):\n    dist=(abs(goalz) - abs(client.simGetGroundTruthKinematics(vehicle_name).position.z_val))\n    time.sleep(abs(dist)/Vel)  \n#################################################################### NAVIGATE\ndef myjoint(goalx,goaly,goalz,Vel,vehicle_name):\n    global lk\n    lk.acquire()\n    pos = client.simGetGroundTruthKinematics(vehicle_name)\n    lk.release()\n    dist = ((np.sqrt(np.power((goalx -pos.position.x_val),2) + np.power((goaly - pos.position.y_val),2)+ np.power((goalz - pos.position.z_val),2))))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "myjoint",
        "kind": 2,
        "importPath": "multiThreadFlight",
        "description": "multiThreadFlight",
        "peekOfCode": "def myjoint(goalx,goaly,goalz,Vel,vehicle_name):\n    global lk\n    lk.acquire()\n    pos = client.simGetGroundTruthKinematics(vehicle_name)\n    lk.release()\n    dist = ((np.sqrt(np.power((goalx -pos.position.x_val),2) + np.power((goaly - pos.position.y_val),2)+ np.power((goalz - pos.position.z_val),2))))\n    print (\"waiting \",int(abs(dist)/Vel), vehicle_name)\n    time.sleep(int(abs(dist)/Vel))\n    lk.acquire()\n    pos = client.simGetGroundTruthKinematics(vehicle_name)",
        "detail": "multiThreadFlight",
        "documentation": {
            "value": "\n```python\nfrom multiThreadFlight import myjoint\n```\n\n```python\n\n\n```\n\n```python\ndef myjoint(goalx,goaly,goalz,Vel,vehicle_name):\n    global lk\n    lk.acquire()\n    pos = client.simGetGroundTruthKinematics(vehicle_name)\n    lk.release()\n    dist = ((np.sqrt(np.power((goalx -pos.position.x_val),2) + np.power((goaly - pos.position.y_val),2)+ np.power((goalz - pos.position.z_val),2))))\n    print (\"waiting \",int(abs(dist)/Vel), vehicle_name)\n    time.sleep(int(abs(dist)/Vel))\n    lk.acquire()\n    pos = client.simGetGroundTruthKinematics(vehicle_name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "move_drone",
        "kind": 2,
        "importPath": "multiThreadFlight",
        "description": "multiThreadFlight",
        "peekOfCode": "def move_drone(n):\n    global lk\n    name=[\"Drone1\", \"Drone2\"]\n    positions=[[[15,0,-4],[15,5,-4],[0,5,-4],[0,0,-4]],\n               [[12,0,-3],[12,5,-3],[0,5,-3],[0,0,-3]]]\n    for x,y,z in positions[n]:\n        lk.acquire()\n        client.moveToPositionAsync(x,y,z, V, vehicle_name=name[n])\n        lk.release()\n        print(\"goint to\", x,y,z,name[n])",
        "detail": "multiThreadFlight",
        "documentation": {
            "value": "\n```python\nfrom multiThreadFlight import move_drone\n```\n\n```python\n\n\n```\n\n```python\ndef move_drone(n):\n    global lk\n    name=[\"Drone1\", \"Drone2\"]\n    positions=[[[15,0,-4],[15,5,-4],[0,5,-4],[0,0,-4]],\n               [[12,0,-3],[12,5,-3],[0,5,-3],[0,0,-3]]]\n    for x,y,z in positions[n]:\n        lk.acquire()\n        client.moveToPositionAsync(x,y,z, V, vehicle_name=name[n])\n        lk.release()\n        print(\"goint to\", x,y,z,name[n])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "multiThreadFlight",
        "description": "multiThreadFlight",
        "peekOfCode": "client = airsim.MultirotorClient()\nglobal V, Vt, eps\nVt=1\nV=2\neps=0.1\n#move_drone\nglobal d\nd=[]\nlk=threading.Lock()\n#################################################################### TAKE-OFF",
        "detail": "multiThreadFlight",
        "documentation": {
            "value": "\n```python\nfrom multiThreadFlight import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nglobal V, Vt, eps\nVt=1\nV=2\neps=0.1\n#move_drone\nglobal d\nd=[]\nlk=threading.Lock()\n#################################################################### TAKE-OFF\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DrivetrainType",
        "kind": 6,
        "importPath": "newMyAirSimClient",
        "description": "newMyAirSimClient",
        "peekOfCode": "class DrivetrainType:\n    MaxDegreeOfFreedom = 0\n    ForwardOnly = 1\nclass AirSimImageType:    \n    Scene = 0\n    DepthPlanner = 1\n    DepthPerspective = 2\n    DepthVis = 3\n    DisparityNormalized = 4\n    Segmentation = 5",
        "detail": "newMyAirSimClient",
        "documentation": {
            "value": "\n```python\nfrom newMyAirSimClient import DrivetrainType\n```\n\n```python\n\n\n```\n\n```python\nclass DrivetrainType:\n    MaxDegreeOfFreedom = 0\n    ForwardOnly = 1\nclass AirSimImageType:    \n    Scene = 0\n    DepthPlanner = 1\n    DepthPerspective = 2\n    DepthVis = 3\n    DisparityNormalized = 4\n    Segmentation = 5\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AirSimImageType",
        "kind": 6,
        "importPath": "newMyAirSimClient",
        "description": "newMyAirSimClient",
        "peekOfCode": "class AirSimImageType:    \n    Scene = 0\n    DepthPlanner = 1\n    DepthPerspective = 2\n    DepthVis = 3\n    DisparityNormalized = 4\n    Segmentation = 5\n    SurfaceNormals = 6\nlock = threading.Lock()\nclass newMyAirSimClient(MultirotorClient):",
        "detail": "newMyAirSimClient",
        "documentation": {
            "value": "\n```python\nfrom newMyAirSimClient import AirSimImageType\n```\n\n```python\n\n\n```\n\n```python\nclass AirSimImageType:    \n    Scene = 0\n    DepthPlanner = 1\n    DepthPerspective = 2\n    DepthVis = 3\n    DisparityNormalized = 4\n    Segmentation = 5\n    SurfaceNormals = 6\nlock = threading.Lock()\nclass newMyAirSimClient(MultirotorClient):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "newMyAirSimClient",
        "kind": 6,
        "importPath": "newMyAirSimClient",
        "description": "newMyAirSimClient",
        "peekOfCode": "class newMyAirSimClient(MultirotorClient):\n    deg_to_rad = lambda d_angle: d_angle * math.pi / 180.0\n    def __init__(self,trajColFlag):        \n        MultirotorClient.__init__(self)\n        MultirotorClient.confirmConnection(self)\n        self.drones_names = [ v for v in utils.g_airsim_settings[\"Vehicles\"] ]\n        for i,dn in enumerate( self.drones_names ):\n            self.enableApiControl(True,vehicle_name=dn)\n            self.armDisarm(True,vehicle_name=dn)\n        self.trajColFlag = trajColFlag",
        "detail": "newMyAirSimClient",
        "documentation": {
            "value": "\n```python\nfrom newMyAirSimClient import newMyAirSimClient\n```\n\n```python\n\n\n```\n\n```python\nclass newMyAirSimClient(MultirotorClient):\n    deg_to_rad = lambda d_angle: d_angle * math.pi / 180.0\n    def __init__(self,trajColFlag):        \n        MultirotorClient.__init__(self)\n        MultirotorClient.confirmConnection(self)\n        self.drones_names = [ v for v in utils.g_airsim_settings[\"Vehicles\"] ]\n        for i,dn in enumerate( self.drones_names ):\n            self.enableApiControl(True,vehicle_name=dn)\n            self.armDisarm(True,vehicle_name=dn)\n        self.trajColFlag = trajColFlag\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lock",
        "kind": 5,
        "importPath": "newMyAirSimClient",
        "description": "newMyAirSimClient",
        "peekOfCode": "lock = threading.Lock()\nclass newMyAirSimClient(MultirotorClient):\n    deg_to_rad = lambda d_angle: d_angle * math.pi / 180.0\n    def __init__(self,trajColFlag):        \n        MultirotorClient.__init__(self)\n        MultirotorClient.confirmConnection(self)\n        self.drones_names = [ v for v in utils.g_airsim_settings[\"Vehicles\"] ]\n        for i,dn in enumerate( self.drones_names ):\n            self.enableApiControl(True,vehicle_name=dn)\n            self.armDisarm(True,vehicle_name=dn)",
        "detail": "newMyAirSimClient",
        "documentation": {
            "value": "\n```python\nfrom newMyAirSimClient import lock\n```\n\n```python\n\n\n```\n\n```python\nlock = threading.Lock()\nclass newMyAirSimClient(MultirotorClient):\n    deg_to_rad = lambda d_angle: d_angle * math.pi / 180.0\n    def __init__(self,trajColFlag):        \n        MultirotorClient.__init__(self)\n        MultirotorClient.confirmConnection(self)\n        self.drones_names = [ v for v in utils.g_airsim_settings[\"Vehicles\"] ]\n        for i,dn in enumerate( self.drones_names ):\n            self.enableApiControl(True,vehicle_name=dn)\n            self.armDisarm(True,vehicle_name=dn)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "custom_random",
        "kind": 2,
        "importPath": "random_main",
        "description": "random_main",
        "peekOfCode": "def custom_random(past_action):\n    action = env.action_space.sample() # Random actions DEBUG ONLY            \n    if(past_action and past_action != ACTION_TO_IDX[\"FRONT\"] ):\n        while(action == past_action):\n            action = env.action_space.sample() # Random actions DEBUG ONLY                    \n    return action\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=10,\n                        help='episodes (default: %(default)s)')",
        "detail": "random_main",
        "documentation": {
            "value": "\n```python\nfrom random_main import custom_random\n```\n\n```python\n\n\n```\n\n```python\ndef custom_random(past_action):\n    action = env.action_space.sample() # Random actions DEBUG ONLY            \n    if(past_action and past_action != ACTION_TO_IDX[\"FRONT\"] ):\n        while(action == past_action):\n            action = env.action_space.sample() # Random actions DEBUG ONLY                    \n    return action\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=10,\n                        help='episodes (default: %(default)s)')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "episode_cooldown",
        "kind": 5,
        "importPath": "random_main",
        "description": "random_main",
        "peekOfCode": "episode_cooldown = 3\nACTION_TO_IDX = {\"LEFT\":0, \"FRONT\":1, \"RIGHT\":2,\"BACK\" : 3}\nIDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\ndef custom_random(past_action):\n    action = env.action_space.sample() # Random actions DEBUG ONLY            \n    if(past_action and past_action != ACTION_TO_IDX[\"FRONT\"] ):\n        while(action == past_action):\n            action = env.action_space.sample() # Random actions DEBUG ONLY                    \n    return action\nif __name__ == '__main__':",
        "detail": "random_main",
        "documentation": {
            "value": "\n```python\nfrom random_main import episode_cooldown\n```\n\n```python\n\n\n```\n\n```python\nepisode_cooldown = 3\nACTION_TO_IDX = {\"LEFT\":0, \"FRONT\":1, \"RIGHT\":2,\"BACK\" : 3}\nIDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\ndef custom_random(past_action):\n    action = env.action_space.sample() # Random actions DEBUG ONLY            \n    if(past_action and past_action != ACTION_TO_IDX[\"FRONT\"] ):\n        while(action == past_action):\n            action = env.action_space.sample() # Random actions DEBUG ONLY                    \n    return action\nif __name__ == '__main__':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ACTION_TO_IDX",
        "kind": 5,
        "importPath": "random_main",
        "description": "random_main",
        "peekOfCode": "ACTION_TO_IDX = {\"LEFT\":0, \"FRONT\":1, \"RIGHT\":2,\"BACK\" : 3}\nIDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\ndef custom_random(past_action):\n    action = env.action_space.sample() # Random actions DEBUG ONLY            \n    if(past_action and past_action != ACTION_TO_IDX[\"FRONT\"] ):\n        while(action == past_action):\n            action = env.action_space.sample() # Random actions DEBUG ONLY                    \n    return action\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')",
        "detail": "random_main",
        "documentation": {
            "value": "\n```python\nfrom random_main import ACTION_TO_IDX\n```\n\n```python\n\n\n```\n\n```python\nACTION_TO_IDX = {\"LEFT\":0, \"FRONT\":1, \"RIGHT\":2,\"BACK\" : 3}\nIDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\ndef custom_random(past_action):\n    action = env.action_space.sample() # Random actions DEBUG ONLY            \n    if(past_action and past_action != ACTION_TO_IDX[\"FRONT\"] ):\n        while(action == past_action):\n            action = env.action_space.sample() # Random actions DEBUG ONLY                    \n    return action\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IDX_TO_ACTION",
        "kind": 5,
        "importPath": "random_main",
        "description": "random_main",
        "peekOfCode": "IDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\ndef custom_random(past_action):\n    action = env.action_space.sample() # Random actions DEBUG ONLY            \n    if(past_action and past_action != ACTION_TO_IDX[\"FRONT\"] ):\n        while(action == past_action):\n            action = env.action_space.sample() # Random actions DEBUG ONLY                    \n    return action\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=10,",
        "detail": "random_main",
        "documentation": {
            "value": "\n```python\nfrom random_main import IDX_TO_ACTION\n```\n\n```python\n\n\n```\n\n```python\nIDX_TO_ACTION =  {0:\"LEFT\",1:\"FRONT\",2:\"RIGHT\",3:\"BACK\"}\ndef custom_random(past_action):\n    action = env.action_space.sample() # Random actions DEBUG ONLY            \n    if(past_action and past_action != ACTION_TO_IDX[\"FRONT\"] ):\n        while(action == past_action):\n            action = env.action_space.sample() # Random actions DEBUG ONLY                    \n    return action\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=10,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "episode_cooldown",
        "kind": 5,
        "importPath": "random_main_old",
        "description": "random_main_old",
        "peekOfCode": "episode_cooldown = 0.1\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=10,\n                        help='episodes (default: %(default)s)')\n    parser.add_argument('--actions-timeout', type=int, default=100,\n                        help='episodes (default: %(default)s)')\n    parser.add_argument('--debug', type=bool, default=False,\n    help='Log into file (default: %(default)s)')\n    parser.add_argument('--random-pos',action='store_true',  default=False,",
        "detail": "random_main_old",
        "documentation": {
            "value": "\n```python\nfrom random_main_old import episode_cooldown\n```\n\n```python\n\n\n```\n\n```python\nepisode_cooldown = 0.1\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=10,\n                        help='episodes (default: %(default)s)')\n    parser.add_argument('--actions-timeout', type=int, default=100,\n                        help='episodes (default: %(default)s)')\n    parser.add_argument('--debug', type=bool, default=False,\n    help='Log into file (default: %(default)s)')\n    parser.add_argument('--random-pos',action='store_true',  default=False,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sfp",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "sfp = utils.AIRSIM_SETTINGS_FOLDER + \"settings.json\"\nwith open(sfp, \"r\") as jsonFile:\n    data = json.load(jsonFile)\nprint(data[\"Vehicles\"]) \nfor i,v in enumerate(data[\"Vehicles\"]):\n    gps = utils.init_gps[i]\n    ned = utils.lonlatToAirSim(*gps)\n    v[\"X\"] = ned[0]\n    v[\"Y\"] =  ned[1]\n    # v[\"Z\"] = v[\"Z\"] ",
        "detail": "setup",
        "documentation": {
            "value": "\n```python\nfrom setup import sfp\n```\n\n```python\n\n\n```\n\n```python\nsfp = utils.AIRSIM_SETTINGS_FOLDER + \"settings.json\"\nwith open(sfp, \"r\") as jsonFile:\n    data = json.load(jsonFile)\nprint(data[\"Vehicles\"]) \nfor i,v in enumerate(data[\"Vehicles\"]):\n    gps = utils.init_gps[i]\n    ned = utils.lonlatToAirSim(*gps)\n    v[\"X\"] = ned[0]\n    v[\"Y\"] =  ned[1]\n    # v[\"Z\"] = v[\"Z\"] \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "alpha",
        "kind": 5,
        "importPath": "train_main",
        "description": "train_main",
        "peekOfCode": "alpha = 0.1\ngamma = 0.6\nepsilon = 0.1\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=4,\n                        help='episodes (default: %(default)s)')\n    parser.add_argument('--debug', type=bool, default=False,\n                        help='Log into file (default: %(default)s)')\n    args = parser.parse_args()",
        "detail": "train_main",
        "documentation": {
            "value": "\n```python\nfrom train_main import alpha\n```\n\n```python\n\n\n```\n\n```python\nalpha = 0.1\ngamma = 0.6\nepsilon = 0.1\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=4,\n                        help='episodes (default: %(default)s)')\n    parser.add_argument('--debug', type=bool, default=False,\n                        help='Log into file (default: %(default)s)')\n    args = parser.parse_args()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gamma",
        "kind": 5,
        "importPath": "train_main",
        "description": "train_main",
        "peekOfCode": "gamma = 0.6\nepsilon = 0.1\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=4,\n                        help='episodes (default: %(default)s)')\n    parser.add_argument('--debug', type=bool, default=False,\n                        help='Log into file (default: %(default)s)')\n    args = parser.parse_args()\n    # env = gym.make(\"AirSimEnv-v1\")",
        "detail": "train_main",
        "documentation": {
            "value": "\n```python\nfrom train_main import gamma\n```\n\n```python\n\n\n```\n\n```python\ngamma = 0.6\nepsilon = 0.1\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=4,\n                        help='episodes (default: %(default)s)')\n    parser.add_argument('--debug', type=bool, default=False,\n                        help='Log into file (default: %(default)s)')\n    args = parser.parse_args()\n    # env = gym.make(\"AirSimEnv-v1\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "epsilon",
        "kind": 5,
        "importPath": "train_main",
        "description": "train_main",
        "peekOfCode": "epsilon = 0.1\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=4,\n                        help='episodes (default: %(default)s)')\n    parser.add_argument('--debug', type=bool, default=False,\n                        help='Log into file (default: %(default)s)')\n    args = parser.parse_args()\n    # env = gym.make(\"AirSimEnv-v1\")\n    if args.debug:",
        "detail": "train_main",
        "documentation": {
            "value": "\n```python\nfrom train_main import epsilon\n```\n\n```python\n\n\n```\n\n```python\nepsilon = 0.1\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='RL for ma-gym')\n    parser.add_argument('--episodes', type=int, default=4,\n                        help='episodes (default: %(default)s)')\n    parser.add_argument('--debug', type=bool, default=False,\n                        help='Log into file (default: %(default)s)')\n    args = parser.parse_args()\n    # env = gym.make(\"AirSimEnv-v1\")\n    if args.debug:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TrajectoryTrackerClient",
        "kind": 6,
        "importPath": "trajectoryTrackerClient",
        "description": "trajectoryTrackerClient",
        "peekOfCode": "class TrajectoryTrackerClient(MultirotorClient):\n    def __init__(self):        \n        MultirotorClient.__init__(self)\n        MultirotorClient.confirmConnection(self)\n        self.drones_names = [ v for v in utils.g_airsim_settings[\"Vehicles\"] ]\n        self.trajectory = []\n        self.episode = 0\n        self.isTracking = False\n        self.folder_timestamp =str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))\n        self.timestep = 0.1",
        "detail": "trajectoryTrackerClient",
        "documentation": {
            "value": "\n```python\nfrom trajectoryTrackerClient import TrajectoryTrackerClient\n```\n\n```python\n\n\n```\n\n```python\nclass TrajectoryTrackerClient(MultirotorClient):\n    def __init__(self):        \n        MultirotorClient.__init__(self)\n        MultirotorClient.confirmConnection(self)\n        self.drones_names = [ v for v in utils.g_airsim_settings[\"Vehicles\"] ]\n        self.trajectory = []\n        self.episode = 0\n        self.isTracking = False\n        self.folder_timestamp =str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))\n        self.timestep = 0.1\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "initiate_logger",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                                filemode='w',\n                                format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\n                                datefmt='%H:%M:%S',\n                                level=logging.DEBUG)\n    logger = logging.getLogger('multiAirGym')\n    logger.debug('Experiment Date: {}'.format(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M') ) )\n    return logger\ndef ConvertIfStringIsInt(input_string):",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import initiate_logger\n```\n\n```python\n\n\n```\n\n```python\ndef initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                                filemode='w',\n                                format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\n                                datefmt='%H:%M:%S',\n                                level=logging.DEBUG)\n    logger = logging.getLogger('multiAirGym')\n    logger.debug('Experiment Date: {}'.format(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M') ) )\n    return logger\ndef ConvertIfStringIsInt(input_string):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ConvertIfStringIsInt",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def ConvertIfStringIsInt(input_string):\n    try:\n        float(input_string)\n        try:\n            if int(input_string) == float(input_string):\n                return int(input_string)\n            else:\n                return float(input_string)\n        except ValueError:\n            return float(input_string)",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import ConvertIfStringIsInt\n```\n\n```python\n\n\n```\n\n```python\ndef ConvertIfStringIsInt(input_string):\n    try:\n        float(input_string)\n        try:\n            if int(input_string) == float(input_string):\n                return int(input_string)\n            else:\n                return float(input_string)\n        except ValueError:\n            return float(input_string)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "read_cfg",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def read_cfg(config_filename='configs/map_config.cfg', verbose=False):\n    parser = ConfigParser()\n    parser.optionxform = str\n    parser.read(config_filename)\n    cfg = DotMap()\n    if verbose:\n        hyphens = '-' * int((80 - len(config_filename))/2)\n        print(hyphens + ' ' + config_filename + ' ' + hyphens)\n    for section_name in parser.sections():\n        if verbose:",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import read_cfg\n```\n\n```python\n\n\n```\n\n```python\ndef read_cfg(config_filename='configs/map_config.cfg', verbose=False):\n    parser = ConfigParser()\n    parser.optionxform = str\n    parser.read(config_filename)\n    cfg = DotMap()\n    if verbose:\n        hyphens = '-' * int((80 - len(config_filename))/2)\n        print(hyphens + ' ' + config_filename + ' ' + hyphens)\n    for section_name in parser.sections():\n        if verbose:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "projToAirSim",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n    return proj_coords + (z,)\ndef lonlatToAirSim( lon, lat, z):\n    return projToAirSim(*lonlatToProj(lon, lat, z)   )",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import projToAirSim\n```\n\n```python\n\n\n```\n\n```python\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n    return proj_coords + (z,)\ndef lonlatToAirSim( lon, lat, z):\n    return projToAirSim(*lonlatToProj(lon, lat, z)   )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lonlatToProj",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n    return proj_coords + (z,)\ndef lonlatToAirSim( lon, lat, z):\n    return projToAirSim(*lonlatToProj(lon, lat, z)   )\ndef nedToProj( x, y, z):\n    \"\"\"\n    Converts NED coordinates to the projected map coordinates\n    Takes care of offset origin, inverted z, as well as inverted y axis\n    \"\"\"",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import lonlatToProj\n```\n\n```python\n\n\n```\n\n```python\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n    return proj_coords + (z,)\ndef lonlatToAirSim( lon, lat, z):\n    return projToAirSim(*lonlatToProj(lon, lat, z)   )\ndef nedToProj( x, y, z):\n    \"\"\"\n    Converts NED coordinates to the projected map coordinates\n    Takes care of offset origin, inverted z, as well as inverted y axis\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lonlatToAirSim",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def lonlatToAirSim( lon, lat, z):\n    return projToAirSim(*lonlatToProj(lon, lat, z)   )\ndef nedToProj( x, y, z):\n    \"\"\"\n    Converts NED coordinates to the projected map coordinates\n    Takes care of offset origin, inverted z, as well as inverted y axis\n    \"\"\"\n    x_proj = x + o_x\n    y_proj = -y + o_y\n    z_proj = -z + o_z",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import lonlatToAirSim\n```\n\n```python\n\n\n```\n\n```python\ndef lonlatToAirSim( lon, lat, z):\n    return projToAirSim(*lonlatToProj(lon, lat, z)   )\ndef nedToProj( x, y, z):\n    \"\"\"\n    Converts NED coordinates to the projected map coordinates\n    Takes care of offset origin, inverted z, as well as inverted y axis\n    \"\"\"\n    x_proj = x + o_x\n    y_proj = -y + o_y\n    z_proj = -z + o_z\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "nedToProj",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def nedToProj( x, y, z):\n    \"\"\"\n    Converts NED coordinates to the projected map coordinates\n    Takes care of offset origin, inverted z, as well as inverted y axis\n    \"\"\"\n    x_proj = x + o_x\n    y_proj = -y + o_y\n    z_proj = -z + o_z\n    return (x_proj, y_proj, z_proj)\ndef nedToGps( x, y, z):",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import nedToProj\n```\n\n```python\n\n\n```\n\n```python\ndef nedToProj( x, y, z):\n    \"\"\"\n    Converts NED coordinates to the projected map coordinates\n    Takes care of offset origin, inverted z, as well as inverted y axis\n    \"\"\"\n    x_proj = x + o_x\n    y_proj = -y + o_y\n    z_proj = -z + o_z\n    return (x_proj, y_proj, z_proj)\ndef nedToGps( x, y, z):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "nedToGps",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def nedToGps( x, y, z):\n    return lonlatToProj(* nedToProj(x, y, z), inverse=True)\ndef dronePrint(idx,s):\n    print(\"[Drone\"+str(idx)+\"]\",s)\ndef addToDict(d: dict,k,v):\n    if k not in d:\n        d[k] = []\n    d[k].append(v)\ndef pkl_save_obj(obj, name,file_timestamp ):\n    with open(TRAJECTORIES_FOLDER + name + file_timestamp + '.pkl', 'wb') as f:",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import nedToGps\n```\n\n```python\n\n\n```\n\n```python\ndef nedToGps( x, y, z):\n    return lonlatToProj(* nedToProj(x, y, z), inverse=True)\ndef dronePrint(idx,s):\n    print(\"[Drone\"+str(idx)+\"]\",s)\ndef addToDict(d: dict,k,v):\n    if k not in d:\n        d[k] = []\n    d[k].append(v)\ndef pkl_save_obj(obj, name,file_timestamp ):\n    with open(TRAJECTORIES_FOLDER + name + file_timestamp + '.pkl', 'wb') as f:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dronePrint",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def dronePrint(idx,s):\n    print(\"[Drone\"+str(idx)+\"]\",s)\ndef addToDict(d: dict,k,v):\n    if k not in d:\n        d[k] = []\n    d[k].append(v)\ndef pkl_save_obj(obj, name,file_timestamp ):\n    with open(TRAJECTORIES_FOLDER + name + file_timestamp + '.pkl', 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\ndef pkl_load_obj(name=None,file_timestamp=None,filename=None):",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import dronePrint\n```\n\n```python\n\n\n```\n\n```python\ndef dronePrint(idx,s):\n    print(\"[Drone\"+str(idx)+\"]\",s)\ndef addToDict(d: dict,k,v):\n    if k not in d:\n        d[k] = []\n    d[k].append(v)\ndef pkl_save_obj(obj, name,file_timestamp ):\n    with open(TRAJECTORIES_FOLDER + name + file_timestamp + '.pkl', 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\ndef pkl_load_obj(name=None,file_timestamp=None,filename=None):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "addToDict",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def addToDict(d: dict,k,v):\n    if k not in d:\n        d[k] = []\n    d[k].append(v)\ndef pkl_save_obj(obj, name,file_timestamp ):\n    with open(TRAJECTORIES_FOLDER + name + file_timestamp + '.pkl', 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\ndef pkl_load_obj(name=None,file_timestamp=None,filename=None):\n    if filename:\n        with open(TRAJECTORIES_FOLDER +filename, 'rb') as f:",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import addToDict\n```\n\n```python\n\n\n```\n\n```python\ndef addToDict(d: dict,k,v):\n    if k not in d:\n        d[k] = []\n    d[k].append(v)\ndef pkl_save_obj(obj, name,file_timestamp ):\n    with open(TRAJECTORIES_FOLDER + name + file_timestamp + '.pkl', 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\ndef pkl_load_obj(name=None,file_timestamp=None,filename=None):\n    if filename:\n        with open(TRAJECTORIES_FOLDER +filename, 'rb') as f:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pkl_save_obj",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def pkl_save_obj(obj, name,file_timestamp ):\n    with open(TRAJECTORIES_FOLDER + name + file_timestamp + '.pkl', 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\ndef pkl_load_obj(name=None,file_timestamp=None,filename=None):\n    if filename:\n        with open(TRAJECTORIES_FOLDER +filename, 'rb') as f:\n            return pickle.load(f)\n    elif name and file_timestamp:\n        with open(TRAJECTORIES_FOLDER + name + file_timestamp+ '.pkl', 'rb') as f:\n            return pickle.load(f)",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import pkl_save_obj\n```\n\n```python\n\n\n```\n\n```python\ndef pkl_save_obj(obj, name,file_timestamp ):\n    with open(TRAJECTORIES_FOLDER + name + file_timestamp + '.pkl', 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\ndef pkl_load_obj(name=None,file_timestamp=None,filename=None):\n    if filename:\n        with open(TRAJECTORIES_FOLDER +filename, 'rb') as f:\n            return pickle.load(f)\n    elif name and file_timestamp:\n        with open(TRAJECTORIES_FOLDER + name + file_timestamp+ '.pkl', 'rb') as f:\n            return pickle.load(f)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pkl_load_obj",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def pkl_load_obj(name=None,file_timestamp=None,filename=None):\n    if filename:\n        with open(TRAJECTORIES_FOLDER +filename, 'rb') as f:\n            return pickle.load(f)\n    elif name and file_timestamp:\n        with open(TRAJECTORIES_FOLDER + name + file_timestamp+ '.pkl', 'rb') as f:\n            return pickle.load(f)\n    else:\n        raise Exception(\"Specify file name\")\ndef numpy_save(arr,folder_timestamp,filename):",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import pkl_load_obj\n```\n\n```python\n\n\n```\n\n```python\ndef pkl_load_obj(name=None,file_timestamp=None,filename=None):\n    if filename:\n        with open(TRAJECTORIES_FOLDER +filename, 'rb') as f:\n            return pickle.load(f)\n    elif name and file_timestamp:\n        with open(TRAJECTORIES_FOLDER + name + file_timestamp+ '.pkl', 'rb') as f:\n            return pickle.load(f)\n    else:\n        raise Exception(\"Specify file name\")\ndef numpy_save(arr,folder_timestamp,filename):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "numpy_save",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def numpy_save(arr,folder_timestamp,filename):\n    file_path = TRAJECTORIES_FOLDER+\"trajectories_\"+folder_timestamp\n    if not os.path.exists(file_path):\n        os.makedirs(file_path)\n    data = np.asarray(arr)\n    # save to npy file\n    print(\"Saving\",os.path.join(file_path, filename))\n    np.save(os.path.join(file_path, filename) , data)\ndef position_to_list(position_vector) -> list:\n    return [position_vector.x_val, position_vector.y_val, position_vector.z_val]",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import numpy_save\n```\n\n```python\n\n\n```\n\n```python\ndef numpy_save(arr,folder_timestamp,filename):\n    file_path = TRAJECTORIES_FOLDER+\"trajectories_\"+folder_timestamp\n    if not os.path.exists(file_path):\n        os.makedirs(file_path)\n    data = np.asarray(arr)\n    # save to npy file\n    print(\"Saving\",os.path.join(file_path, filename))\n    np.save(os.path.join(file_path, filename) , data)\ndef position_to_list(position_vector) -> list:\n    return [position_vector.x_val, position_vector.y_val, position_vector.z_val]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "position_to_list",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def position_to_list(position_vector) -> list:\n    return [position_vector.x_val, position_vector.y_val, position_vector.z_val]\ndef list_to_position(l) -> Vector3r:\n    if len(l) != 3:\n        raise Exception(\"REQUIRED EXACTLY 3 elements\")\n    return Vector3r(l[0],l[1],l[2])\ndef set_offset_position(pos):\n    _v = g_vehicles[\"Drone0\"]\n    _offset_x = _v[\"X\"] \n    _offset_y = _v[\"Y\"]",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import position_to_list\n```\n\n```python\n\n\n```\n\n```python\ndef position_to_list(position_vector) -> list:\n    return [position_vector.x_val, position_vector.y_val, position_vector.z_val]\ndef list_to_position(l) -> Vector3r:\n    if len(l) != 3:\n        raise Exception(\"REQUIRED EXACTLY 3 elements\")\n    return Vector3r(l[0],l[1],l[2])\ndef set_offset_position(pos):\n    _v = g_vehicles[\"Drone0\"]\n    _offset_x = _v[\"X\"] \n    _offset_y = _v[\"Y\"]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "list_to_position",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def list_to_position(l) -> Vector3r:\n    if len(l) != 3:\n        raise Exception(\"REQUIRED EXACTLY 3 elements\")\n    return Vector3r(l[0],l[1],l[2])\ndef set_offset_position(pos):\n    _v = g_vehicles[\"Drone0\"]\n    _offset_x = _v[\"X\"] \n    _offset_y = _v[\"Y\"]\n    _offset_z = _v[\"Z\"]\n    pos.x_val += _offset_x",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import list_to_position\n```\n\n```python\n\n\n```\n\n```python\ndef list_to_position(l) -> Vector3r:\n    if len(l) != 3:\n        raise Exception(\"REQUIRED EXACTLY 3 elements\")\n    return Vector3r(l[0],l[1],l[2])\ndef set_offset_position(pos):\n    _v = g_vehicles[\"Drone0\"]\n    _offset_x = _v[\"X\"] \n    _offset_y = _v[\"Y\"]\n    _offset_z = _v[\"Z\"]\n    pos.x_val += _offset_x\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "set_offset_position",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def set_offset_position(pos):\n    _v = g_vehicles[\"Drone0\"]\n    _offset_x = _v[\"X\"] \n    _offset_y = _v[\"Y\"]\n    _offset_z = _v[\"Z\"]\n    pos.x_val += _offset_x\n    pos.y_val += _offset_y\n    pos.z_val += _offset_z\ndef _colorize(idx): \n    if idx == 0:",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import set_offset_position\n```\n\n```python\n\n\n```\n\n```python\ndef set_offset_position(pos):\n    _v = g_vehicles[\"Drone0\"]\n    _offset_x = _v[\"X\"] \n    _offset_y = _v[\"Y\"]\n    _offset_z = _v[\"Z\"]\n    pos.x_val += _offset_x\n    pos.y_val += _offset_y\n    pos.z_val += _offset_z\ndef _colorize(idx): \n    if idx == 0:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "xy_distance",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def xy_distance(point1, point2):\n    if type(point1) == Vector3r:\n        point1 = [point1.x_val,point1.y_val] \n    if type(point2) == Vector3r:\n        point2 = [point2.x_val,point2.y_val] \n    return   np.linalg.norm(point1 - point2)",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import xy_distance\n```\n\n```python\n\n\n```\n\n```python\ndef xy_distance(point1, point2):\n    if type(point1) == Vector3r:\n        point1 = [point1.x_val,point1.y_val] \n    if type(point2) == Vector3r:\n        point2 = [point2.x_val,point2.y_val] \n    return   np.linalg.norm(point1 - point2)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AIRSIM_SETTINGS_FOLDER",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "AIRSIM_SETTINGS_FOLDER = 'C:/Users/gioca/OneDrive/Documents/Airsim/'\nCONFIGS_FOLDER = \"./configs/\"\nLOG_FOLDER = \"./logs/\"\nTRAJECTORIES_FOLDER = \"./trajectories/\"\nwith open(AIRSIM_SETTINGS_FOLDER + 'settings.json', 'r') as jsonFile:\n    g_airsim_settings = json.load(jsonFile)\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import AIRSIM_SETTINGS_FOLDER\n```\n\n```python\n\n\n```\n\n```python\nAIRSIM_SETTINGS_FOLDER = 'C:/Users/gioca/OneDrive/Documents/Airsim/'\nCONFIGS_FOLDER = \"./configs/\"\nLOG_FOLDER = \"./logs/\"\nTRAJECTORIES_FOLDER = \"./trajectories/\"\nwith open(AIRSIM_SETTINGS_FOLDER + 'settings.json', 'r') as jsonFile:\n    g_airsim_settings = json.load(jsonFile)\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CONFIGS_FOLDER",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "CONFIGS_FOLDER = \"./configs/\"\nLOG_FOLDER = \"./logs/\"\nTRAJECTORIES_FOLDER = \"./trajectories/\"\nwith open(AIRSIM_SETTINGS_FOLDER + 'settings.json', 'r') as jsonFile:\n    g_airsim_settings = json.load(jsonFile)\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import CONFIGS_FOLDER\n```\n\n```python\n\n\n```\n\n```python\nCONFIGS_FOLDER = \"./configs/\"\nLOG_FOLDER = \"./logs/\"\nTRAJECTORIES_FOLDER = \"./trajectories/\"\nwith open(AIRSIM_SETTINGS_FOLDER + 'settings.json', 'r') as jsonFile:\n    g_airsim_settings = json.load(jsonFile)\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LOG_FOLDER",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "LOG_FOLDER = \"./logs/\"\nTRAJECTORIES_FOLDER = \"./trajectories/\"\nwith open(AIRSIM_SETTINGS_FOLDER + 'settings.json', 'r') as jsonFile:\n    g_airsim_settings = json.load(jsonFile)\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import LOG_FOLDER\n```\n\n```python\n\n\n```\n\n```python\nLOG_FOLDER = \"./logs/\"\nTRAJECTORIES_FOLDER = \"./trajectories/\"\nwith open(AIRSIM_SETTINGS_FOLDER + 'settings.json', 'r') as jsonFile:\n    g_airsim_settings = json.load(jsonFile)\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TRAJECTORIES_FOLDER",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "TRAJECTORIES_FOLDER = \"./trajectories/\"\nwith open(AIRSIM_SETTINGS_FOLDER + 'settings.json', 'r') as jsonFile:\n    g_airsim_settings = json.load(jsonFile)\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import TRAJECTORIES_FOLDER\n```\n\n```python\n\n\n```\n\n```python\nTRAJECTORIES_FOLDER = \"./trajectories/\"\nwith open(AIRSIM_SETTINGS_FOLDER + 'settings.json', 'r') as jsonFile:\n    g_airsim_settings = json.load(jsonFile)\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "g_vehicles",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "g_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import g_vehicles\n```\n\n```python\n\n\n```\n\n```python\ng_vehicles = g_airsim_settings[\"Vehicles\"]\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "g_config",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "g_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n    12.466382,",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import g_config\n```\n\n```python\n\n\n```\n\n```python\ng_config = ConfigParser()\ng_config.read(CONFIGS_FOLDER + 'config.ini')\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n    12.466382,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "map_filename",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "map_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n    12.466382,\n    41.902491,\n    80) ",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import map_filename\n```\n\n```python\n\n\n```\n\n```python\nmap_filename = \"overlayMap.png\"\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n    12.466382,\n    41.902491,\n    80) \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRID",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "SRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n    12.466382,\n    41.902491,\n    80) \nNEW_TRAJ_PENALTY = 25 # negative reward for collision points of a new trajectory",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import SRID\n```\n\n```python\n\n\n```\n\n```python\nSRID = \"EPSG:5555\"\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n    12.466382,\n    41.902491,\n    80) \nNEW_TRAJ_PENALTY = 25 # negative reward for collision points of a new trajectory\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ORIGIN",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "ORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n    12.466382,\n    41.902491,\n    80) \nNEW_TRAJ_PENALTY = 25 # negative reward for collision points of a new trajectory\n# GPS init position of uavs",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import ORIGIN\n```\n\n```python\n\n\n```\n\n```python\nORIGIN = (\n    12.457480,\n    41.902243,\n    0 )\nDEST = (\n    12.466382,\n    41.902491,\n    80) \nNEW_TRAJ_PENALTY = 25 # negative reward for collision points of a new trajectory\n# GPS init position of uavs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DEST",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "DEST = (\n    12.466382,\n    41.902491,\n    80) \nNEW_TRAJ_PENALTY = 25 # negative reward for collision points of a new trajectory\n# GPS init position of uavs\ninit_gps = [\n    (\n        12.45727300643921,\n        41.90169011784915,",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import DEST\n```\n\n```python\n\n\n```\n\n```python\nDEST = (\n    12.466382,\n    41.902491,\n    80) \nNEW_TRAJ_PENALTY = 25 # negative reward for collision points of a new trajectory\n# GPS init position of uavs\ninit_gps = [\n    (\n        12.45727300643921,\n        41.90169011784915,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NEW_TRAJ_PENALTY",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "NEW_TRAJ_PENALTY = 25 # negative reward for collision points of a new trajectory\n# GPS init position of uavs\ninit_gps = [\n    (\n        12.45727300643921,\n        41.90169011784915,\n        0\n    ),\n    (\n        12.457227408885958,",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import NEW_TRAJ_PENALTY\n```\n\n```python\n\n\n```\n\n```python\nNEW_TRAJ_PENALTY = 25 # negative reward for collision points of a new trajectory\n# GPS init position of uavs\ninit_gps = [\n    (\n        12.45727300643921,\n        41.90169011784915,\n        0\n    ),\n    (\n        12.457227408885958,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "init_gps",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "init_gps = [\n    (\n        12.45727300643921,\n        41.90169011784915,\n        0\n    ),\n    (\n        12.457227408885958,\n        41.90276414312537,\n        0",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import init_gps\n```\n\n```python\n\n\n```\n\n```python\ninit_gps = [\n    (\n        12.45727300643921,\n        41.90169011784915,\n        0\n    ),\n    (\n        12.457227408885958,\n        41.90276414312537,\n        0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "red_color",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "red_color = [1.0,0.0,0.0]\ngreen_color = [0.0,1.0,0.0]\nblue_color = [0.0,0.0,1.0]\ndef initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                                filemode='w',\n                                format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\n                                datefmt='%H:%M:%S',\n                                level=logging.DEBUG)\n    logger = logging.getLogger('multiAirGym')",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import red_color\n```\n\n```python\n\n\n```\n\n```python\nred_color = [1.0,0.0,0.0]\ngreen_color = [0.0,1.0,0.0]\nblue_color = [0.0,0.0,1.0]\ndef initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                                filemode='w',\n                                format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\n                                datefmt='%H:%M:%S',\n                                level=logging.DEBUG)\n    logger = logging.getLogger('multiAirGym')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "green_color",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "green_color = [0.0,1.0,0.0]\nblue_color = [0.0,0.0,1.0]\ndef initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                                filemode='w',\n                                format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\n                                datefmt='%H:%M:%S',\n                                level=logging.DEBUG)\n    logger = logging.getLogger('multiAirGym')\n    logger.debug('Experiment Date: {}'.format(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M') ) )",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import green_color\n```\n\n```python\n\n\n```\n\n```python\ngreen_color = [0.0,1.0,0.0]\nblue_color = [0.0,0.0,1.0]\ndef initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                                filemode='w',\n                                format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\n                                datefmt='%H:%M:%S',\n                                level=logging.DEBUG)\n    logger = logging.getLogger('multiAirGym')\n    logger.debug('Experiment Date: {}'.format(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M') ) )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "blue_color",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "blue_color = [0.0,0.0,1.0]\ndef initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                                filemode='w',\n                                format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\n                                datefmt='%H:%M:%S',\n                                level=logging.DEBUG)\n    logger = logging.getLogger('multiAirGym')\n    logger.debug('Experiment Date: {}'.format(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M') ) )\n    return logger",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import blue_color\n```\n\n```python\n\n\n```\n\n```python\nblue_color = [0.0,0.0,1.0]\ndef initiate_logger():\n    logging.basicConfig(filename=LOG_FOLDER+\"log\"+str(datetime.datetime.now().strftime('%Y-%m-%d--%H-%M'))+\".txt\",\n                                filemode='w',\n                                format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\n                                datefmt='%H:%M:%S',\n                                level=logging.DEBUG)\n    logger = logging.getLogger('multiAirGym')\n    logger.debug('Experiment Date: {}'.format(datetime.datetime.now().strftime('%Y-%m-%d  %H:%M') ) )\n    return logger\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "env_cfg",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "env_cfg = read_cfg(config_filename = CONFIGS_FOLDER + 'map_config.cfg')\no_x = env_cfg[\"o_x\"]\no_y = env_cfg[\"o_y\"]\no_z = env_cfg[\"o_z\"]\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import env_cfg\n```\n\n```python\n\n\n```\n\n```python\nenv_cfg = read_cfg(config_filename = CONFIGS_FOLDER + 'map_config.cfg')\no_x = env_cfg[\"o_x\"]\no_y = env_cfg[\"o_y\"]\no_z = env_cfg[\"o_z\"]\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "o_x",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "o_x = env_cfg[\"o_x\"]\no_y = env_cfg[\"o_y\"]\no_z = env_cfg[\"o_z\"]\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import o_x\n```\n\n```python\n\n\n```\n\n```python\no_x = env_cfg[\"o_x\"]\no_y = env_cfg[\"o_y\"]\no_z = env_cfg[\"o_z\"]\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "o_y",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "o_y = env_cfg[\"o_y\"]\no_z = env_cfg[\"o_z\"]\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n    return proj_coords + (z,)",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import o_y\n```\n\n```python\n\n\n```\n\n```python\no_y = env_cfg[\"o_y\"]\no_z = env_cfg[\"o_z\"]\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n    return proj_coords + (z,)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "o_z",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "o_z = env_cfg[\"o_z\"]\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n    return proj_coords + (z,)\ndef lonlatToAirSim( lon, lat, z):",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import o_z\n```\n\n```python\n\n\n```\n\n```python\no_z = env_cfg[\"o_z\"]\ndef projToAirSim( x, y, z):\n    x_airsim = (x + o_x ) \n    y_airsim = (y - o_y) \n    z_airsim = (-z + o_z) \n    return (x_airsim, -y_airsim, z_airsim)\ndef lonlatToProj( lon, lat, z, inverse=False):\n    proj_coords = Proj(init=SRID)(lon, lat, inverse=inverse)\n    return proj_coords + (z,)\ndef lonlatToAirSim( lon, lat, z):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "distance = lambda p1, p2: np.norm(p1-p2)\ndef xy_distance(point1, point2):\n    if type(point1) == Vector3r:\n        point1 = [point1.x_val,point1.y_val] \n    if type(point2) == Vector3r:\n        point2 = [point2.x_val,point2.y_val] \n    return   np.linalg.norm(point1 - point2)",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import distance\n```\n\n```python\n\n\n```\n\n```python\ndistance = lambda p1, p2: np.norm(p1-p2)\ndef xy_distance(point1, point2):\n    if type(point1) == Vector3r:\n        point1 = [point1.x_val,point1.y_val] \n    if type(point2) == Vector3r:\n        point2 = [point2.x_val,point2.y_val] \n    return   np.linalg.norm(point1 - point2)\n```\n",
            "supportThemeIcons": false
        }
    }
]