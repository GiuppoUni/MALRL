[
    {
        "label": "setup_path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "setup_path",
        "description": "setup_path",
        "detail": "setup_path",
        "documentation": {
            "value": "\n```python\nimport setup_path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "airsim",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "airsim",
        "description": "airsim",
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Vector3r",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Quaternionr",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Pose",
        "importPath": "airsim",
        "description": "airsim",
        "isExtraImport": true,
        "detail": "airsim",
        "documentation": {
            "value": "\n```python\nimport airsim\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {
            "value": "\n```python\nimport sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {
            "value": "\n```python\nimport time\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {
            "value": "\n```python\nimport threading\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {
            "value": "\n```python\nimport signal\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {
            "value": "\n```python\nimport argparse\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {
            "value": "\n```python\nimport argparse\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {
            "value": "\n```python\nimport numpy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {
            "value": "\n```python\nimport math\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Value",
        "importPath": "cntk.core",
        "description": "cntk.core",
        "isExtraImport": true,
        "detail": "cntk.core",
        "documentation": {
            "value": "\n```python\nimport cntk.core\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "he_uniform",
        "importPath": "cntk.initializer",
        "description": "cntk.initializer",
        "isExtraImport": true,
        "detail": "cntk.initializer",
        "documentation": {
            "value": "\n```python\nimport cntk.initializer\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Sequential",
        "importPath": "cntk.layers",
        "description": "cntk.layers",
        "isExtraImport": true,
        "detail": "cntk.layers",
        "documentation": {
            "value": "\n```python\nimport cntk.layers\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Convolution2D",
        "importPath": "cntk.layers",
        "description": "cntk.layers",
        "isExtraImport": true,
        "detail": "cntk.layers",
        "documentation": {
            "value": "\n```python\nimport cntk.layers\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Dense",
        "importPath": "cntk.layers",
        "description": "cntk.layers",
        "isExtraImport": true,
        "detail": "cntk.layers",
        "documentation": {
            "value": "\n```python\nimport cntk.layers\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "default_options",
        "importPath": "cntk.layers",
        "description": "cntk.layers",
        "isExtraImport": true,
        "detail": "cntk.layers",
        "documentation": {
            "value": "\n```python\nimport cntk.layers\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Signature",
        "importPath": "cntk.layers.typing",
        "description": "cntk.layers.typing",
        "isExtraImport": true,
        "detail": "cntk.layers.typing",
        "documentation": {
            "value": "\n```python\nimport cntk.layers.typing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Tensor",
        "importPath": "cntk.layers.typing",
        "description": "cntk.layers.typing",
        "isExtraImport": true,
        "detail": "cntk.layers.typing",
        "documentation": {
            "value": "\n```python\nimport cntk.layers.typing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "adam",
        "importPath": "cntk.learners",
        "description": "cntk.learners",
        "isExtraImport": true,
        "detail": "cntk.learners",
        "documentation": {
            "value": "\n```python\nimport cntk.learners\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "learning_rate_schedule",
        "importPath": "cntk.learners",
        "description": "cntk.learners",
        "isExtraImport": true,
        "detail": "cntk.learners",
        "documentation": {
            "value": "\n```python\nimport cntk.learners\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "momentum_schedule",
        "importPath": "cntk.learners",
        "description": "cntk.learners",
        "isExtraImport": true,
        "detail": "cntk.learners",
        "documentation": {
            "value": "\n```python\nimport cntk.learners\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UnitType",
        "importPath": "cntk.learners",
        "description": "cntk.learners",
        "isExtraImport": true,
        "detail": "cntk.learners",
        "documentation": {
            "value": "\n```python\nimport cntk.learners\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TensorBoardProgressWriter",
        "importPath": "cntk.logging",
        "description": "cntk.logging",
        "isExtraImport": true,
        "detail": "cntk.logging",
        "documentation": {
            "value": "\n```python\nimport cntk.logging\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "abs",
        "importPath": "cntk.ops",
        "description": "cntk.ops",
        "isExtraImport": true,
        "detail": "cntk.ops",
        "documentation": {
            "value": "\n```python\nimport cntk.ops\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "argmax",
        "importPath": "cntk.ops",
        "description": "cntk.ops",
        "isExtraImport": true,
        "detail": "cntk.ops",
        "documentation": {
            "value": "\n```python\nimport cntk.ops\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "element_select",
        "importPath": "cntk.ops",
        "description": "cntk.ops",
        "isExtraImport": true,
        "detail": "cntk.ops",
        "documentation": {
            "value": "\n```python\nimport cntk.ops\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "less",
        "importPath": "cntk.ops",
        "description": "cntk.ops",
        "isExtraImport": true,
        "detail": "cntk.ops",
        "documentation": {
            "value": "\n```python\nimport cntk.ops\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "relu",
        "importPath": "cntk.ops",
        "description": "cntk.ops",
        "isExtraImport": true,
        "detail": "cntk.ops",
        "documentation": {
            "value": "\n```python\nimport cntk.ops\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "reduce_max",
        "importPath": "cntk.ops",
        "description": "cntk.ops",
        "isExtraImport": true,
        "detail": "cntk.ops",
        "documentation": {
            "value": "\n```python\nimport cntk.ops\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "reduce_sum",
        "importPath": "cntk.ops",
        "description": "cntk.ops",
        "isExtraImport": true,
        "detail": "cntk.ops",
        "documentation": {
            "value": "\n```python\nimport cntk.ops\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "square",
        "importPath": "cntk.ops",
        "description": "cntk.ops",
        "isExtraImport": true,
        "detail": "cntk.ops",
        "documentation": {
            "value": "\n```python\nimport cntk.ops\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CloneMethod",
        "importPath": "cntk.ops.functions",
        "description": "cntk.ops.functions",
        "isExtraImport": true,
        "detail": "cntk.ops.functions",
        "documentation": {
            "value": "\n```python\nimport cntk.ops.functions\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Function",
        "importPath": "cntk.ops.functions",
        "description": "cntk.ops.functions",
        "isExtraImport": true,
        "detail": "cntk.ops.functions",
        "documentation": {
            "value": "\n```python\nimport cntk.ops.functions\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Trainer",
        "importPath": "cntk.train",
        "description": "cntk.train",
        "isExtraImport": true,
        "detail": "cntk.train",
        "documentation": {
            "value": "\n```python\nimport cntk.train\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {
            "value": "\n```python\nimport csv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {
            "value": "\n```python\nimport pprint\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {
            "value": "\n```python\nimport tempfile\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {
            "value": "\n```python\nimport cv2\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {
            "value": "\n```python\nimport datetime\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "rospy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "rospy",
        "description": "rospy",
        "detail": "rospy",
        "documentation": {
            "value": "\n```python\nimport rospy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Image",
        "importPath": "sensor_msgs.msg",
        "description": "sensor_msgs.msg",
        "isExtraImport": true,
        "detail": "sensor_msgs.msg",
        "documentation": {
            "value": "\n```python\nimport sensor_msgs.msg\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CameraInfo",
        "importPath": "sensor_msgs.msg",
        "description": "sensor_msgs.msg",
        "isExtraImport": true,
        "detail": "sensor_msgs.msg",
        "documentation": {
            "value": "\n```python\nimport sensor_msgs.msg\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TFMessage",
        "importPath": "tf2_msgs.msg",
        "description": "tf2_msgs.msg",
        "isExtraImport": true,
        "detail": "tf2_msgs.msg",
        "documentation": {
            "value": "\n```python\nimport tf2_msgs.msg\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TransformStamped",
        "importPath": "geometry_msgs.msg",
        "description": "geometry_msgs.msg",
        "isExtraImport": true,
        "detail": "geometry_msgs.msg",
        "documentation": {
            "value": "\n```python\nimport geometry_msgs.msg\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CvBridge",
        "importPath": "cv_bridge",
        "description": "cv_bridge",
        "isExtraImport": true,
        "detail": "cv_bridge",
        "documentation": {
            "value": "\n```python\nimport cv_bridge\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "to_quaternion",
        "importPath": "airsim.utils",
        "description": "airsim.utils",
        "isExtraImport": true,
        "detail": "airsim.utils",
        "documentation": {
            "value": "\n```python\nimport airsim.utils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os,sys,logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.sys.logging",
        "description": "os.sys.logging",
        "detail": "os.sys.logging",
        "documentation": {
            "value": "\n```python\nimport os.sys.logging\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "arm",
        "description": "arm",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.armDisarm(True)",
        "detail": "arm",
        "documentation": {
            "value": "\n```python\nfrom arm import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.armDisarm(True)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nprint(\"Flying a small square box using moveByVelocityZ\")\n# AirSim uses NED coordinates so negative axis is up.\n# z of -7 is 7 meters above the original launch point.\nz = -7\n# Fly given velocity vector for 5 seconds",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nprint(\"Flying a small square box using moveByVelocityZ\")\n# AirSim uses NED coordinates so negative axis is up.\n# z of -7 is 7 meters above the original launch point.\nz = -7\n# Fly given velocity vector for 5 seconds\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "z = -7\n# Fly given velocity vector for 5 seconds\nduration = 5\nspeed = 1\ndelay = duration * speed\n# using airsim.DrivetrainType.MaxDegreeOfFreedom means we can control the drone yaw independently\n# from the direction the drone is flying.  I've set values here that make the drone always point inwards\n# towards the inside of the box (which would be handy if you are building a 3d scan of an object in the real world).\nvx = speed\nvy = 0",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import z\n```\n\n```python\n\n\n```\n\n```python\nz = -7\n# Fly given velocity vector for 5 seconds\nduration = 5\nspeed = 1\ndelay = duration * speed\n# using airsim.DrivetrainType.MaxDegreeOfFreedom means we can control the drone yaw independently\n# from the direction the drone is flying.  I've set values here that make the drone always point inwards\n# towards the inside of the box (which would be handy if you are building a 3d scan of an object in the real world).\nvx = speed\nvy = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "duration",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "duration = 5\nspeed = 1\ndelay = duration * speed\n# using airsim.DrivetrainType.MaxDegreeOfFreedom means we can control the drone yaw independently\n# from the direction the drone is flying.  I've set values here that make the drone always point inwards\n# towards the inside of the box (which would be handy if you are building a 3d scan of an object in the real world).\nvx = speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=90\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 90)).join()",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import duration\n```\n\n```python\n\n\n```\n\n```python\nduration = 5\nspeed = 1\ndelay = duration * speed\n# using airsim.DrivetrainType.MaxDegreeOfFreedom means we can control the drone yaw independently\n# from the direction the drone is flying.  I've set values here that make the drone always point inwards\n# towards the inside of the box (which would be handy if you are building a 3d scan of an object in the real world).\nvx = speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=90\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 90)).join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "speed",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "speed = 1\ndelay = duration * speed\n# using airsim.DrivetrainType.MaxDegreeOfFreedom means we can control the drone yaw independently\n# from the direction the drone is flying.  I've set values here that make the drone always point inwards\n# towards the inside of the box (which would be handy if you are building a 3d scan of an object in the real world).\nvx = speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=90\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 90)).join()\ntime.sleep(delay)",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import speed\n```\n\n```python\n\n\n```\n\n```python\nspeed = 1\ndelay = duration * speed\n# using airsim.DrivetrainType.MaxDegreeOfFreedom means we can control the drone yaw independently\n# from the direction the drone is flying.  I've set values here that make the drone always point inwards\n# towards the inside of the box (which would be handy if you are building a 3d scan of an object in the real world).\nvx = speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=90\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 90)).join()\ntime.sleep(delay)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "delay",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "delay = duration * speed\n# using airsim.DrivetrainType.MaxDegreeOfFreedom means we can control the drone yaw independently\n# from the direction the drone is flying.  I've set values here that make the drone always point inwards\n# towards the inside of the box (which would be handy if you are building a 3d scan of an object in the real world).\nvx = speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=90\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 90)).join()\ntime.sleep(delay)\nvx = 0",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import delay\n```\n\n```python\n\n\n```\n\n```python\ndelay = duration * speed\n# using airsim.DrivetrainType.MaxDegreeOfFreedom means we can control the drone yaw independently\n# from the direction the drone is flying.  I've set values here that make the drone always point inwards\n# towards the inside of the box (which would be handy if you are building a 3d scan of an object in the real world).\nvx = speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=90\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 90)).join()\ntime.sleep(delay)\nvx = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vx",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "vx = speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=90\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 90)).join()\ntime.sleep(delay)\nvx = 0\nvy = speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=180\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 180)).join()\ntime.sleep(delay)",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import vx\n```\n\n```python\n\n\n```\n\n```python\nvx = speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=90\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 90)).join()\ntime.sleep(delay)\nvx = 0\nvy = speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=180\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 180)).join()\ntime.sleep(delay)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vy",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "vy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=90\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 90)).join()\ntime.sleep(delay)\nvx = 0\nvy = speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=180\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 180)).join()\ntime.sleep(delay)\nvx = -speed",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import vy\n```\n\n```python\n\n\n```\n\n```python\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=90\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 90)).join()\ntime.sleep(delay)\nvx = 0\nvy = speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=180\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 180)).join()\ntime.sleep(delay)\nvx = -speed\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vx",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "vx = 0\nvy = speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=180\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 180)).join()\ntime.sleep(delay)\nvx = -speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=270\")\nclient.moveByVelocityZAsync(vx, vy, z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 270)).join()\ntime.sleep(delay)",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import vx\n```\n\n```python\n\n\n```\n\n```python\nvx = 0\nvy = speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=180\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 180)).join()\ntime.sleep(delay)\nvx = -speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=270\")\nclient.moveByVelocityZAsync(vx, vy, z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 270)).join()\ntime.sleep(delay)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vy",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "vy = speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=180\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 180)).join()\ntime.sleep(delay)\nvx = -speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=270\")\nclient.moveByVelocityZAsync(vx, vy, z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 270)).join()\ntime.sleep(delay)\nvx = 0",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import vy\n```\n\n```python\n\n\n```\n\n```python\nvy = speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=180\")\nclient.moveByVelocityZAsync(vx,vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 180)).join()\ntime.sleep(delay)\nvx = -speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=270\")\nclient.moveByVelocityZAsync(vx, vy, z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 270)).join()\ntime.sleep(delay)\nvx = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vx",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "vx = -speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=270\")\nclient.moveByVelocityZAsync(vx, vy, z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 270)).join()\ntime.sleep(delay)\nvx = 0\nvy = -speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=0\")\nclient.moveByVelocityZAsync(vx, vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 0)).join()\ntime.sleep(delay)",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import vx\n```\n\n```python\n\n\n```\n\n```python\nvx = -speed\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=270\")\nclient.moveByVelocityZAsync(vx, vy, z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 270)).join()\ntime.sleep(delay)\nvx = 0\nvy = -speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=0\")\nclient.moveByVelocityZAsync(vx, vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 0)).join()\ntime.sleep(delay)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vy",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "vy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=270\")\nclient.moveByVelocityZAsync(vx, vy, z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 270)).join()\ntime.sleep(delay)\nvx = 0\nvy = -speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=0\")\nclient.moveByVelocityZAsync(vx, vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 0)).join()\ntime.sleep(delay)\nclient.hoverAsync().join()",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import vy\n```\n\n```python\n\n\n```\n\n```python\nvy = 0\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy)+ \", yaw=270\")\nclient.moveByVelocityZAsync(vx, vy, z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 270)).join()\ntime.sleep(delay)\nvx = 0\nvy = -speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=0\")\nclient.moveByVelocityZAsync(vx, vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 0)).join()\ntime.sleep(delay)\nclient.hoverAsync().join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vx",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "vx = 0\nvy = -speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=0\")\nclient.moveByVelocityZAsync(vx, vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 0)).join()\ntime.sleep(delay)\nclient.hoverAsync().join()\nclient.landAsync().join()",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import vx\n```\n\n```python\n\n\n```\n\n```python\nvx = 0\nvy = -speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=0\")\nclient.moveByVelocityZAsync(vx, vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 0)).join()\ntime.sleep(delay)\nclient.hoverAsync().join()\nclient.landAsync().join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vy",
        "kind": 5,
        "importPath": "box",
        "description": "box",
        "peekOfCode": "vy = -speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=0\")\nclient.moveByVelocityZAsync(vx, vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 0)).join()\ntime.sleep(delay)\nclient.hoverAsync().join()\nclient.landAsync().join()",
        "detail": "box",
        "documentation": {
            "value": "\n```python\nfrom box import vy\n```\n\n```python\n\n\n```\n\n```python\nvy = -speed\nprint(\"moving by velocity vx=\" + str(vx) + \", vy=\" + str(vy) + \", yaw=0\")\nclient.moveByVelocityZAsync(vx, vy,z,duration, airsim.DrivetrainType.MaxDegreeOfFreedom, airsim.YawMode(False, 0)).join()\ntime.sleep(delay)\nclient.hoverAsync().join()\nclient.landAsync().join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "check_pos",
        "kind": 2,
        "importPath": "check_trajectory",
        "description": "check_trajectory",
        "peekOfCode": "def check_pos():\n    p = client.simGetGroundTruthKinematics().position\n    print((p.x_val,p.y_val,p.z_val) )\nclient = airsim.MultirotorClient()\n# connect to the AirSim simulator\nprint(client.confirmConnection() )\nwhile(True):\n    check_pos()\n    time.sleep(timestep)\n# while(True):",
        "detail": "check_trajectory",
        "documentation": {
            "value": "\n```python\nfrom check_trajectory import check_pos\n```\n\n```python\n\n\n```\n\n```python\ndef check_pos():\n    p = client.simGetGroundTruthKinematics().position\n    print((p.x_val,p.y_val,p.z_val) )\nclient = airsim.MultirotorClient()\n# connect to the AirSim simulator\nprint(client.confirmConnection() )\nwhile(True):\n    check_pos()\n    time.sleep(timestep)\n# while(True):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "timestep",
        "kind": 5,
        "importPath": "check_trajectory",
        "description": "check_trajectory",
        "peekOfCode": "timestep = 0.1\ndrones_positions = dict()\npositions = []\ndef check_pos():\n    p = client.simGetGroundTruthKinematics().position\n    print((p.x_val,p.y_val,p.z_val) )\nclient = airsim.MultirotorClient()\n# connect to the AirSim simulator\nprint(client.confirmConnection() )\nwhile(True):",
        "detail": "check_trajectory",
        "documentation": {
            "value": "\n```python\nfrom check_trajectory import timestep\n```\n\n```python\n\n\n```\n\n```python\ntimestep = 0.1\ndrones_positions = dict()\npositions = []\ndef check_pos():\n    p = client.simGetGroundTruthKinematics().position\n    print((p.x_val,p.y_val,p.z_val) )\nclient = airsim.MultirotorClient()\n# connect to the AirSim simulator\nprint(client.confirmConnection() )\nwhile(True):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "drones_positions",
        "kind": 5,
        "importPath": "check_trajectory",
        "description": "check_trajectory",
        "peekOfCode": "drones_positions = dict()\npositions = []\ndef check_pos():\n    p = client.simGetGroundTruthKinematics().position\n    print((p.x_val,p.y_val,p.z_val) )\nclient = airsim.MultirotorClient()\n# connect to the AirSim simulator\nprint(client.confirmConnection() )\nwhile(True):\n    check_pos()",
        "detail": "check_trajectory",
        "documentation": {
            "value": "\n```python\nfrom check_trajectory import drones_positions\n```\n\n```python\n\n\n```\n\n```python\ndrones_positions = dict()\npositions = []\ndef check_pos():\n    p = client.simGetGroundTruthKinematics().position\n    print((p.x_val,p.y_val,p.z_val) )\nclient = airsim.MultirotorClient()\n# connect to the AirSim simulator\nprint(client.confirmConnection() )\nwhile(True):\n    check_pos()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "positions",
        "kind": 5,
        "importPath": "check_trajectory",
        "description": "check_trajectory",
        "peekOfCode": "positions = []\ndef check_pos():\n    p = client.simGetGroundTruthKinematics().position\n    print((p.x_val,p.y_val,p.z_val) )\nclient = airsim.MultirotorClient()\n# connect to the AirSim simulator\nprint(client.confirmConnection() )\nwhile(True):\n    check_pos()\n    time.sleep(timestep)",
        "detail": "check_trajectory",
        "documentation": {
            "value": "\n```python\nfrom check_trajectory import positions\n```\n\n```python\n\n\n```\n\n```python\npositions = []\ndef check_pos():\n    p = client.simGetGroundTruthKinematics().position\n    print((p.x_val,p.y_val,p.z_val) )\nclient = airsim.MultirotorClient()\n# connect to the AirSim simulator\nprint(client.confirmConnection() )\nwhile(True):\n    check_pos()\n    time.sleep(timestep)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "check_trajectory",
        "description": "check_trajectory",
        "peekOfCode": "client = airsim.MultirotorClient()\n# connect to the AirSim simulator\nprint(client.confirmConnection() )\nwhile(True):\n    check_pos()\n    time.sleep(timestep)\n# while(True):\n#     print(\"Main execution flow\")\n#     time.sleep(1)",
        "detail": "check_trajectory",
        "documentation": {
            "value": "\n```python\nfrom check_trajectory import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\n# connect to the AirSim simulator\nprint(client.confirmConnection() )\nwhile(True):\n    check_pos()\n    time.sleep(timestep)\n# while(True):\n#     print(\"Main execution flow\")\n#     time.sleep(1)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "check_trajectory_threaded",
        "description": "check_trajectory_threaded",
        "peekOfCode": "class Job(threading.Thread):\n    def __init__(self):\n        threading.Thread.__init__(self)\n        # The shutdown_flag is a threading.Event object that\n        # indicates whether the thread should be terminated.\n        self.shutdown_flag = threading.Event()\n        # ... Other thread setup code here ...\n    def run(self):\n        print('Thread #%s started' % self.ident)\n        while not self.shutdown_flag.is_set():",
        "detail": "check_trajectory_threaded",
        "documentation": {
            "value": "\n```python\nfrom check_trajectory_threaded import Job\n```\n\n```python\n\n\n```\n\n```python\nclass Job(threading.Thread):\n    def __init__(self):\n        threading.Thread.__init__(self)\n        # The shutdown_flag is a threading.Event object that\n        # indicates whether the thread should be terminated.\n        self.shutdown_flag = threading.Event()\n        # ... Other thread setup code here ...\n    def run(self):\n        print('Thread #%s started' % self.ident)\n        while not self.shutdown_flag.is_set():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ServiceExit",
        "kind": 6,
        "importPath": "check_trajectory_threaded",
        "description": "check_trajectory_threaded",
        "peekOfCode": "class ServiceExit(Exception):\n    \"\"\"\n    Custom exception which is used to trigger the clean exit\n    of all running threads and the main program.\n    \"\"\"\n    pass\ndef service_shutdown(signum, frame):\n    print('Caught signal %d' % signum)\n    raise ServiceExit",
        "detail": "check_trajectory_threaded",
        "documentation": {
            "value": "\n```python\nfrom check_trajectory_threaded import ServiceExit\n```\n\n```python\n\n\n```\n\n```python\nclass ServiceExit(Exception):\n    \"\"\"\n    Custom exception which is used to trigger the clean exit\n    of all running threads and the main program.\n    \"\"\"\n    pass\ndef service_shutdown(signum, frame):\n    print('Caught signal %d' % signum)\n    raise ServiceExit\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "check_pos",
        "kind": 2,
        "importPath": "check_trajectory_threaded",
        "description": "check_trajectory_threaded",
        "peekOfCode": "def check_pos():\n    p = client.simGetGroundTruthKinematics().position\n    print((p.x_val,p.y_val,p.z_val) )\nclass Job(threading.Thread):\n    def __init__(self):\n        threading.Thread.__init__(self)\n        # The shutdown_flag is a threading.Event object that\n        # indicates whether the thread should be terminated.\n        self.shutdown_flag = threading.Event()\n        # ... Other thread setup code here ...",
        "detail": "check_trajectory_threaded",
        "documentation": {
            "value": "\n```python\nfrom check_trajectory_threaded import check_pos\n```\n\n```python\n\n\n```\n\n```python\ndef check_pos():\n    p = client.simGetGroundTruthKinematics().position\n    print((p.x_val,p.y_val,p.z_val) )\nclass Job(threading.Thread):\n    def __init__(self):\n        threading.Thread.__init__(self)\n        # The shutdown_flag is a threading.Event object that\n        # indicates whether the thread should be terminated.\n        self.shutdown_flag = threading.Event()\n        # ... Other thread setup code here ...\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "service_shutdown",
        "kind": 2,
        "importPath": "check_trajectory_threaded",
        "description": "check_trajectory_threaded",
        "peekOfCode": "def service_shutdown(signum, frame):\n    print('Caught signal %d' % signum)\n    raise ServiceExit\n# -------------------------------------   # ------------------------------------------\n# Register the signal handlers\nsignal.signal(signal.SIGTERM, service_shutdown)\nsignal.signal(signal.SIGINT, service_shutdown)\nclient = airsim.MultirotorClient()\nj1 = Job()",
        "detail": "check_trajectory_threaded",
        "documentation": {
            "value": "\n```python\nfrom check_trajectory_threaded import service_shutdown\n```\n\n```python\n\n\n```\n\n```python\ndef service_shutdown(signum, frame):\n    print('Caught signal %d' % signum)\n    raise ServiceExit\n# -------------------------------------   # ------------------------------------------\n# Register the signal handlers\nsignal.signal(signal.SIGTERM, service_shutdown)\nsignal.signal(signal.SIGINT, service_shutdown)\nclient = airsim.MultirotorClient()\nj1 = Job()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "check_trajectory_threaded",
        "description": "check_trajectory_threaded",
        "peekOfCode": "client = airsim.MultirotorClient()\nj1 = Job()\ntry:\n    # connect to the AirSim simulator\n    client.confirmConnection()\n    client.enableApiControl(True)\n    client.armDisarm(True)\n    client.takeoffAsync().join()\n    client.hoverAsync().join()\n    client.simSetTraceLine([1.0, 0.0, 0.0, 1.0], 5)",
        "detail": "check_trajectory_threaded",
        "documentation": {
            "value": "\n```python\nfrom check_trajectory_threaded import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nj1 = Job()\ntry:\n    # connect to the AirSim simulator\n    client.confirmConnection()\n    client.enableApiControl(True)\n    client.armDisarm(True)\n    client.takeoffAsync().join()\n    client.hoverAsync().join()\n    client.simSetTraceLine([1.0, 0.0, 0.0, 1.0], 5)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "j1",
        "kind": 5,
        "importPath": "check_trajectory_threaded",
        "description": "check_trajectory_threaded",
        "peekOfCode": "j1 = Job()\ntry:\n    # connect to the AirSim simulator\n    client.confirmConnection()\n    client.enableApiControl(True)\n    client.armDisarm(True)\n    client.takeoffAsync().join()\n    client.hoverAsync().join()\n    client.simSetTraceLine([1.0, 0.0, 0.0, 1.0], 5)\n    vehicleControl = client.moveByVelocityAsync(1, 4, 0, 50)",
        "detail": "check_trajectory_threaded",
        "documentation": {
            "value": "\n```python\nfrom check_trajectory_threaded import j1\n```\n\n```python\n\n\n```\n\n```python\nj1 = Job()\ntry:\n    # connect to the AirSim simulator\n    client.confirmConnection()\n    client.enableApiControl(True)\n    client.armDisarm(True)\n    client.takeoffAsync().join()\n    client.hoverAsync().join()\n    client.simSetTraceLine([1.0, 0.0, 0.0, 1.0], 5)\n    vehicleControl = client.moveByVelocityAsync(1, 4, 0, 50)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "clock_speed",
        "description": "clock_speed",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.moveByVelocityZAsync(0, 0, -20, 3).join()\nwhile True:\n    client.moveByVelocityZAsync(5, 5, -2, 1).join()\n    time.sleep(10)\nclient.armDisarm(False)\nclient.reset()",
        "detail": "clock_speed",
        "documentation": {
            "value": "\n```python\nfrom clock_speed import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.moveByVelocityZAsync(0, 0, -20, 3).join()\nwhile True:\n    client.moveByVelocityZAsync(5, 5, -2, 1).join()\n    time.sleep(10)\nclient.armDisarm(False)\nclient.reset()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "disarm",
        "description": "disarm",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.armDisarm(False)",
        "detail": "disarm",
        "documentation": {
            "value": "\n```python\nfrom disarm import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.armDisarm(False)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ReplayMemory",
        "kind": 6,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "class ReplayMemory(object):\n    \"\"\"\n    ReplayMemory keeps track of the environment dynamic.\n    We store all the transitions (s(t), action, s(t+1), reward, done).\n    The replay memory allows us to efficiently sample mini-batches from it, and generate the correct state representation\n    (w.r.t the number of previous frames needed).\n    \"\"\"\n    def __init__(self, size, sample_shape, history_length=4):\n        self._pos = 0\n        self._count = 0",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import ReplayMemory\n```\n\n```python\n\n\n```\n\n```python\nclass ReplayMemory(object):\n    \"\"\"\n    ReplayMemory keeps track of the environment dynamic.\n    We store all the transitions (s(t), action, s(t+1), reward, done).\n    The replay memory allows us to efficiently sample mini-batches from it, and generate the correct state representation\n    (w.r.t the number of previous frames needed).\n    \"\"\"\n    def __init__(self, size, sample_shape, history_length=4):\n        self._pos = 0\n        self._count = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "History",
        "kind": 6,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "class History(object):\n    \"\"\"\n    Accumulator keeping track of the N previous frames to be used by the agent\n    for evaluation\n    \"\"\"\n    def __init__(self, shape):\n        self._buffer = np.zeros(shape, dtype=np.float32)\n    @property\n    def value(self):\n        \"\"\" Underlying buffer with N previous states stacked along first axis",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import History\n```\n\n```python\n\n\n```\n\n```python\nclass History(object):\n    \"\"\"\n    Accumulator keeping track of the N previous frames to be used by the agent\n    for evaluation\n    \"\"\"\n    def __init__(self, shape):\n        self._buffer = np.zeros(shape, dtype=np.float32)\n    @property\n    def value(self):\n        \"\"\" Underlying buffer with N previous states stacked along first axis\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LinearEpsilonAnnealingExplorer",
        "kind": 6,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "class LinearEpsilonAnnealingExplorer(object):\n    \"\"\"\n    Exploration policy using Linear Epsilon Greedy\n    Attributes:\n        start (float): start value\n        end (float): end value\n        steps (int): number of steps between start and end\n    \"\"\"\n    def __init__(self, start, end, steps):\n        self._start = start",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import LinearEpsilonAnnealingExplorer\n```\n\n```python\n\n\n```\n\n```python\nclass LinearEpsilonAnnealingExplorer(object):\n    \"\"\"\n    Exploration policy using Linear Epsilon Greedy\n    Attributes:\n        start (float): start value\n        end (float): end value\n        steps (int): number of steps between start and end\n    \"\"\"\n    def __init__(self, start, end, steps):\n        self._start = start\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DeepQAgent",
        "kind": 6,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "class DeepQAgent(object):\n    \"\"\"\n    Implementation of Deep Q Neural Network agent like in:\n        Nature 518. \"Human-level control through deep reinforcement learning\" (Mnih & al. 2015)\n    \"\"\"\n    def __init__(self, input_shape, nb_actions,\n                 gamma=0.99, explorer=LinearEpsilonAnnealingExplorer(1, 0.1, 1000000),\n                 learning_rate=0.00025, momentum=0.95, minibatch_size=32,\n                 memory_size=500000, train_after=10000, train_interval=4, target_update_interval=10000,\n                 monitor=True):",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import DeepQAgent\n```\n\n```python\n\n\n```\n\n```python\nclass DeepQAgent(object):\n    \"\"\"\n    Implementation of Deep Q Neural Network agent like in:\n        Nature 518. \"Human-level control through deep reinforcement learning\" (Mnih & al. 2015)\n    \"\"\"\n    def __init__(self, input_shape, nb_actions,\n                 gamma=0.99, explorer=LinearEpsilonAnnealingExplorer(1, 0.1, 1000000),\n                 learning_rate=0.00025, momentum=0.95, minibatch_size=32,\n                 memory_size=500000, train_after=10000, train_interval=4, target_update_interval=10000,\n                 monitor=True):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "huber_loss",
        "kind": 2,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "def huber_loss(y, y_hat, delta):\n    \"\"\" Compute the Huber Loss as part of the model graph\n    Huber Loss is more robust to outliers. It is defined as:\n     if |y - y_hat| < delta :\n        0.5 * (y - y_hat)**2\n    else :\n        delta * |y - y_hat| - 0.5 * delta**2\n    Attributes:\n        y (Tensor[-1, 1]): Target value\n        y_hat(Tensor[-1, 1]): Estimated value",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import huber_loss\n```\n\n```python\n\n\n```\n\n```python\ndef huber_loss(y, y_hat, delta):\n    \"\"\" Compute the Huber Loss as part of the model graph\n    Huber Loss is more robust to outliers. It is defined as:\n     if |y - y_hat| < delta :\n        0.5 * (y - y_hat)**2\n    else :\n        delta * |y - y_hat| - 0.5 * delta**2\n    Attributes:\n        y (Tensor[-1, 1]): Target value\n        y_hat(Tensor[-1, 1]): Estimated value\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "transform_input",
        "kind": 2,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "def transform_input(responses):\n    img1d = np.array(responses[0].image_data_float, dtype=np.float)\n    img1d = 255/np.maximum(np.ones(img1d.size), img1d)\n    img2d = np.reshape(img1d, (responses[0].height, responses[0].width))\n    from PIL import Image\n    image = Image.fromarray(img2d)\n    im_final = np.array(image.resize((84, 84)).convert('L')) \n    return im_final\ndef interpret_action(action):\n    scaling_factor = 0.25",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import transform_input\n```\n\n```python\n\n\n```\n\n```python\ndef transform_input(responses):\n    img1d = np.array(responses[0].image_data_float, dtype=np.float)\n    img1d = 255/np.maximum(np.ones(img1d.size), img1d)\n    img2d = np.reshape(img1d, (responses[0].height, responses[0].width))\n    from PIL import Image\n    image = Image.fromarray(img2d)\n    im_final = np.array(image.resize((84, 84)).convert('L')) \n    return im_final\ndef interpret_action(action):\n    scaling_factor = 0.25\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "interpret_action",
        "kind": 2,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "def interpret_action(action):\n    scaling_factor = 0.25\n    if action == 0:\n        quad_offset = (0, 0, 0)\n    elif action == 1:\n        quad_offset = (scaling_factor, 0, 0)\n    elif action == 2:\n        quad_offset = (0, scaling_factor, 0)\n    elif action == 3:\n        quad_offset = (0, 0, scaling_factor)",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import interpret_action\n```\n\n```python\n\n\n```\n\n```python\ndef interpret_action(action):\n    scaling_factor = 0.25\n    if action == 0:\n        quad_offset = (0, 0, 0)\n    elif action == 1:\n        quad_offset = (scaling_factor, 0, 0)\n    elif action == 2:\n        quad_offset = (0, scaling_factor, 0)\n    elif action == 3:\n        quad_offset = (0, 0, scaling_factor)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "compute_reward",
        "kind": 2,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "def compute_reward(quad_state, quad_vel, collision_info):\n    thresh_dist = 7\n    beta = 1\n    z = -10\n    pts = [np.array([-.55265, -31.9786, -19.0225]), np.array([48.59735, -63.3286, -60.07256]), np.array([193.5974, -55.0786, -46.32256]), np.array([369.2474, 35.32137, -62.5725]), np.array([541.3474, 143.6714, -32.07256])]\n    quad_pt = np.array(list((quad_state.x_val, quad_state.y_val, quad_state.z_val)))\n    if collision_info.has_collided:\n        reward = -100\n    else:    \n        dist = 10000000",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import compute_reward\n```\n\n```python\n\n\n```\n\n```python\ndef compute_reward(quad_state, quad_vel, collision_info):\n    thresh_dist = 7\n    beta = 1\n    z = -10\n    pts = [np.array([-.55265, -31.9786, -19.0225]), np.array([48.59735, -63.3286, -60.07256]), np.array([193.5974, -55.0786, -46.32256]), np.array([369.2474, 35.32137, -62.5725]), np.array([541.3474, 143.6714, -32.07256])]\n    quad_pt = np.array(list((quad_state.x_val, quad_state.y_val, quad_state.z_val)))\n    if collision_info.has_collided:\n        reward = -100\n    else:    \n        dist = 10000000\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "isDone",
        "kind": 2,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "def isDone(reward):\n    done = 0\n    if  reward <= -10:\n        done = 1\n    return done\ninitX = -.55265\ninitY = -31.9786\ninitZ = -19.0225\n# connect to the AirSim simulator \nclient = airsim.MultirotorClient()",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import isDone\n```\n\n```python\n\n\n```\n\n```python\ndef isDone(reward):\n    done = 0\n    if  reward <= -10:\n        done = 1\n    return done\ninitX = -.55265\ninitY = -31.9786\ninitZ = -19.0225\n# connect to the AirSim simulator \nclient = airsim.MultirotorClient()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "initX",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "initX = -.55265\ninitY = -31.9786\ninitZ = -19.0225\n# connect to the AirSim simulator \nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(initX, initY, initZ, 5).join()",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import initX\n```\n\n```python\n\n\n```\n\n```python\ninitX = -.55265\ninitY = -31.9786\ninitZ = -19.0225\n# connect to the AirSim simulator \nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(initX, initY, initZ, 5).join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "initY",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "initY = -31.9786\ninitZ = -19.0225\n# connect to the AirSim simulator \nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(initX, initY, initZ, 5).join()\nclient.moveByVelocityAsync(1, -0.67, -0.8, 5).join()",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import initY\n```\n\n```python\n\n\n```\n\n```python\ninitY = -31.9786\ninitZ = -19.0225\n# connect to the AirSim simulator \nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(initX, initY, initZ, 5).join()\nclient.moveByVelocityAsync(1, -0.67, -0.8, 5).join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "initZ",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "initZ = -19.0225\n# connect to the AirSim simulator \nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(initX, initY, initZ, 5).join()\nclient.moveByVelocityAsync(1, -0.67, -0.8, 5).join()\ntime.sleep(0.5)",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import initZ\n```\n\n```python\n\n\n```\n\n```python\ninitZ = -19.0225\n# connect to the AirSim simulator \nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(initX, initY, initZ, 5).join()\nclient.moveByVelocityAsync(1, -0.67, -0.8, 5).join()\ntime.sleep(0.5)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(initX, initY, initZ, 5).join()\nclient.moveByVelocityAsync(1, -0.67, -0.8, 5).join()\ntime.sleep(0.5)\n# Make RL agent\nNumBufferFrames = 4",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(initX, initY, initZ, 5).join()\nclient.moveByVelocityAsync(1, -0.67, -0.8, 5).join()\ntime.sleep(0.5)\n# Make RL agent\nNumBufferFrames = 4\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NumBufferFrames",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "NumBufferFrames = 4\nSizeRows = 84\nSizeCols = 84\nNumActions = 7\nagent = DeepQAgent((NumBufferFrames, SizeRows, SizeCols), NumActions, monitor=True)\n# Train\nepoch = 100\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import NumBufferFrames\n```\n\n```python\n\n\n```\n\n```python\nNumBufferFrames = 4\nSizeRows = 84\nSizeCols = 84\nNumActions = 7\nagent = DeepQAgent((NumBufferFrames, SizeRows, SizeCols), NumActions, monitor=True)\n# Train\nepoch = 100\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SizeRows",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "SizeRows = 84\nSizeCols = 84\nNumActions = 7\nagent = DeepQAgent((NumBufferFrames, SizeRows, SizeCols), NumActions, monitor=True)\n# Train\nepoch = 100\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import SizeRows\n```\n\n```python\n\n\n```\n\n```python\nSizeRows = 84\nSizeCols = 84\nNumActions = 7\nagent = DeepQAgent((NumBufferFrames, SizeRows, SizeCols), NumActions, monitor=True)\n# Train\nepoch = 100\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SizeCols",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "SizeCols = 84\nNumActions = 7\nagent = DeepQAgent((NumBufferFrames, SizeRows, SizeCols), NumActions, monitor=True)\n# Train\nepoch = 100\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import SizeCols\n```\n\n```python\n\n\n```\n\n```python\nSizeCols = 84\nNumActions = 7\nagent = DeepQAgent((NumBufferFrames, SizeRows, SizeCols), NumActions, monitor=True)\n# Train\nepoch = 100\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NumActions",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "NumActions = 7\nagent = DeepQAgent((NumBufferFrames, SizeRows, SizeCols), NumActions, monitor=True)\n# Train\nepoch = 100\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import NumActions\n```\n\n```python\n\n\n```\n\n```python\nNumActions = 7\nagent = DeepQAgent((NumBufferFrames, SizeRows, SizeCols), NumActions, monitor=True)\n# Train\nepoch = 100\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "agent = DeepQAgent((NumBufferFrames, SizeRows, SizeCols), NumActions, monitor=True)\n# Train\nepoch = 100\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n    quad_offset = interpret_action(action)",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import agent\n```\n\n```python\n\n\n```\n\n```python\nagent = DeepQAgent((NumBufferFrames, SizeRows, SizeCols), NumActions, monitor=True)\n# Train\nepoch = 100\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n    quad_offset = interpret_action(action)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "epoch",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "epoch = 100\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n    quad_offset = interpret_action(action)\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n    client.moveByVelocityAsync(quad_vel.x_val+quad_offset[0], quad_vel.y_val+quad_offset[1], quad_vel.z_val+quad_offset[2], 5).join()",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import epoch\n```\n\n```python\n\n\n```\n\n```python\nepoch = 100\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n    quad_offset = interpret_action(action)\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n    client.moveByVelocityAsync(quad_vel.x_val+quad_offset[0], quad_vel.y_val+quad_offset[1], quad_vel.z_val+quad_offset[2], 5).join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "current_step",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "current_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n    quad_offset = interpret_action(action)\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n    client.moveByVelocityAsync(quad_vel.x_val+quad_offset[0], quad_vel.y_val+quad_offset[1], quad_vel.z_val+quad_offset[2], 5).join()\n    time.sleep(0.5)",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import current_step\n```\n\n```python\n\n\n```\n\n```python\ncurrent_step = 0\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n    quad_offset = interpret_action(action)\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n    client.moveByVelocityAsync(quad_vel.x_val+quad_offset[0], quad_vel.y_val+quad_offset[1], quad_vel.z_val+quad_offset[2], 5).join()\n    time.sleep(0.5)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "max_steps",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "max_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n    quad_offset = interpret_action(action)\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n    client.moveByVelocityAsync(quad_vel.x_val+quad_offset[0], quad_vel.y_val+quad_offset[1], quad_vel.z_val+quad_offset[2], 5).join()\n    time.sleep(0.5)\n    quad_state = client.getMultirotorState().kinematics_estimated.position",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import max_steps\n```\n\n```python\n\n\n```\n\n```python\nmax_steps = epoch * 250000\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n    quad_offset = interpret_action(action)\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n    client.moveByVelocityAsync(quad_vel.x_val+quad_offset[0], quad_vel.y_val+quad_offset[1], quad_vel.z_val+quad_offset[2], 5).join()\n    time.sleep(0.5)\n    quad_state = client.getMultirotorState().kinematics_estimated.position\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "responses",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "responses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n    quad_offset = interpret_action(action)\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n    client.moveByVelocityAsync(quad_vel.x_val+quad_offset[0], quad_vel.y_val+quad_offset[1], quad_vel.z_val+quad_offset[2], 5).join()\n    time.sleep(0.5)\n    quad_state = client.getMultirotorState().kinematics_estimated.position\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import responses\n```\n\n```python\n\n\n```\n\n```python\nresponses = client.simGetImages([airsim.ImageRequest(3, airsim.ImageType.DepthPerspective, True, False)])\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n    quad_offset = interpret_action(action)\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n    client.moveByVelocityAsync(quad_vel.x_val+quad_offset[0], quad_vel.y_val+quad_offset[1], quad_vel.z_val+quad_offset[2], 5).join()\n    time.sleep(0.5)\n    quad_state = client.getMultirotorState().kinematics_estimated.position\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "current_state",
        "kind": 5,
        "importPath": "DQNdrone",
        "description": "DQNdrone",
        "peekOfCode": "current_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n    quad_offset = interpret_action(action)\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n    client.moveByVelocityAsync(quad_vel.x_val+quad_offset[0], quad_vel.y_val+quad_offset[1], quad_vel.z_val+quad_offset[2], 5).join()\n    time.sleep(0.5)\n    quad_state = client.getMultirotorState().kinematics_estimated.position\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n    collision_info = client.simGetCollisionInfo()",
        "detail": "DQNdrone",
        "documentation": {
            "value": "\n```python\nfrom DQNdrone import current_state\n```\n\n```python\n\n\n```\n\n```python\ncurrent_state = transform_input(responses)\nwhile True:\n    action = agent.act(current_state)\n    quad_offset = interpret_action(action)\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n    client.moveByVelocityAsync(quad_vel.x_val+quad_offset[0], quad_vel.y_val+quad_offset[1], quad_vel.z_val+quad_offset[2], 5).join()\n    time.sleep(0.5)\n    quad_state = client.getMultirotorState().kinematics_estimated.position\n    quad_vel = client.getMultirotorState().kinematics_estimated.linear_velocity\n    collision_info = client.simGetCollisionInfo()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LidarTest",
        "kind": 6,
        "importPath": "drone_lidar",
        "description": "drone_lidar",
        "peekOfCode": "class LidarTest:\n    def __init__(self):\n        # connect to the AirSim simulator\n        self.client = airsim.MultirotorClient()\n        self.client.confirmConnection()\n        self.client.enableApiControl(True)\n    def execute(self):\n        print(\"arming the drone...\")\n        self.client.armDisarm(True)\n        state = self.client.getMultirotorState()",
        "detail": "drone_lidar",
        "documentation": {
            "value": "\n```python\nfrom drone_lidar import LidarTest\n```\n\n```python\n\n\n```\n\n```python\nclass LidarTest:\n    def __init__(self):\n        # connect to the AirSim simulator\n        self.client = airsim.MultirotorClient()\n        self.client.confirmConnection()\n        self.client.enableApiControl(True)\n    def execute(self):\n        print(\"arming the drone...\")\n        self.client.armDisarm(True)\n        state = self.client.getMultirotorState()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "drone_stress_test",
        "description": "drone_stress_test",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nfor idx in range(3000):\n    client.moveToPositionAsync(0, 0, -10, 5).join()\n    client.reset()\n    client.enableApiControl(True)\n    print(\"%d\" % idx)\n# that's enough fun for now. let's quite cleanly",
        "detail": "drone_stress_test",
        "documentation": {
            "value": "\n```python\nfrom drone_stress_test import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nfor idx in range(3000):\n    client.moveToPositionAsync(0, 0, -10, 5).join()\n    client.reset()\n    client.enableApiControl(True)\n    print(\"%d\" % idx)\n# that's enough fun for now. let's quite cleanly\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "gimbal",
        "description": "gimbal",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\n# MultirotorClient.wait_key('Press any key to takeoff')\nprint(\"Taking off\")\nclient.takeoffAsync().join()\nprint(\"Ready\")\nfor i in range(5):\n    client.moveToPositionAsync(float(-50.00), float( 50.26), float( -20.58), float( 3.5))",
        "detail": "gimbal",
        "documentation": {
            "value": "\n```python\nfrom gimbal import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\n# MultirotorClient.wait_key('Press any key to takeoff')\nprint(\"Taking off\")\nclient.takeoffAsync().join()\nprint(\"Ready\")\nfor i in range(5):\n    client.moveToPositionAsync(float(-50.00), float( 50.26), float( -20.58), float( 3.5))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nstate = client.getMultirotorState()\ns = pprint.pformat(state)\nprint(\"state: %s\" % s)\nimu_data = client.getImuData()\ns = pprint.pformat(imu_data)\nprint(\"imu_data: %s\" % s)",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nstate = client.getMultirotorState()\ns = pprint.pformat(state)\nprint(\"state: %s\" % s)\nimu_data = client.getImuData()\ns = pprint.pformat(imu_data)\nprint(\"imu_data: %s\" % s)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "state = client.getMultirotorState()\ns = pprint.pformat(state)\nprint(\"state: %s\" % s)\nimu_data = client.getImuData()\ns = pprint.pformat(imu_data)\nprint(\"imu_data: %s\" % s)\nbarometer_data = client.getBarometerData()\ns = pprint.pformat(barometer_data)\nprint(\"barometer_data: %s\" % s)\nmagnetometer_data = client.getMagnetometerData()",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import state\n```\n\n```python\n\n\n```\n\n```python\nstate = client.getMultirotorState()\ns = pprint.pformat(state)\nprint(\"state: %s\" % s)\nimu_data = client.getImuData()\ns = pprint.pformat(imu_data)\nprint(\"imu_data: %s\" % s)\nbarometer_data = client.getBarometerData()\ns = pprint.pformat(barometer_data)\nprint(\"barometer_data: %s\" % s)\nmagnetometer_data = client.getMagnetometerData()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "s = pprint.pformat(state)\nprint(\"state: %s\" % s)\nimu_data = client.getImuData()\ns = pprint.pformat(imu_data)\nprint(\"imu_data: %s\" % s)\nbarometer_data = client.getBarometerData()\ns = pprint.pformat(barometer_data)\nprint(\"barometer_data: %s\" % s)\nmagnetometer_data = client.getMagnetometerData()\ns = pprint.pformat(magnetometer_data)",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import s\n```\n\n```python\n\n\n```\n\n```python\ns = pprint.pformat(state)\nprint(\"state: %s\" % s)\nimu_data = client.getImuData()\ns = pprint.pformat(imu_data)\nprint(\"imu_data: %s\" % s)\nbarometer_data = client.getBarometerData()\ns = pprint.pformat(barometer_data)\nprint(\"barometer_data: %s\" % s)\nmagnetometer_data = client.getMagnetometerData()\ns = pprint.pformat(magnetometer_data)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "imu_data",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "imu_data = client.getImuData()\ns = pprint.pformat(imu_data)\nprint(\"imu_data: %s\" % s)\nbarometer_data = client.getBarometerData()\ns = pprint.pformat(barometer_data)\nprint(\"barometer_data: %s\" % s)\nmagnetometer_data = client.getMagnetometerData()\ns = pprint.pformat(magnetometer_data)\nprint(\"magnetometer_data: %s\" % s)\ngps_data = client.getGpsData()",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import imu_data\n```\n\n```python\n\n\n```\n\n```python\nimu_data = client.getImuData()\ns = pprint.pformat(imu_data)\nprint(\"imu_data: %s\" % s)\nbarometer_data = client.getBarometerData()\ns = pprint.pformat(barometer_data)\nprint(\"barometer_data: %s\" % s)\nmagnetometer_data = client.getMagnetometerData()\ns = pprint.pformat(magnetometer_data)\nprint(\"magnetometer_data: %s\" % s)\ngps_data = client.getGpsData()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "s = pprint.pformat(imu_data)\nprint(\"imu_data: %s\" % s)\nbarometer_data = client.getBarometerData()\ns = pprint.pformat(barometer_data)\nprint(\"barometer_data: %s\" % s)\nmagnetometer_data = client.getMagnetometerData()\ns = pprint.pformat(magnetometer_data)\nprint(\"magnetometer_data: %s\" % s)\ngps_data = client.getGpsData()\ns = pprint.pformat(gps_data)",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import s\n```\n\n```python\n\n\n```\n\n```python\ns = pprint.pformat(imu_data)\nprint(\"imu_data: %s\" % s)\nbarometer_data = client.getBarometerData()\ns = pprint.pformat(barometer_data)\nprint(\"barometer_data: %s\" % s)\nmagnetometer_data = client.getMagnetometerData()\ns = pprint.pformat(magnetometer_data)\nprint(\"magnetometer_data: %s\" % s)\ngps_data = client.getGpsData()\ns = pprint.pformat(gps_data)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "barometer_data",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "barometer_data = client.getBarometerData()\ns = pprint.pformat(barometer_data)\nprint(\"barometer_data: %s\" % s)\nmagnetometer_data = client.getMagnetometerData()\ns = pprint.pformat(magnetometer_data)\nprint(\"magnetometer_data: %s\" % s)\ngps_data = client.getGpsData()\ns = pprint.pformat(gps_data)\nprint(\"gps_data: %s\" % s)\nairsim.wait_key('Press any key to takeoff')",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import barometer_data\n```\n\n```python\n\n\n```\n\n```python\nbarometer_data = client.getBarometerData()\ns = pprint.pformat(barometer_data)\nprint(\"barometer_data: %s\" % s)\nmagnetometer_data = client.getMagnetometerData()\ns = pprint.pformat(magnetometer_data)\nprint(\"magnetometer_data: %s\" % s)\ngps_data = client.getGpsData()\ns = pprint.pformat(gps_data)\nprint(\"gps_data: %s\" % s)\nairsim.wait_key('Press any key to takeoff')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "s = pprint.pformat(barometer_data)\nprint(\"barometer_data: %s\" % s)\nmagnetometer_data = client.getMagnetometerData()\ns = pprint.pformat(magnetometer_data)\nprint(\"magnetometer_data: %s\" % s)\ngps_data = client.getGpsData()\ns = pprint.pformat(gps_data)\nprint(\"gps_data: %s\" % s)\nairsim.wait_key('Press any key to takeoff')\nclient.takeoffAsync().join()",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import s\n```\n\n```python\n\n\n```\n\n```python\ns = pprint.pformat(barometer_data)\nprint(\"barometer_data: %s\" % s)\nmagnetometer_data = client.getMagnetometerData()\ns = pprint.pformat(magnetometer_data)\nprint(\"magnetometer_data: %s\" % s)\ngps_data = client.getGpsData()\ns = pprint.pformat(gps_data)\nprint(\"gps_data: %s\" % s)\nairsim.wait_key('Press any key to takeoff')\nclient.takeoffAsync().join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "magnetometer_data",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "magnetometer_data = client.getMagnetometerData()\ns = pprint.pformat(magnetometer_data)\nprint(\"magnetometer_data: %s\" % s)\ngps_data = client.getGpsData()\ns = pprint.pformat(gps_data)\nprint(\"gps_data: %s\" % s)\nairsim.wait_key('Press any key to takeoff')\nclient.takeoffAsync().join()\nstate = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import magnetometer_data\n```\n\n```python\n\n\n```\n\n```python\nmagnetometer_data = client.getMagnetometerData()\ns = pprint.pformat(magnetometer_data)\nprint(\"magnetometer_data: %s\" % s)\ngps_data = client.getGpsData()\ns = pprint.pformat(gps_data)\nprint(\"gps_data: %s\" % s)\nairsim.wait_key('Press any key to takeoff')\nclient.takeoffAsync().join()\nstate = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "s = pprint.pformat(magnetometer_data)\nprint(\"magnetometer_data: %s\" % s)\ngps_data = client.getGpsData()\ns = pprint.pformat(gps_data)\nprint(\"gps_data: %s\" % s)\nairsim.wait_key('Press any key to takeoff')\nclient.takeoffAsync().join()\nstate = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\nairsim.wait_key('Press any key to move vehicle to (-10, 10, -10) at 5 m/s')",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import s\n```\n\n```python\n\n\n```\n\n```python\ns = pprint.pformat(magnetometer_data)\nprint(\"magnetometer_data: %s\" % s)\ngps_data = client.getGpsData()\ns = pprint.pformat(gps_data)\nprint(\"gps_data: %s\" % s)\nairsim.wait_key('Press any key to takeoff')\nclient.takeoffAsync().join()\nstate = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\nairsim.wait_key('Press any key to move vehicle to (-10, 10, -10) at 5 m/s')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gps_data",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "gps_data = client.getGpsData()\ns = pprint.pformat(gps_data)\nprint(\"gps_data: %s\" % s)\nairsim.wait_key('Press any key to takeoff')\nclient.takeoffAsync().join()\nstate = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\nairsim.wait_key('Press any key to move vehicle to (-10, 10, -10) at 5 m/s')\nclient.moveToPositionAsync(-10, 10, -10, 5).join()\nclient.hoverAsync().join()",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import gps_data\n```\n\n```python\n\n\n```\n\n```python\ngps_data = client.getGpsData()\ns = pprint.pformat(gps_data)\nprint(\"gps_data: %s\" % s)\nairsim.wait_key('Press any key to takeoff')\nclient.takeoffAsync().join()\nstate = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\nairsim.wait_key('Press any key to move vehicle to (-10, 10, -10) at 5 m/s')\nclient.moveToPositionAsync(-10, 10, -10, 5).join()\nclient.hoverAsync().join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "s = pprint.pformat(gps_data)\nprint(\"gps_data: %s\" % s)\nairsim.wait_key('Press any key to takeoff')\nclient.takeoffAsync().join()\nstate = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\nairsim.wait_key('Press any key to move vehicle to (-10, 10, -10) at 5 m/s')\nclient.moveToPositionAsync(-10, 10, -10, 5).join()\nclient.hoverAsync().join()\nstate = client.getMultirotorState()",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import s\n```\n\n```python\n\n\n```\n\n```python\ns = pprint.pformat(gps_data)\nprint(\"gps_data: %s\" % s)\nairsim.wait_key('Press any key to takeoff')\nclient.takeoffAsync().join()\nstate = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\nairsim.wait_key('Press any key to move vehicle to (-10, 10, -10) at 5 m/s')\nclient.moveToPositionAsync(-10, 10, -10, 5).join()\nclient.hoverAsync().join()\nstate = client.getMultirotorState()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "state = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\nairsim.wait_key('Press any key to move vehicle to (-10, 10, -10) at 5 m/s')\nclient.moveToPositionAsync(-10, 10, -10, 5).join()\nclient.hoverAsync().join()\nstate = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\nairsim.wait_key('Press any key to take images')\n# get camera images from the car\nresponses = client.simGetImages([",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import state\n```\n\n```python\n\n\n```\n\n```python\nstate = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\nairsim.wait_key('Press any key to move vehicle to (-10, 10, -10) at 5 m/s')\nclient.moveToPositionAsync(-10, 10, -10, 5).join()\nclient.hoverAsync().join()\nstate = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\nairsim.wait_key('Press any key to take images')\n# get camera images from the car\nresponses = client.simGetImages([\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "state = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\nairsim.wait_key('Press any key to take images')\n# get camera images from the car\nresponses = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.DepthPerspective, True), #depth in perspective projection\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene), #scene vision image in png format\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)])  #scene vision image in uncompressed RGBA array\nprint('Retrieved images: %d' % len(responses))",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import state\n```\n\n```python\n\n\n```\n\n```python\nstate = client.getMultirotorState()\nprint(\"state: %s\" % pprint.pformat(state))\nairsim.wait_key('Press any key to take images')\n# get camera images from the car\nresponses = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.DepthPerspective, True), #depth in perspective projection\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene), #scene vision image in png format\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)])  #scene vision image in uncompressed RGBA array\nprint('Retrieved images: %d' % len(responses))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "responses",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "responses = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.DepthPerspective, True), #depth in perspective projection\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene), #scene vision image in png format\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)])  #scene vision image in uncompressed RGBA array\nprint('Retrieved images: %d' % len(responses))\ntmp_dir = os.path.join(tempfile.gettempdir(), \"airsim_drone\")\nprint (\"Saving images to %s\" % tmp_dir)\ntry:\n    os.makedirs(tmp_dir)",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import responses\n```\n\n```python\n\n\n```\n\n```python\nresponses = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.DepthPerspective, True), #depth in perspective projection\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene), #scene vision image in png format\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)])  #scene vision image in uncompressed RGBA array\nprint('Retrieved images: %d' % len(responses))\ntmp_dir = os.path.join(tempfile.gettempdir(), \"airsim_drone\")\nprint (\"Saving images to %s\" % tmp_dir)\ntry:\n    os.makedirs(tmp_dir)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tmp_dir",
        "kind": 5,
        "importPath": "hello_drone",
        "description": "hello_drone",
        "peekOfCode": "tmp_dir = os.path.join(tempfile.gettempdir(), \"airsim_drone\")\nprint (\"Saving images to %s\" % tmp_dir)\ntry:\n    os.makedirs(tmp_dir)\nexcept OSError:\n    if not os.path.isdir(tmp_dir):\n        raise\nfor idx, response in enumerate(responses):\n    filename = os.path.join(tmp_dir, str(idx))\n    if response.pixels_as_float:",
        "detail": "hello_drone",
        "documentation": {
            "value": "\n```python\nfrom hello_drone import tmp_dir\n```\n\n```python\n\n\n```\n\n```python\ntmp_dir = os.path.join(tempfile.gettempdir(), \"airsim_drone\")\nprint (\"Saving images to %s\" % tmp_dir)\ntry:\n    os.makedirs(tmp_dir)\nexcept OSError:\n    if not os.path.isdir(tmp_dir):\n        raise\nfor idx, response in enumerate(responses):\n    filename = os.path.join(tmp_dir, str(idx))\n    if response.pixels_as_float:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "high_res_camera",
        "description": "high_res_camera",
        "peekOfCode": "client = airsim.VehicleClient()\nclient.confirmConnection()\nframecounter = 1\nprevtimestamp = datetime.now()\nwhile(framecounter <= 500):\n    if framecounter%150 == 0:\n        client.simGetImages([airsim.ImageRequest(\"high_res\", airsim.ImageType.Scene, False, False)])\n        print(\"High resolution image captured.\")\n    if framecounter%30 == 0:\n        now = datetime.now()",
        "detail": "high_res_camera",
        "documentation": {
            "value": "\n```python\nfrom high_res_camera import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.VehicleClient()\nclient.confirmConnection()\nframecounter = 1\nprevtimestamp = datetime.now()\nwhile(framecounter <= 500):\n    if framecounter%150 == 0:\n        client.simGetImages([airsim.ImageRequest(\"high_res\", airsim.ImageType.Scene, False, False)])\n        print(\"High resolution image captured.\")\n    if framecounter%30 == 0:\n        now = datetime.now()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "framecounter",
        "kind": 5,
        "importPath": "high_res_camera",
        "description": "high_res_camera",
        "peekOfCode": "framecounter = 1\nprevtimestamp = datetime.now()\nwhile(framecounter <= 500):\n    if framecounter%150 == 0:\n        client.simGetImages([airsim.ImageRequest(\"high_res\", airsim.ImageType.Scene, False, False)])\n        print(\"High resolution image captured.\")\n    if framecounter%30 == 0:\n        now = datetime.now()\n        print(f\"Time spent for 30 frames: {now-prevtimestamp}\")\n        prevtimestamp = now",
        "detail": "high_res_camera",
        "documentation": {
            "value": "\n```python\nfrom high_res_camera import framecounter\n```\n\n```python\n\n\n```\n\n```python\nframecounter = 1\nprevtimestamp = datetime.now()\nwhile(framecounter <= 500):\n    if framecounter%150 == 0:\n        client.simGetImages([airsim.ImageRequest(\"high_res\", airsim.ImageType.Scene, False, False)])\n        print(\"High resolution image captured.\")\n    if framecounter%30 == 0:\n        now = datetime.now()\n        print(f\"Time spent for 30 frames: {now-prevtimestamp}\")\n        prevtimestamp = now\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "prevtimestamp",
        "kind": 5,
        "importPath": "high_res_camera",
        "description": "high_res_camera",
        "peekOfCode": "prevtimestamp = datetime.now()\nwhile(framecounter <= 500):\n    if framecounter%150 == 0:\n        client.simGetImages([airsim.ImageRequest(\"high_res\", airsim.ImageType.Scene, False, False)])\n        print(\"High resolution image captured.\")\n    if framecounter%30 == 0:\n        now = datetime.now()\n        print(f\"Time spent for 30 frames: {now-prevtimestamp}\")\n        prevtimestamp = now\n    client.simGetImages([airsim.ImageRequest(\"low_res\", airsim.ImageType.Scene, False, False)])",
        "detail": "high_res_camera",
        "documentation": {
            "value": "\n```python\nfrom high_res_camera import prevtimestamp\n```\n\n```python\n\n\n```\n\n```python\nprevtimestamp = datetime.now()\nwhile(framecounter <= 500):\n    if framecounter%150 == 0:\n        client.simGetImages([airsim.ImageRequest(\"high_res\", airsim.ImageType.Scene, False, False)])\n        print(\"High resolution image captured.\")\n    if framecounter%30 == 0:\n        now = datetime.now()\n        print(f\"Time spent for 30 frames: {now-prevtimestamp}\")\n        prevtimestamp = now\n    client.simGetImages([airsim.ImageRequest(\"low_res\", airsim.ImageType.Scene, False, False)])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "KinectPublisher",
        "kind": 6,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "class KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n        self.bridge_d = CvBridge()\n        self.msg_d = Image()\n        self.msg_info = CameraInfo()\n        self.msg_tf = TFMessage()\n    def getDepthImage(self,response_d):\n        img_depth = np.array(response_d.image_data_float, dtype=np.float32)",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import KinectPublisher\n```\n\n```python\n\n\n```\n\n```python\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n        self.bridge_d = CvBridge()\n        self.msg_d = Image()\n        self.msg_info = CameraInfo()\n        self.msg_tf = TFMessage()\n    def getDepthImage(self,response_d):\n        img_depth = np.array(response_d.image_data_float, dtype=np.float32)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CLAHE_ENABLED",
        "kind": 5,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "CLAHE_ENABLED = False  # when enabled, RGB image is enhanced using CLAHE\nCAMERA_FX = 320\nCAMERA_FY = 320\nCAMERA_CX = 320\nCAMERA_CY = 240\nCAMERA_K1 = -0.000591\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import CLAHE_ENABLED\n```\n\n```python\n\n\n```\n\n```python\nCLAHE_ENABLED = False  # when enabled, RGB image is enhanced using CLAHE\nCAMERA_FX = 320\nCAMERA_FY = 320\nCAMERA_CX = 320\nCAMERA_CY = 240\nCAMERA_K1 = -0.000591\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CAMERA_FX",
        "kind": 5,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "CAMERA_FX = 320\nCAMERA_FY = 320\nCAMERA_CX = 320\nCAMERA_CY = 240\nCAMERA_K1 = -0.000591\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import CAMERA_FX\n```\n\n```python\n\n\n```\n\n```python\nCAMERA_FX = 320\nCAMERA_FY = 320\nCAMERA_CX = 320\nCAMERA_CY = 240\nCAMERA_K1 = -0.000591\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CAMERA_FY",
        "kind": 5,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "CAMERA_FY = 320\nCAMERA_CX = 320\nCAMERA_CY = 240\nCAMERA_K1 = -0.000591\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import CAMERA_FY\n```\n\n```python\n\n\n```\n\n```python\nCAMERA_FY = 320\nCAMERA_CX = 320\nCAMERA_CY = 240\nCAMERA_K1 = -0.000591\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CAMERA_CX",
        "kind": 5,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "CAMERA_CX = 320\nCAMERA_CY = 240\nCAMERA_K1 = -0.000591\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import CAMERA_CX\n```\n\n```python\n\n\n```\n\n```python\nCAMERA_CX = 320\nCAMERA_CY = 240\nCAMERA_K1 = -0.000591\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CAMERA_CY",
        "kind": 5,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "CAMERA_CY = 240\nCAMERA_K1 = -0.000591\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import CAMERA_CY\n```\n\n```python\n\n\n```\n\n```python\nCAMERA_CY = 240\nCAMERA_K1 = -0.000591\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CAMERA_K1",
        "kind": 5,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "CAMERA_K1 = -0.000591\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import CAMERA_K1\n```\n\n```python\n\n\n```\n\n```python\nCAMERA_K1 = -0.000591\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CAMERA_K2",
        "kind": 5,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "CAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import CAMERA_K2\n```\n\n```python\n\n\n```\n\n```python\nCAMERA_K2 = 0.000519\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CAMERA_P1",
        "kind": 5,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "CAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n        self.bridge_d = CvBridge()",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import CAMERA_P1\n```\n\n```python\n\n\n```\n\n```python\nCAMERA_P1 = 0.000001\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n        self.bridge_d = CvBridge()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CAMERA_P2",
        "kind": 5,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "CAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n        self.bridge_d = CvBridge()\n        self.msg_d = Image()",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import CAMERA_P2\n```\n\n```python\n\n\n```\n\n```python\nCAMERA_P2 = -0.000030\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n        self.bridge_d = CvBridge()\n        self.msg_d = Image()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CAMERA_P3",
        "kind": 5,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "CAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n        self.bridge_d = CvBridge()\n        self.msg_d = Image()\n        self.msg_info = CameraInfo()",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import CAMERA_P3\n```\n\n```python\n\n\n```\n\n```python\nCAMERA_P3 = 0.0\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n        self.bridge_d = CvBridge()\n        self.msg_d = Image()\n        self.msg_info = CameraInfo()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IMAGE_WIDTH",
        "kind": 5,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "IMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n        self.bridge_d = CvBridge()\n        self.msg_d = Image()\n        self.msg_info = CameraInfo()\n        self.msg_tf = TFMessage()",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import IMAGE_WIDTH\n```\n\n```python\n\n\n```\n\n```python\nIMAGE_WIDTH = 640  # resolution should match values in settings.json\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n        self.bridge_d = CvBridge()\n        self.msg_d = Image()\n        self.msg_info = CameraInfo()\n        self.msg_tf = TFMessage()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IMAGE_HEIGHT",
        "kind": 5,
        "importPath": "kinect_publisher",
        "description": "kinect_publisher",
        "peekOfCode": "IMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n        self.bridge_d = CvBridge()\n        self.msg_d = Image()\n        self.msg_info = CameraInfo()\n        self.msg_tf = TFMessage()\n    def getDepthImage(self,response_d):",
        "detail": "kinect_publisher",
        "documentation": {
            "value": "\n```python\nfrom kinect_publisher import IMAGE_HEIGHT\n```\n\n```python\n\n\n```\n\n```python\nIMAGE_HEIGHT = 480\nclass KinectPublisher:\n    def __init__(self):\n        self.bridge_rgb = CvBridge()\n        self.msg_rgb = Image()\n        self.bridge_d = CvBridge()\n        self.msg_d = Image()\n        self.msg_info = CameraInfo()\n        self.msg_tf = TFMessage()\n    def getDepthImage(self,response_d):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "land",
        "description": "land",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nlanded = client.getMultirotorState().landed_state\nif landed == airsim.LandedState.Landed:\n    print(\"already landed...\")\nelse:\n    print(\"landing...\")\n    client.landAsync().join()",
        "detail": "land",
        "documentation": {
            "value": "\n```python\nfrom land import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nlanded = client.getMultirotorState().landed_state\nif landed == airsim.LandedState.Landed:\n    print(\"already landed...\")\nelse:\n    print(\"landing...\")\n    client.landAsync().join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "landed",
        "kind": 5,
        "importPath": "land",
        "description": "land",
        "peekOfCode": "landed = client.getMultirotorState().landed_state\nif landed == airsim.LandedState.Landed:\n    print(\"already landed...\")\nelse:\n    print(\"landing...\")\n    client.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)",
        "detail": "land",
        "documentation": {
            "value": "\n```python\nfrom land import landed\n```\n\n```python\n\n\n```\n\n```python\nlanded = client.getMultirotorState().landed_state\nif landed == airsim.LandedState.Landed:\n    print(\"already landed...\")\nelse:\n    print(\"landing...\")\n    client.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "manual_mode_demo",
        "description": "manual_mode_demo",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nstate = client.getMultirotorState()\ns = pprint.pformat(state)\nprint(\"state: %s\" % s)\nclient.moveByManualAsync(vx_max = 1E6, vy_max = 1E6, z_min = -1E6, duration = 1E10)\nairsim.wait_key('Manual mode is setup. Press any key to send RC data to takeoff')\nclient.moveByRC(rcdata = airsim.RCData(pitch = 0.0, throttle = 1.0, is_initialized = True, is_valid = True))",
        "detail": "manual_mode_demo",
        "documentation": {
            "value": "\n```python\nfrom manual_mode_demo import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nstate = client.getMultirotorState()\ns = pprint.pformat(state)\nprint(\"state: %s\" % s)\nclient.moveByManualAsync(vx_max = 1E6, vy_max = 1E6, z_min = -1E6, duration = 1E10)\nairsim.wait_key('Manual mode is setup. Press any key to send RC data to takeoff')\nclient.moveByRC(rcdata = airsim.RCData(pitch = 0.0, throttle = 1.0, is_initialized = True, is_valid = True))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "manual_mode_demo",
        "description": "manual_mode_demo",
        "peekOfCode": "state = client.getMultirotorState()\ns = pprint.pformat(state)\nprint(\"state: %s\" % s)\nclient.moveByManualAsync(vx_max = 1E6, vy_max = 1E6, z_min = -1E6, duration = 1E10)\nairsim.wait_key('Manual mode is setup. Press any key to send RC data to takeoff')\nclient.moveByRC(rcdata = airsim.RCData(pitch = 0.0, throttle = 1.0, is_initialized = True, is_valid = True))\nairsim.wait_key('Set Yaw and pitch to 0.5')\nclient.moveByRC(rcdata = airsim.RCData(roll = 0.5, throttle = 1.0, yaw = 0.5, is_initialized = True, is_valid = True))",
        "detail": "manual_mode_demo",
        "documentation": {
            "value": "\n```python\nfrom manual_mode_demo import state\n```\n\n```python\n\n\n```\n\n```python\nstate = client.getMultirotorState()\ns = pprint.pformat(state)\nprint(\"state: %s\" % s)\nclient.moveByManualAsync(vx_max = 1E6, vy_max = 1E6, z_min = -1E6, duration = 1E10)\nairsim.wait_key('Manual mode is setup. Press any key to send RC data to takeoff')\nclient.moveByRC(rcdata = airsim.RCData(pitch = 0.0, throttle = 1.0, is_initialized = True, is_valid = True))\nairsim.wait_key('Set Yaw and pitch to 0.5')\nclient.moveByRC(rcdata = airsim.RCData(roll = 0.5, throttle = 1.0, yaw = 0.5, is_initialized = True, is_valid = True))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "manual_mode_demo",
        "description": "manual_mode_demo",
        "peekOfCode": "s = pprint.pformat(state)\nprint(\"state: %s\" % s)\nclient.moveByManualAsync(vx_max = 1E6, vy_max = 1E6, z_min = -1E6, duration = 1E10)\nairsim.wait_key('Manual mode is setup. Press any key to send RC data to takeoff')\nclient.moveByRC(rcdata = airsim.RCData(pitch = 0.0, throttle = 1.0, is_initialized = True, is_valid = True))\nairsim.wait_key('Set Yaw and pitch to 0.5')\nclient.moveByRC(rcdata = airsim.RCData(roll = 0.5, throttle = 1.0, yaw = 0.5, is_initialized = True, is_valid = True))",
        "detail": "manual_mode_demo",
        "documentation": {
            "value": "\n```python\nfrom manual_mode_demo import s\n```\n\n```python\n\n\n```\n\n```python\ns = pprint.pformat(state)\nprint(\"state: %s\" % s)\nclient.moveByManualAsync(vx_max = 1E6, vy_max = 1E6, z_min = -1E6, duration = 1E10)\nairsim.wait_key('Manual mode is setup. Press any key to send RC data to takeoff')\nclient.moveByRC(rcdata = airsim.RCData(pitch = 0.0, throttle = 1.0, is_initialized = True, is_valid = True))\nairsim.wait_key('Set Yaw and pitch to 0.5')\nclient.moveByRC(rcdata = airsim.RCData(roll = 0.5, throttle = 1.0, yaw = 0.5, is_initialized = True, is_valid = True))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.moveByManualAsync(vx_max",
        "kind": 5,
        "importPath": "manual_mode_demo",
        "description": "manual_mode_demo",
        "peekOfCode": "client.moveByManualAsync(vx_max = 1E6, vy_max = 1E6, z_min = -1E6, duration = 1E10)\nairsim.wait_key('Manual mode is setup. Press any key to send RC data to takeoff')\nclient.moveByRC(rcdata = airsim.RCData(pitch = 0.0, throttle = 1.0, is_initialized = True, is_valid = True))\nairsim.wait_key('Set Yaw and pitch to 0.5')\nclient.moveByRC(rcdata = airsim.RCData(roll = 0.5, throttle = 1.0, yaw = 0.5, is_initialized = True, is_valid = True))",
        "detail": "manual_mode_demo",
        "documentation": {
            "value": "\n```python\nfrom manual_mode_demo import client.moveByManualAsync(vx_max\n```\n\n```python\n\n\n```\n\n```python\nclient.moveByManualAsync(vx_max = 1E6, vy_max = 1E6, z_min = -1E6, duration = 1E10)\nairsim.wait_key('Manual mode is setup. Press any key to send RC data to takeoff')\nclient.moveByRC(rcdata = airsim.RCData(pitch = 0.0, throttle = 1.0, is_initialized = True, is_valid = True))\nairsim.wait_key('Set Yaw and pitch to 0.5')\nclient.moveByRC(rcdata = airsim.RCData(roll = 0.5, throttle = 1.0, yaw = 0.5, is_initialized = True, is_valid = True))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.moveByRC(rcdata",
        "kind": 5,
        "importPath": "manual_mode_demo",
        "description": "manual_mode_demo",
        "peekOfCode": "client.moveByRC(rcdata = airsim.RCData(pitch = 0.0, throttle = 1.0, is_initialized = True, is_valid = True))\nairsim.wait_key('Set Yaw and pitch to 0.5')\nclient.moveByRC(rcdata = airsim.RCData(roll = 0.5, throttle = 1.0, yaw = 0.5, is_initialized = True, is_valid = True))",
        "detail": "manual_mode_demo",
        "documentation": {
            "value": "\n```python\nfrom manual_mode_demo import client.moveByRC(rcdata\n```\n\n```python\n\n\n```\n\n```python\nclient.moveByRC(rcdata = airsim.RCData(pitch = 0.0, throttle = 1.0, is_initialized = True, is_valid = True))\nairsim.wait_key('Set Yaw and pitch to 0.5')\nclient.moveByRC(rcdata = airsim.RCData(roll = 0.5, throttle = 1.0, yaw = 0.5, is_initialized = True, is_valid = True))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.moveByRC(rcdata",
        "kind": 5,
        "importPath": "manual_mode_demo",
        "description": "manual_mode_demo",
        "peekOfCode": "client.moveByRC(rcdata = airsim.RCData(roll = 0.5, throttle = 1.0, yaw = 0.5, is_initialized = True, is_valid = True))",
        "detail": "manual_mode_demo",
        "documentation": {
            "value": "\n```python\nfrom manual_mode_demo import client.moveByRC(rcdata\n```\n\n```python\n\n\n```\n\n```python\nclient.moveByRC(rcdata = airsim.RCData(roll = 0.5, throttle = 1.0, yaw = 0.5, is_initialized = True, is_valid = True))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "multi_agent_drone",
        "description": "multi_agent_drone",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True, \"Drone1\")\nclient.enableApiControl(True, \"Drone2\")\nclient.armDisarm(True, \"Drone1\")\nclient.armDisarm(True, \"Drone2\")\nairsim.wait_key('Press any key to takeoff')\nf1 = client.takeoffAsync(vehicle_name=\"Drone1\")\nf2 = client.takeoffAsync(vehicle_name=\"Drone2\")\nf1.join()",
        "detail": "multi_agent_drone",
        "documentation": {
            "value": "\n```python\nfrom multi_agent_drone import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True, \"Drone1\")\nclient.enableApiControl(True, \"Drone2\")\nclient.armDisarm(True, \"Drone1\")\nclient.armDisarm(True, \"Drone2\")\nairsim.wait_key('Press any key to takeoff')\nf1 = client.takeoffAsync(vehicle_name=\"Drone1\")\nf2 = client.takeoffAsync(vehicle_name=\"Drone2\")\nf1.join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "f1",
        "kind": 5,
        "importPath": "multi_agent_drone",
        "description": "multi_agent_drone",
        "peekOfCode": "f1 = client.takeoffAsync(vehicle_name=\"Drone1\")\nf2 = client.takeoffAsync(vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\nstate1 = client.getMultirotorState(vehicle_name=\"Drone1\")\ns = pprint.pformat(state1)\nprint(\"state: %s\" % s)\nstate2 = client.getMultirotorState(vehicle_name=\"Drone2\")\ns = pprint.pformat(state2)\nprint(\"state: %s\" % s)",
        "detail": "multi_agent_drone",
        "documentation": {
            "value": "\n```python\nfrom multi_agent_drone import f1\n```\n\n```python\n\n\n```\n\n```python\nf1 = client.takeoffAsync(vehicle_name=\"Drone1\")\nf2 = client.takeoffAsync(vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\nstate1 = client.getMultirotorState(vehicle_name=\"Drone1\")\ns = pprint.pformat(state1)\nprint(\"state: %s\" % s)\nstate2 = client.getMultirotorState(vehicle_name=\"Drone2\")\ns = pprint.pformat(state2)\nprint(\"state: %s\" % s)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "f2",
        "kind": 5,
        "importPath": "multi_agent_drone",
        "description": "multi_agent_drone",
        "peekOfCode": "f2 = client.takeoffAsync(vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\nstate1 = client.getMultirotorState(vehicle_name=\"Drone1\")\ns = pprint.pformat(state1)\nprint(\"state: %s\" % s)\nstate2 = client.getMultirotorState(vehicle_name=\"Drone2\")\ns = pprint.pformat(state2)\nprint(\"state: %s\" % s)\nairsim.wait_key('Press any key to move vehicles')",
        "detail": "multi_agent_drone",
        "documentation": {
            "value": "\n```python\nfrom multi_agent_drone import f2\n```\n\n```python\n\n\n```\n\n```python\nf2 = client.takeoffAsync(vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\nstate1 = client.getMultirotorState(vehicle_name=\"Drone1\")\ns = pprint.pformat(state1)\nprint(\"state: %s\" % s)\nstate2 = client.getMultirotorState(vehicle_name=\"Drone2\")\ns = pprint.pformat(state2)\nprint(\"state: %s\" % s)\nairsim.wait_key('Press any key to move vehicles')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "state1",
        "kind": 5,
        "importPath": "multi_agent_drone",
        "description": "multi_agent_drone",
        "peekOfCode": "state1 = client.getMultirotorState(vehicle_name=\"Drone1\")\ns = pprint.pformat(state1)\nprint(\"state: %s\" % s)\nstate2 = client.getMultirotorState(vehicle_name=\"Drone2\")\ns = pprint.pformat(state2)\nprint(\"state: %s\" % s)\nairsim.wait_key('Press any key to move vehicles')\nf1 = client.moveToPositionAsync(-5, 5, -10, 5, vehicle_name=\"Drone1\")\nf2 = client.moveToPositionAsync(5, -5, -10, 5, vehicle_name=\"Drone2\")\nf1.join()",
        "detail": "multi_agent_drone",
        "documentation": {
            "value": "\n```python\nfrom multi_agent_drone import state1\n```\n\n```python\n\n\n```\n\n```python\nstate1 = client.getMultirotorState(vehicle_name=\"Drone1\")\ns = pprint.pformat(state1)\nprint(\"state: %s\" % s)\nstate2 = client.getMultirotorState(vehicle_name=\"Drone2\")\ns = pprint.pformat(state2)\nprint(\"state: %s\" % s)\nairsim.wait_key('Press any key to move vehicles')\nf1 = client.moveToPositionAsync(-5, 5, -10, 5, vehicle_name=\"Drone1\")\nf2 = client.moveToPositionAsync(5, -5, -10, 5, vehicle_name=\"Drone2\")\nf1.join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "multi_agent_drone",
        "description": "multi_agent_drone",
        "peekOfCode": "s = pprint.pformat(state1)\nprint(\"state: %s\" % s)\nstate2 = client.getMultirotorState(vehicle_name=\"Drone2\")\ns = pprint.pformat(state2)\nprint(\"state: %s\" % s)\nairsim.wait_key('Press any key to move vehicles')\nf1 = client.moveToPositionAsync(-5, 5, -10, 5, vehicle_name=\"Drone1\")\nf2 = client.moveToPositionAsync(5, -5, -10, 5, vehicle_name=\"Drone2\")\nf1.join()\nf2.join()",
        "detail": "multi_agent_drone",
        "documentation": {
            "value": "\n```python\nfrom multi_agent_drone import s\n```\n\n```python\n\n\n```\n\n```python\ns = pprint.pformat(state1)\nprint(\"state: %s\" % s)\nstate2 = client.getMultirotorState(vehicle_name=\"Drone2\")\ns = pprint.pformat(state2)\nprint(\"state: %s\" % s)\nairsim.wait_key('Press any key to move vehicles')\nf1 = client.moveToPositionAsync(-5, 5, -10, 5, vehicle_name=\"Drone1\")\nf2 = client.moveToPositionAsync(5, -5, -10, 5, vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "state2",
        "kind": 5,
        "importPath": "multi_agent_drone",
        "description": "multi_agent_drone",
        "peekOfCode": "state2 = client.getMultirotorState(vehicle_name=\"Drone2\")\ns = pprint.pformat(state2)\nprint(\"state: %s\" % s)\nairsim.wait_key('Press any key to move vehicles')\nf1 = client.moveToPositionAsync(-5, 5, -10, 5, vehicle_name=\"Drone1\")\nf2 = client.moveToPositionAsync(5, -5, -10, 5, vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\nairsim.wait_key('Press any key to take images')\n# get camera images from the car",
        "detail": "multi_agent_drone",
        "documentation": {
            "value": "\n```python\nfrom multi_agent_drone import state2\n```\n\n```python\n\n\n```\n\n```python\nstate2 = client.getMultirotorState(vehicle_name=\"Drone2\")\ns = pprint.pformat(state2)\nprint(\"state: %s\" % s)\nairsim.wait_key('Press any key to move vehicles')\nf1 = client.moveToPositionAsync(-5, 5, -10, 5, vehicle_name=\"Drone1\")\nf2 = client.moveToPositionAsync(5, -5, -10, 5, vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\nairsim.wait_key('Press any key to take images')\n# get camera images from the car\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "multi_agent_drone",
        "description": "multi_agent_drone",
        "peekOfCode": "s = pprint.pformat(state2)\nprint(\"state: %s\" % s)\nairsim.wait_key('Press any key to move vehicles')\nf1 = client.moveToPositionAsync(-5, 5, -10, 5, vehicle_name=\"Drone1\")\nf2 = client.moveToPositionAsync(5, -5, -10, 5, vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\nairsim.wait_key('Press any key to take images')\n# get camera images from the car\nresponses1 = client.simGetImages([",
        "detail": "multi_agent_drone",
        "documentation": {
            "value": "\n```python\nfrom multi_agent_drone import s\n```\n\n```python\n\n\n```\n\n```python\ns = pprint.pformat(state2)\nprint(\"state: %s\" % s)\nairsim.wait_key('Press any key to move vehicles')\nf1 = client.moveToPositionAsync(-5, 5, -10, 5, vehicle_name=\"Drone1\")\nf2 = client.moveToPositionAsync(5, -5, -10, 5, vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\nairsim.wait_key('Press any key to take images')\n# get camera images from the car\nresponses1 = client.simGetImages([\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "f1",
        "kind": 5,
        "importPath": "multi_agent_drone",
        "description": "multi_agent_drone",
        "peekOfCode": "f1 = client.moveToPositionAsync(-5, 5, -10, 5, vehicle_name=\"Drone1\")\nf2 = client.moveToPositionAsync(5, -5, -10, 5, vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\nairsim.wait_key('Press any key to take images')\n# get camera images from the car\nresponses1 = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)], vehicle_name=\"Drone1\")  #scene vision image in uncompressed RGB array\nprint('Drone1: Retrieved images: %d' % len(responses1))",
        "detail": "multi_agent_drone",
        "documentation": {
            "value": "\n```python\nfrom multi_agent_drone import f1\n```\n\n```python\n\n\n```\n\n```python\nf1 = client.moveToPositionAsync(-5, 5, -10, 5, vehicle_name=\"Drone1\")\nf2 = client.moveToPositionAsync(5, -5, -10, 5, vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\nairsim.wait_key('Press any key to take images')\n# get camera images from the car\nresponses1 = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)], vehicle_name=\"Drone1\")  #scene vision image in uncompressed RGB array\nprint('Drone1: Retrieved images: %d' % len(responses1))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "f2",
        "kind": 5,
        "importPath": "multi_agent_drone",
        "description": "multi_agent_drone",
        "peekOfCode": "f2 = client.moveToPositionAsync(5, -5, -10, 5, vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\nairsim.wait_key('Press any key to take images')\n# get camera images from the car\nresponses1 = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)], vehicle_name=\"Drone1\")  #scene vision image in uncompressed RGB array\nprint('Drone1: Retrieved images: %d' % len(responses1))\nresponses2 = client.simGetImages([",
        "detail": "multi_agent_drone",
        "documentation": {
            "value": "\n```python\nfrom multi_agent_drone import f2\n```\n\n```python\n\n\n```\n\n```python\nf2 = client.moveToPositionAsync(5, -5, -10, 5, vehicle_name=\"Drone2\")\nf1.join()\nf2.join()\nairsim.wait_key('Press any key to take images')\n# get camera images from the car\nresponses1 = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)], vehicle_name=\"Drone1\")  #scene vision image in uncompressed RGB array\nprint('Drone1: Retrieved images: %d' % len(responses1))\nresponses2 = client.simGetImages([\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "responses1",
        "kind": 5,
        "importPath": "multi_agent_drone",
        "description": "multi_agent_drone",
        "peekOfCode": "responses1 = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)], vehicle_name=\"Drone1\")  #scene vision image in uncompressed RGB array\nprint('Drone1: Retrieved images: %d' % len(responses1))\nresponses2 = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)], vehicle_name=\"Drone2\")  #scene vision image in uncompressed RGB array\nprint('Drone2: Retrieved images: %d' % len(responses2))\ntmp_dir = os.path.join(tempfile.gettempdir(), \"airsim_drone\")\nprint (\"Saving images to %s\" % tmp_dir)",
        "detail": "multi_agent_drone",
        "documentation": {
            "value": "\n```python\nfrom multi_agent_drone import responses1\n```\n\n```python\n\n\n```\n\n```python\nresponses1 = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)], vehicle_name=\"Drone1\")  #scene vision image in uncompressed RGB array\nprint('Drone1: Retrieved images: %d' % len(responses1))\nresponses2 = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)], vehicle_name=\"Drone2\")  #scene vision image in uncompressed RGB array\nprint('Drone2: Retrieved images: %d' % len(responses2))\ntmp_dir = os.path.join(tempfile.gettempdir(), \"airsim_drone\")\nprint (\"Saving images to %s\" % tmp_dir)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "responses2",
        "kind": 5,
        "importPath": "multi_agent_drone",
        "description": "multi_agent_drone",
        "peekOfCode": "responses2 = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)], vehicle_name=\"Drone2\")  #scene vision image in uncompressed RGB array\nprint('Drone2: Retrieved images: %d' % len(responses2))\ntmp_dir = os.path.join(tempfile.gettempdir(), \"airsim_drone\")\nprint (\"Saving images to %s\" % tmp_dir)\ntry:\n    os.makedirs(tmp_dir)\nexcept OSError:\n    if not os.path.isdir(tmp_dir):",
        "detail": "multi_agent_drone",
        "documentation": {
            "value": "\n```python\nfrom multi_agent_drone import responses2\n```\n\n```python\n\n\n```\n\n```python\nresponses2 = client.simGetImages([\n    airsim.ImageRequest(\"0\", airsim.ImageType.DepthVis),  #depth visualization image\n    airsim.ImageRequest(\"1\", airsim.ImageType.Scene, False, False)], vehicle_name=\"Drone2\")  #scene vision image in uncompressed RGB array\nprint('Drone2: Retrieved images: %d' % len(responses2))\ntmp_dir = os.path.join(tempfile.gettempdir(), \"airsim_drone\")\nprint (\"Saving images to %s\" % tmp_dir)\ntry:\n    os.makedirs(tmp_dir)\nexcept OSError:\n    if not os.path.isdir(tmp_dir):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tmp_dir",
        "kind": 5,
        "importPath": "multi_agent_drone",
        "description": "multi_agent_drone",
        "peekOfCode": "tmp_dir = os.path.join(tempfile.gettempdir(), \"airsim_drone\")\nprint (\"Saving images to %s\" % tmp_dir)\ntry:\n    os.makedirs(tmp_dir)\nexcept OSError:\n    if not os.path.isdir(tmp_dir):\n        raise\nfor idx, response in enumerate(responses1 + responses2):\n    filename = os.path.join(tmp_dir, str(idx))\n    if response.pixels_as_float:",
        "detail": "multi_agent_drone",
        "documentation": {
            "value": "\n```python\nfrom multi_agent_drone import tmp_dir\n```\n\n```python\n\n\n```\n\n```python\ntmp_dir = os.path.join(tempfile.gettempdir(), \"airsim_drone\")\nprint (\"Saving images to %s\" % tmp_dir)\ntry:\n    os.makedirs(tmp_dir)\nexcept OSError:\n    if not os.path.isdir(tmp_dir):\n        raise\nfor idx, response in enumerate(responses1 + responses2):\n    filename = os.path.join(tmp_dir, str(idx))\n    if response.pixels_as_float:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "navigate",
        "description": "navigate",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# you must first press \"1\" in the AirSim view to turn on the depth capture\n# get depth image\nyaw = 0\npi = 3.14159265483\nvx = 0",
        "detail": "navigate",
        "documentation": {
            "value": "\n```python\nfrom navigate import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# you must first press \"1\" in the AirSim view to turn on the depth capture\n# get depth image\nyaw = 0\npi = 3.14159265483\nvx = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "yaw",
        "kind": 5,
        "importPath": "navigate",
        "description": "navigate",
        "peekOfCode": "yaw = 0\npi = 3.14159265483\nvx = 0\nvy = 0\ndriving = 0\nhelp = False\nwhile True:\n    # this will return png width= 256, height= 144\n    result = client.simGetImage(\"0\", airsim.ImageType.DepthVis)\n    if (result == \"\\0\"):",
        "detail": "navigate",
        "documentation": {
            "value": "\n```python\nfrom navigate import yaw\n```\n\n```python\n\n\n```\n\n```python\nyaw = 0\npi = 3.14159265483\nvx = 0\nvy = 0\ndriving = 0\nhelp = False\nwhile True:\n    # this will return png width= 256, height= 144\n    result = client.simGetImage(\"0\", airsim.ImageType.DepthVis)\n    if (result == \"\\0\"):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pi",
        "kind": 5,
        "importPath": "navigate",
        "description": "navigate",
        "peekOfCode": "pi = 3.14159265483\nvx = 0\nvy = 0\ndriving = 0\nhelp = False\nwhile True:\n    # this will return png width= 256, height= 144\n    result = client.simGetImage(\"0\", airsim.ImageType.DepthVis)\n    if (result == \"\\0\"):\n        if (not help):",
        "detail": "navigate",
        "documentation": {
            "value": "\n```python\nfrom navigate import pi\n```\n\n```python\n\n\n```\n\n```python\npi = 3.14159265483\nvx = 0\nvy = 0\ndriving = 0\nhelp = False\nwhile True:\n    # this will return png width= 256, height= 144\n    result = client.simGetImage(\"0\", airsim.ImageType.DepthVis)\n    if (result == \"\\0\"):\n        if (not help):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vx",
        "kind": 5,
        "importPath": "navigate",
        "description": "navigate",
        "peekOfCode": "vx = 0\nvy = 0\ndriving = 0\nhelp = False\nwhile True:\n    # this will return png width= 256, height= 144\n    result = client.simGetImage(\"0\", airsim.ImageType.DepthVis)\n    if (result == \"\\0\"):\n        if (not help):\n            help = True",
        "detail": "navigate",
        "documentation": {
            "value": "\n```python\nfrom navigate import vx\n```\n\n```python\n\n\n```\n\n```python\nvx = 0\nvy = 0\ndriving = 0\nhelp = False\nwhile True:\n    # this will return png width= 256, height= 144\n    result = client.simGetImage(\"0\", airsim.ImageType.DepthVis)\n    if (result == \"\\0\"):\n        if (not help):\n            help = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vy",
        "kind": 5,
        "importPath": "navigate",
        "description": "navigate",
        "peekOfCode": "vy = 0\ndriving = 0\nhelp = False\nwhile True:\n    # this will return png width= 256, height= 144\n    result = client.simGetImage(\"0\", airsim.ImageType.DepthVis)\n    if (result == \"\\0\"):\n        if (not help):\n            help = True\n            print(\"Please press '1' in the AirSim view to enable the Depth camera view\")",
        "detail": "navigate",
        "documentation": {
            "value": "\n```python\nfrom navigate import vy\n```\n\n```python\n\n\n```\n\n```python\nvy = 0\ndriving = 0\nhelp = False\nwhile True:\n    # this will return png width= 256, height= 144\n    result = client.simGetImage(\"0\", airsim.ImageType.DepthVis)\n    if (result == \"\\0\"):\n        if (not help):\n            help = True\n            print(\"Please press '1' in the AirSim view to enable the Depth camera view\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "driving",
        "kind": 5,
        "importPath": "navigate",
        "description": "navigate",
        "peekOfCode": "driving = 0\nhelp = False\nwhile True:\n    # this will return png width= 256, height= 144\n    result = client.simGetImage(\"0\", airsim.ImageType.DepthVis)\n    if (result == \"\\0\"):\n        if (not help):\n            help = True\n            print(\"Please press '1' in the AirSim view to enable the Depth camera view\")\n    else:    ",
        "detail": "navigate",
        "documentation": {
            "value": "\n```python\nfrom navigate import driving\n```\n\n```python\n\n\n```\n\n```python\ndriving = 0\nhelp = False\nwhile True:\n    # this will return png width= 256, height= 144\n    result = client.simGetImage(\"0\", airsim.ImageType.DepthVis)\n    if (result == \"\\0\"):\n        if (not help):\n            help = True\n            print(\"Please press '1' in the AirSim view to enable the Depth camera view\")\n    else:    \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "help",
        "kind": 5,
        "importPath": "navigate",
        "description": "navigate",
        "peekOfCode": "help = False\nwhile True:\n    # this will return png width= 256, height= 144\n    result = client.simGetImage(\"0\", airsim.ImageType.DepthVis)\n    if (result == \"\\0\"):\n        if (not help):\n            help = True\n            print(\"Please press '1' in the AirSim view to enable the Depth camera view\")\n    else:    \n        rawImage = np.fromstring(result, np.int8)",
        "detail": "navigate",
        "documentation": {
            "value": "\n```python\nfrom navigate import help\n```\n\n```python\n\n\n```\n\n```python\nhelp = False\nwhile True:\n    # this will return png width= 256, height= 144\n    result = client.simGetImage(\"0\", airsim.ImageType.DepthVis)\n    if (result == \"\\0\"):\n        if (not help):\n            help = True\n            print(\"Please press '1' in the AirSim view to enable the Depth camera view\")\n    else:    \n        rawImage = np.fromstring(result, np.int8)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "printUsage",
        "kind": 2,
        "importPath": "opencv_show",
        "description": "opencv_show",
        "peekOfCode": "def printUsage():\n   print(\"Usage: python camera.py [depth|segmentation|scene]\")\ncameraType = \"depth\"\nfor arg in sys.argv[1:]:\n  cameraType = arg.lower()\ncameraTypeMap = { \n \"depth\": airsim.ImageType.DepthVis,\n \"segmentation\": airsim.ImageType.Segmentation,\n \"seg\": airsim.ImageType.Segmentation,\n \"scene\": airsim.ImageType.Scene,",
        "detail": "opencv_show",
        "documentation": {
            "value": "\n```python\nfrom opencv_show import printUsage\n```\n\n```python\n\n\n```\n\n```python\ndef printUsage():\n   print(\"Usage: python camera.py [depth|segmentation|scene]\")\ncameraType = \"depth\"\nfor arg in sys.argv[1:]:\n  cameraType = arg.lower()\ncameraTypeMap = { \n \"depth\": airsim.ImageType.DepthVis,\n \"segmentation\": airsim.ImageType.Segmentation,\n \"seg\": airsim.ImageType.Segmentation,\n \"scene\": airsim.ImageType.Scene,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cameraType",
        "kind": 5,
        "importPath": "opencv_show",
        "description": "opencv_show",
        "peekOfCode": "cameraType = \"depth\"\nfor arg in sys.argv[1:]:\n  cameraType = arg.lower()\ncameraTypeMap = { \n \"depth\": airsim.ImageType.DepthVis,\n \"segmentation\": airsim.ImageType.Segmentation,\n \"seg\": airsim.ImageType.Segmentation,\n \"scene\": airsim.ImageType.Scene,\n \"disparity\": airsim.ImageType.DisparityNormalized,\n \"normals\": airsim.ImageType.SurfaceNormals",
        "detail": "opencv_show",
        "documentation": {
            "value": "\n```python\nfrom opencv_show import cameraType\n```\n\n```python\n\n\n```\n\n```python\ncameraType = \"depth\"\nfor arg in sys.argv[1:]:\n  cameraType = arg.lower()\ncameraTypeMap = { \n \"depth\": airsim.ImageType.DepthVis,\n \"segmentation\": airsim.ImageType.Segmentation,\n \"seg\": airsim.ImageType.Segmentation,\n \"scene\": airsim.ImageType.Scene,\n \"disparity\": airsim.ImageType.DisparityNormalized,\n \"normals\": airsim.ImageType.SurfaceNormals\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cameraTypeMap",
        "kind": 5,
        "importPath": "opencv_show",
        "description": "opencv_show",
        "peekOfCode": "cameraTypeMap = { \n \"depth\": airsim.ImageType.DepthVis,\n \"segmentation\": airsim.ImageType.Segmentation,\n \"seg\": airsim.ImageType.Segmentation,\n \"scene\": airsim.ImageType.Scene,\n \"disparity\": airsim.ImageType.DisparityNormalized,\n \"normals\": airsim.ImageType.SurfaceNormals\n}\nif (not cameraType in cameraTypeMap):\n  printUsage()",
        "detail": "opencv_show",
        "documentation": {
            "value": "\n```python\nfrom opencv_show import cameraTypeMap\n```\n\n```python\n\n\n```\n\n```python\ncameraTypeMap = { \n \"depth\": airsim.ImageType.DepthVis,\n \"segmentation\": airsim.ImageType.Segmentation,\n \"seg\": airsim.ImageType.Segmentation,\n \"scene\": airsim.ImageType.Scene,\n \"disparity\": airsim.ImageType.DisparityNormalized,\n \"normals\": airsim.ImageType.SurfaceNormals\n}\nif (not cameraType in cameraTypeMap):\n  printUsage()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "opencv_show",
        "description": "opencv_show",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nhelp = False\nfontFace = cv2.FONT_HERSHEY_SIMPLEX\nfontScale = 0.5\nthickness = 2\ntextSize, baseline = cv2.getTextSize(\"FPS\", fontFace, fontScale, thickness)",
        "detail": "opencv_show",
        "documentation": {
            "value": "\n```python\nfrom opencv_show import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nhelp = False\nfontFace = cv2.FONT_HERSHEY_SIMPLEX\nfontScale = 0.5\nthickness = 2\ntextSize, baseline = cv2.getTextSize(\"FPS\", fontFace, fontScale, thickness)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "help",
        "kind": 5,
        "importPath": "opencv_show",
        "description": "opencv_show",
        "peekOfCode": "help = False\nfontFace = cv2.FONT_HERSHEY_SIMPLEX\nfontScale = 0.5\nthickness = 2\ntextSize, baseline = cv2.getTextSize(\"FPS\", fontFace, fontScale, thickness)\nprint (textSize)\ntextOrg = (10, 10 + textSize[1])\nframeCount = 0\nstartTime=time.clock()\nfps = 0",
        "detail": "opencv_show",
        "documentation": {
            "value": "\n```python\nfrom opencv_show import help\n```\n\n```python\n\n\n```\n\n```python\nhelp = False\nfontFace = cv2.FONT_HERSHEY_SIMPLEX\nfontScale = 0.5\nthickness = 2\ntextSize, baseline = cv2.getTextSize(\"FPS\", fontFace, fontScale, thickness)\nprint (textSize)\ntextOrg = (10, 10 + textSize[1])\nframeCount = 0\nstartTime=time.clock()\nfps = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fontFace",
        "kind": 5,
        "importPath": "opencv_show",
        "description": "opencv_show",
        "peekOfCode": "fontFace = cv2.FONT_HERSHEY_SIMPLEX\nfontScale = 0.5\nthickness = 2\ntextSize, baseline = cv2.getTextSize(\"FPS\", fontFace, fontScale, thickness)\nprint (textSize)\ntextOrg = (10, 10 + textSize[1])\nframeCount = 0\nstartTime=time.clock()\nfps = 0\nwhile True:",
        "detail": "opencv_show",
        "documentation": {
            "value": "\n```python\nfrom opencv_show import fontFace\n```\n\n```python\n\n\n```\n\n```python\nfontFace = cv2.FONT_HERSHEY_SIMPLEX\nfontScale = 0.5\nthickness = 2\ntextSize, baseline = cv2.getTextSize(\"FPS\", fontFace, fontScale, thickness)\nprint (textSize)\ntextOrg = (10, 10 + textSize[1])\nframeCount = 0\nstartTime=time.clock()\nfps = 0\nwhile True:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fontScale",
        "kind": 5,
        "importPath": "opencv_show",
        "description": "opencv_show",
        "peekOfCode": "fontScale = 0.5\nthickness = 2\ntextSize, baseline = cv2.getTextSize(\"FPS\", fontFace, fontScale, thickness)\nprint (textSize)\ntextOrg = (10, 10 + textSize[1])\nframeCount = 0\nstartTime=time.clock()\nfps = 0\nwhile True:\n    # because this method returns std::vector<uint8>, msgpack decides to encode it as a string unfortunately.",
        "detail": "opencv_show",
        "documentation": {
            "value": "\n```python\nfrom opencv_show import fontScale\n```\n\n```python\n\n\n```\n\n```python\nfontScale = 0.5\nthickness = 2\ntextSize, baseline = cv2.getTextSize(\"FPS\", fontFace, fontScale, thickness)\nprint (textSize)\ntextOrg = (10, 10 + textSize[1])\nframeCount = 0\nstartTime=time.clock()\nfps = 0\nwhile True:\n    # because this method returns std::vector<uint8>, msgpack decides to encode it as a string unfortunately.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "thickness",
        "kind": 5,
        "importPath": "opencv_show",
        "description": "opencv_show",
        "peekOfCode": "thickness = 2\ntextSize, baseline = cv2.getTextSize(\"FPS\", fontFace, fontScale, thickness)\nprint (textSize)\ntextOrg = (10, 10 + textSize[1])\nframeCount = 0\nstartTime=time.clock()\nfps = 0\nwhile True:\n    # because this method returns std::vector<uint8>, msgpack decides to encode it as a string unfortunately.\n    rawImage = client.simGetImage(\"0\", cameraTypeMap[cameraType])",
        "detail": "opencv_show",
        "documentation": {
            "value": "\n```python\nfrom opencv_show import thickness\n```\n\n```python\n\n\n```\n\n```python\nthickness = 2\ntextSize, baseline = cv2.getTextSize(\"FPS\", fontFace, fontScale, thickness)\nprint (textSize)\ntextOrg = (10, 10 + textSize[1])\nframeCount = 0\nstartTime=time.clock()\nfps = 0\nwhile True:\n    # because this method returns std::vector<uint8>, msgpack decides to encode it as a string unfortunately.\n    rawImage = client.simGetImage(\"0\", cameraTypeMap[cameraType])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "textOrg",
        "kind": 5,
        "importPath": "opencv_show",
        "description": "opencv_show",
        "peekOfCode": "textOrg = (10, 10 + textSize[1])\nframeCount = 0\nstartTime=time.clock()\nfps = 0\nwhile True:\n    # because this method returns std::vector<uint8>, msgpack decides to encode it as a string unfortunately.\n    rawImage = client.simGetImage(\"0\", cameraTypeMap[cameraType])\n    if (rawImage == None):\n        print(\"Camera is not returning image, please check airsim for error messages\")\n        sys.exit(0)",
        "detail": "opencv_show",
        "documentation": {
            "value": "\n```python\nfrom opencv_show import textOrg\n```\n\n```python\n\n\n```\n\n```python\ntextOrg = (10, 10 + textSize[1])\nframeCount = 0\nstartTime=time.clock()\nfps = 0\nwhile True:\n    # because this method returns std::vector<uint8>, msgpack decides to encode it as a string unfortunately.\n    rawImage = client.simGetImage(\"0\", cameraTypeMap[cameraType])\n    if (rawImage == None):\n        print(\"Camera is not returning image, please check airsim for error messages\")\n        sys.exit(0)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "frameCount",
        "kind": 5,
        "importPath": "opencv_show",
        "description": "opencv_show",
        "peekOfCode": "frameCount = 0\nstartTime=time.clock()\nfps = 0\nwhile True:\n    # because this method returns std::vector<uint8>, msgpack decides to encode it as a string unfortunately.\n    rawImage = client.simGetImage(\"0\", cameraTypeMap[cameraType])\n    if (rawImage == None):\n        print(\"Camera is not returning image, please check airsim for error messages\")\n        sys.exit(0)\n    else:",
        "detail": "opencv_show",
        "documentation": {
            "value": "\n```python\nfrom opencv_show import frameCount\n```\n\n```python\n\n\n```\n\n```python\nframeCount = 0\nstartTime=time.clock()\nfps = 0\nwhile True:\n    # because this method returns std::vector<uint8>, msgpack decides to encode it as a string unfortunately.\n    rawImage = client.simGetImage(\"0\", cameraTypeMap[cameraType])\n    if (rawImage == None):\n        print(\"Camera is not returning image, please check airsim for error messages\")\n        sys.exit(0)\n    else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fps",
        "kind": 5,
        "importPath": "opencv_show",
        "description": "opencv_show",
        "peekOfCode": "fps = 0\nwhile True:\n    # because this method returns std::vector<uint8>, msgpack decides to encode it as a string unfortunately.\n    rawImage = client.simGetImage(\"0\", cameraTypeMap[cameraType])\n    if (rawImage == None):\n        print(\"Camera is not returning image, please check airsim for error messages\")\n        sys.exit(0)\n    else:\n        png = cv2.imdecode(airsim.string_to_uint8_array(rawImage), cv2.IMREAD_UNCHANGED)\n        cv2.putText(png,'FPS ' + str(fps),textOrg, fontFace, fontScale,(255,0,255),thickness)",
        "detail": "opencv_show",
        "documentation": {
            "value": "\n```python\nfrom opencv_show import fps\n```\n\n```python\n\n\n```\n\n```python\nfps = 0\nwhile True:\n    # because this method returns std::vector<uint8>, msgpack decides to encode it as a string unfortunately.\n    rawImage = client.simGetImage(\"0\", cameraTypeMap[cameraType])\n    if (rawImage == None):\n        print(\"Camera is not returning image, please check airsim for error messages\")\n        sys.exit(0)\n    else:\n        png = cv2.imdecode(airsim.string_to_uint8_array(rawImage), cv2.IMREAD_UNCHANGED)\n        cv2.putText(png,'FPS ' + str(fps),textOrg, fontFace, fontScale,(255,0,255),thickness)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Position",
        "kind": 6,
        "importPath": "orbit",
        "description": "orbit",
        "peekOfCode": "class Position:\n    def __init__(self, pos):\n        self.x = pos.x_val\n        self.y = pos.y_val\n        self.z = pos.z_val\n# Make the drone fly in a circle.\nclass OrbitNavigator:\n    def __init__(self, radius = 2, altitude = 10, speed = 2, iterations = 1, center = [1,0], snapshots = None):\n        self.radius = radius\n        self.altitude = altitude",
        "detail": "orbit",
        "documentation": {
            "value": "\n```python\nfrom orbit import Position\n```\n\n```python\n\n\n```\n\n```python\nclass Position:\n    def __init__(self, pos):\n        self.x = pos.x_val\n        self.y = pos.y_val\n        self.z = pos.z_val\n# Make the drone fly in a circle.\nclass OrbitNavigator:\n    def __init__(self, radius = 2, altitude = 10, speed = 2, iterations = 1, center = [1,0], snapshots = None):\n        self.radius = radius\n        self.altitude = altitude\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OrbitNavigator",
        "kind": 6,
        "importPath": "orbit",
        "description": "orbit",
        "peekOfCode": "class OrbitNavigator:\n    def __init__(self, radius = 2, altitude = 10, speed = 2, iterations = 1, center = [1,0], snapshots = None):\n        self.radius = radius\n        self.altitude = altitude\n        self.speed = speed\n        self.iterations = iterations\n        self.snapshots = snapshots\n        self.snapshot_delta = None\n        self.next_snapshot = None\n        self.z = None",
        "detail": "orbit",
        "documentation": {
            "value": "\n```python\nfrom orbit import OrbitNavigator\n```\n\n```python\n\n\n```\n\n```python\nclass OrbitNavigator:\n    def __init__(self, radius = 2, altitude = 10, speed = 2, iterations = 1, center = [1,0], snapshots = None):\n        self.radius = radius\n        self.altitude = altitude\n        self.speed = speed\n        self.iterations = iterations\n        self.snapshots = snapshots\n        self.snapshot_delta = None\n        self.next_snapshot = None\n        self.z = None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "path",
        "description": "path",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nprint(\"arming the drone...\")\nclient.armDisarm(True)\nstate = client.getMultirotorState()\nif state.landed_state == airsim.LandedState.Landed:\n    print(\"taking off...\")\n    client.takeoffAsync().join()\nelse:",
        "detail": "path",
        "documentation": {
            "value": "\n```python\nfrom path import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nprint(\"arming the drone...\")\nclient.armDisarm(True)\nstate = client.getMultirotorState()\nif state.landed_state == airsim.LandedState.Landed:\n    print(\"taking off...\")\n    client.takeoffAsync().join()\nelse:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "path",
        "description": "path",
        "peekOfCode": "state = client.getMultirotorState()\nif state.landed_state == airsim.LandedState.Landed:\n    print(\"taking off...\")\n    client.takeoffAsync().join()\nelse:\n    client.hoverAsync().join()\ntime.sleep(1)\nstate = client.getMultirotorState()\nif state.landed_state == airsim.LandedState.Landed:\n    print(\"take off failed...\")",
        "detail": "path",
        "documentation": {
            "value": "\n```python\nfrom path import state\n```\n\n```python\n\n\n```\n\n```python\nstate = client.getMultirotorState()\nif state.landed_state == airsim.LandedState.Landed:\n    print(\"taking off...\")\n    client.takeoffAsync().join()\nelse:\n    client.hoverAsync().join()\ntime.sleep(1)\nstate = client.getMultirotorState()\nif state.landed_state == airsim.LandedState.Landed:\n    print(\"take off failed...\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "path",
        "description": "path",
        "peekOfCode": "state = client.getMultirotorState()\nif state.landed_state == airsim.LandedState.Landed:\n    print(\"take off failed...\")\n    sys.exit(1)\n# AirSim uses NED coordinates so negative axis is up.\n# z of -7 is 7 meters above the original launch point.\nz = -7\nprint(\"make sure we are hovering at 7 meters...\")\nclient.moveToZAsync(z, 1).join()\n# see https://github.com/Microsoft/AirSim/wiki/moveOnPath-demo",
        "detail": "path",
        "documentation": {
            "value": "\n```python\nfrom path import state\n```\n\n```python\n\n\n```\n\n```python\nstate = client.getMultirotorState()\nif state.landed_state == airsim.LandedState.Landed:\n    print(\"take off failed...\")\n    sys.exit(1)\n# AirSim uses NED coordinates so negative axis is up.\n# z of -7 is 7 meters above the original launch point.\nz = -7\nprint(\"make sure we are hovering at 7 meters...\")\nclient.moveToZAsync(z, 1).join()\n# see https://github.com/Microsoft/AirSim/wiki/moveOnPath-demo\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "path",
        "description": "path",
        "peekOfCode": "z = -7\nprint(\"make sure we are hovering at 7 meters...\")\nclient.moveToZAsync(z, 1).join()\n# see https://github.com/Microsoft/AirSim/wiki/moveOnPath-demo\n# this method is async and we are not waiting for the result since we are passing timeout_sec=0.\nprint(\"flying on path...\")\nresult = client.moveOnPathAsync([airsim.Vector3r(125,0,z),\n                                airsim.Vector3r(125,-130,z),\n                                airsim.Vector3r(0,-130,z),\n                                airsim.Vector3r(0,0,z)],",
        "detail": "path",
        "documentation": {
            "value": "\n```python\nfrom path import z\n```\n\n```python\n\n\n```\n\n```python\nz = -7\nprint(\"make sure we are hovering at 7 meters...\")\nclient.moveToZAsync(z, 1).join()\n# see https://github.com/Microsoft/AirSim/wiki/moveOnPath-demo\n# this method is async and we are not waiting for the result since we are passing timeout_sec=0.\nprint(\"flying on path...\")\nresult = client.moveOnPathAsync([airsim.Vector3r(125,0,z),\n                                airsim.Vector3r(125,-130,z),\n                                airsim.Vector3r(0,-130,z),\n                                airsim.Vector3r(0,0,z)],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "path",
        "description": "path",
        "peekOfCode": "result = client.moveOnPathAsync([airsim.Vector3r(125,0,z),\n                                airsim.Vector3r(125,-130,z),\n                                airsim.Vector3r(0,-130,z),\n                                airsim.Vector3r(0,0,z)],\n                        12, 120,\n                        airsim.DrivetrainType.ForwardOnly, airsim.YawMode(False,0), 20, 1).join()\n# drone will over-shoot so we bring it back to the start point before landing.\nclient.moveToPositionAsync(0,0,z,1).join()\nprint(\"landing...\")\nclient.landAsync().join()",
        "detail": "path",
        "documentation": {
            "value": "\n```python\nfrom path import result\n```\n\n```python\n\n\n```\n\n```python\nresult = client.moveOnPathAsync([airsim.Vector3r(125,0,z),\n                                airsim.Vector3r(125,-130,z),\n                                airsim.Vector3r(0,-130,z),\n                                airsim.Vector3r(0,0,z)],\n                        12, 120,\n                        airsim.DrivetrainType.ForwardOnly, airsim.YawMode(False,0), 20, 1).join()\n# drone will over-shoot so we bring it back to the start point before landing.\nclient.moveToPositionAsync(0,0,z,1).join()\nprint(\"landing...\")\nclient.landAsync().join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "pause_continue_drone",
        "description": "pause_continue_drone",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nprint(\"Taking off\")\nclient.moveByVelocityZAsync(0, 0, -20, 8).join()\ntime.sleep(3)    \nfor i in range(1, 6):\n    print(\"Starting command to run for 15sec\")\n    client.moveByVelocityZAsync(-1*i, -1*i, -20-i, 15)",
        "detail": "pause_continue_drone",
        "documentation": {
            "value": "\n```python\nfrom pause_continue_drone import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nprint(\"Taking off\")\nclient.moveByVelocityZAsync(0, 0, -20, 8).join()\ntime.sleep(3)    \nfor i in range(1, 6):\n    print(\"Starting command to run for 15sec\")\n    client.moveByVelocityZAsync(-1*i, -1*i, -20-i, 15)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client = airsim.VehicleClient()\nclient.confirmConnection()\n# plot red arrows for 30 seconds\nclient.simPlotArrows(points_start = [Vector3r(x,y,0) for x, y in zip(np.linspace(0,10,20), np.linspace(0,0,20))], \n                        points_end = [Vector3r(x,y,0) for x, y in zip(np.linspace(0,10,20), np.linspace(10,10,20))], \n                        color_rgba = [1.0, 0.0, 1.0, 1.0], duration = 30.0, arrow_size = 10, thickness = 1)\n# plot magenta arrows for 15 seconds\nclient.simPlotArrows(points_start = [Vector3r(x,y,-3) for x, y in zip(np.linspace(0,10,20), np.linspace(0,0,20))], \n                        points_end = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,10,20), np.linspace(10,20,20))], \n                        color_rgba = [1.0, 1.0, 0.0, 1.0], duration = 15.0, arrow_size = 20, thickness = 3)",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.VehicleClient()\nclient.confirmConnection()\n# plot red arrows for 30 seconds\nclient.simPlotArrows(points_start = [Vector3r(x,y,0) for x, y in zip(np.linspace(0,10,20), np.linspace(0,0,20))], \n                        points_end = [Vector3r(x,y,0) for x, y in zip(np.linspace(0,10,20), np.linspace(10,10,20))], \n                        color_rgba = [1.0, 0.0, 1.0, 1.0], duration = 30.0, arrow_size = 10, thickness = 1)\n# plot magenta arrows for 15 seconds\nclient.simPlotArrows(points_start = [Vector3r(x,y,-3) for x, y in zip(np.linspace(0,10,20), np.linspace(0,0,20))], \n                        points_end = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,10,20), np.linspace(10,20,20))], \n                        color_rgba = [1.0, 1.0, 0.0, 1.0], duration = 15.0, arrow_size = 20, thickness = 3)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotArrows(points_start",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotArrows(points_start = [Vector3r(x,y,0) for x, y in zip(np.linspace(0,10,20), np.linspace(0,0,20))], \n                        points_end = [Vector3r(x,y,0) for x, y in zip(np.linspace(0,10,20), np.linspace(10,10,20))], \n                        color_rgba = [1.0, 0.0, 1.0, 1.0], duration = 30.0, arrow_size = 10, thickness = 1)\n# plot magenta arrows for 15 seconds\nclient.simPlotArrows(points_start = [Vector3r(x,y,-3) for x, y in zip(np.linspace(0,10,20), np.linspace(0,0,20))], \n                        points_end = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,10,20), np.linspace(10,20,20))], \n                        color_rgba = [1.0, 1.0, 0.0, 1.0], duration = 15.0, arrow_size = 20, thickness = 3)\n# plot red arrows for 10 seconds\nclient.simPlotArrows(points_start = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,0,20), np.linspace(-3,-10, 20))], \n                        points_end = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(10,20,20), np.linspace(-5,-8, 20))], ",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotArrows(points_start\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotArrows(points_start = [Vector3r(x,y,0) for x, y in zip(np.linspace(0,10,20), np.linspace(0,0,20))], \n                        points_end = [Vector3r(x,y,0) for x, y in zip(np.linspace(0,10,20), np.linspace(10,10,20))], \n                        color_rgba = [1.0, 0.0, 1.0, 1.0], duration = 30.0, arrow_size = 10, thickness = 1)\n# plot magenta arrows for 15 seconds\nclient.simPlotArrows(points_start = [Vector3r(x,y,-3) for x, y in zip(np.linspace(0,10,20), np.linspace(0,0,20))], \n                        points_end = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,10,20), np.linspace(10,20,20))], \n                        color_rgba = [1.0, 1.0, 0.0, 1.0], duration = 15.0, arrow_size = 20, thickness = 3)\n# plot red arrows for 10 seconds\nclient.simPlotArrows(points_start = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,0,20), np.linspace(-3,-10, 20))], \n                        points_end = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(10,20,20), np.linspace(-5,-8, 20))], \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotArrows(points_start",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotArrows(points_start = [Vector3r(x,y,-3) for x, y in zip(np.linspace(0,10,20), np.linspace(0,0,20))], \n                        points_end = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,10,20), np.linspace(10,20,20))], \n                        color_rgba = [1.0, 1.0, 0.0, 1.0], duration = 15.0, arrow_size = 20, thickness = 3)\n# plot red arrows for 10 seconds\nclient.simPlotArrows(points_start = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,0,20), np.linspace(-3,-10, 20))], \n                        points_end = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(10,20,20), np.linspace(-5,-8, 20))], \n                        color_rgba = [1.0, 0.0, 0.0, 1.0], duration = 10.0, arrow_size = 100, thickness = 5)\n# plot 2 white arrows which are persistent \nclient.simPlotArrows(points_start = [Vector3r(x,y,-2) for x, y in zip(np.linspace(0,10,20), np.linspace(0,20,20))], \n                        points_end = [Vector3r(x,y,-5) for x, y in zip(np.linspace(3,17,20), np.linspace(5,28,20))], ",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotArrows(points_start\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotArrows(points_start = [Vector3r(x,y,-3) for x, y in zip(np.linspace(0,10,20), np.linspace(0,0,20))], \n                        points_end = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,10,20), np.linspace(10,20,20))], \n                        color_rgba = [1.0, 1.0, 0.0, 1.0], duration = 15.0, arrow_size = 20, thickness = 3)\n# plot red arrows for 10 seconds\nclient.simPlotArrows(points_start = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,0,20), np.linspace(-3,-10, 20))], \n                        points_end = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(10,20,20), np.linspace(-5,-8, 20))], \n                        color_rgba = [1.0, 0.0, 0.0, 1.0], duration = 10.0, arrow_size = 100, thickness = 5)\n# plot 2 white arrows which are persistent \nclient.simPlotArrows(points_start = [Vector3r(x,y,-2) for x, y in zip(np.linspace(0,10,20), np.linspace(0,20,20))], \n                        points_end = [Vector3r(x,y,-5) for x, y in zip(np.linspace(3,17,20), np.linspace(5,28,20))], \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotArrows(points_start",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotArrows(points_start = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,0,20), np.linspace(-3,-10, 20))], \n                        points_end = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(10,20,20), np.linspace(-5,-8, 20))], \n                        color_rgba = [1.0, 0.0, 0.0, 1.0], duration = 10.0, arrow_size = 100, thickness = 5)\n# plot 2 white arrows which are persistent \nclient.simPlotArrows(points_start = [Vector3r(x,y,-2) for x, y in zip(np.linspace(0,10,20), np.linspace(0,20,20))], \n                        points_end = [Vector3r(x,y,-5) for x, y in zip(np.linspace(3,17,20), np.linspace(5,28,20))], \n                        color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 5.0, arrow_size = 100, thickness = 1, is_persistent = True)\n# plot points \nclient.simPlotPoints(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,20), np.linspace(0,-20,20))], color_rgba=[1.0, 0.0, 0.0, 1.0], size = 25, duration = 20.0, is_persistent = False)\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,-10,20), np.linspace(0,-20,20), np.linspace(0,-5,20))], color_rgba=[0.0, 0.0, 1.0, 1.0], size = 10, duration = 20.0, is_persistent = False)",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotArrows(points_start\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotArrows(points_start = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,0,20), np.linspace(-3,-10, 20))], \n                        points_end = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(10,20,20), np.linspace(-5,-8, 20))], \n                        color_rgba = [1.0, 0.0, 0.0, 1.0], duration = 10.0, arrow_size = 100, thickness = 5)\n# plot 2 white arrows which are persistent \nclient.simPlotArrows(points_start = [Vector3r(x,y,-2) for x, y in zip(np.linspace(0,10,20), np.linspace(0,20,20))], \n                        points_end = [Vector3r(x,y,-5) for x, y in zip(np.linspace(3,17,20), np.linspace(5,28,20))], \n                        color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 5.0, arrow_size = 100, thickness = 1, is_persistent = True)\n# plot points \nclient.simPlotPoints(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,20), np.linspace(0,-20,20))], color_rgba=[1.0, 0.0, 0.0, 1.0], size = 25, duration = 20.0, is_persistent = False)\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,-10,20), np.linspace(0,-20,20), np.linspace(0,-5,20))], color_rgba=[0.0, 0.0, 1.0, 1.0], size = 10, duration = 20.0, is_persistent = False)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotArrows(points_start",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotArrows(points_start = [Vector3r(x,y,-2) for x, y in zip(np.linspace(0,10,20), np.linspace(0,20,20))], \n                        points_end = [Vector3r(x,y,-5) for x, y in zip(np.linspace(3,17,20), np.linspace(5,28,20))], \n                        color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 5.0, arrow_size = 100, thickness = 1, is_persistent = True)\n# plot points \nclient.simPlotPoints(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,20), np.linspace(0,-20,20))], color_rgba=[1.0, 0.0, 0.0, 1.0], size = 25, duration = 20.0, is_persistent = False)\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,-10,20), np.linspace(0,-20,20), np.linspace(0,-5,20))], color_rgba=[0.0, 0.0, 1.0, 1.0], size = 10, duration = 20.0, is_persistent = False)\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,-20,20), np.linspace(0,-7,20))], color_rgba=[1.0, 0.0, 1.0, 1.0], size = 15, duration = 20.0, is_persistent = False)\n# plot line strip. 0-1, 1-2, 2-3\nclient.simPlotLineStrip(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot line list. 0-1, 2-3, 4-5. Must be even. ",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotArrows(points_start\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotArrows(points_start = [Vector3r(x,y,-2) for x, y in zip(np.linspace(0,10,20), np.linspace(0,20,20))], \n                        points_end = [Vector3r(x,y,-5) for x, y in zip(np.linspace(3,17,20), np.linspace(5,28,20))], \n                        color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 5.0, arrow_size = 100, thickness = 1, is_persistent = True)\n# plot points \nclient.simPlotPoints(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,20), np.linspace(0,-20,20))], color_rgba=[1.0, 0.0, 0.0, 1.0], size = 25, duration = 20.0, is_persistent = False)\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,-10,20), np.linspace(0,-20,20), np.linspace(0,-5,20))], color_rgba=[0.0, 0.0, 1.0, 1.0], size = 10, duration = 20.0, is_persistent = False)\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,-20,20), np.linspace(0,-7,20))], color_rgba=[1.0, 0.0, 1.0, 1.0], size = 15, duration = 20.0, is_persistent = False)\n# plot line strip. 0-1, 1-2, 2-3\nclient.simPlotLineStrip(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot line list. 0-1, 2-3, 4-5. Must be even. \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotPoints(points",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotPoints(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,20), np.linspace(0,-20,20))], color_rgba=[1.0, 0.0, 0.0, 1.0], size = 25, duration = 20.0, is_persistent = False)\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,-10,20), np.linspace(0,-20,20), np.linspace(0,-5,20))], color_rgba=[0.0, 0.0, 1.0, 1.0], size = 10, duration = 20.0, is_persistent = False)\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,-20,20), np.linspace(0,-7,20))], color_rgba=[1.0, 0.0, 1.0, 1.0], size = 15, duration = 20.0, is_persistent = False)\n# plot line strip. 0-1, 1-2, 2-3\nclient.simPlotLineStrip(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot line list. 0-1, 2-3, 4-5. Must be even. \nclient.simPlotLineList(points = [Vector3r(x,y,-7) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot transforms \nclient.simPlotStrings(strings = [\"Microsoft AirSim\" for i in range(5)], positions = [Vector3r(x,y,-1) for x, y in zip(np.linspace(0,5,5), np.linspace(0,0,5))], \n                        scale = 1, color_rgba=[1.0, 1.0, 1.0, 1.0], duration = 1200.0)",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotPoints(points\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotPoints(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,20), np.linspace(0,-20,20))], color_rgba=[1.0, 0.0, 0.0, 1.0], size = 25, duration = 20.0, is_persistent = False)\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,-10,20), np.linspace(0,-20,20), np.linspace(0,-5,20))], color_rgba=[0.0, 0.0, 1.0, 1.0], size = 10, duration = 20.0, is_persistent = False)\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,-20,20), np.linspace(0,-7,20))], color_rgba=[1.0, 0.0, 1.0, 1.0], size = 15, duration = 20.0, is_persistent = False)\n# plot line strip. 0-1, 1-2, 2-3\nclient.simPlotLineStrip(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot line list. 0-1, 2-3, 4-5. Must be even. \nclient.simPlotLineList(points = [Vector3r(x,y,-7) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot transforms \nclient.simPlotStrings(strings = [\"Microsoft AirSim\" for i in range(5)], positions = [Vector3r(x,y,-1) for x, y in zip(np.linspace(0,5,5), np.linspace(0,0,5))], \n                        scale = 1, color_rgba=[1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotPoints(points",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,-10,20), np.linspace(0,-20,20), np.linspace(0,-5,20))], color_rgba=[0.0, 0.0, 1.0, 1.0], size = 10, duration = 20.0, is_persistent = False)\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,-20,20), np.linspace(0,-7,20))], color_rgba=[1.0, 0.0, 1.0, 1.0], size = 15, duration = 20.0, is_persistent = False)\n# plot line strip. 0-1, 1-2, 2-3\nclient.simPlotLineStrip(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot line list. 0-1, 2-3, 4-5. Must be even. \nclient.simPlotLineList(points = [Vector3r(x,y,-7) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot transforms \nclient.simPlotStrings(strings = [\"Microsoft AirSim\" for i in range(5)], positions = [Vector3r(x,y,-1) for x, y in zip(np.linspace(0,5,5), np.linspace(0,0,5))], \n                        scale = 1, color_rgba=[1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], ",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotPoints(points\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,-10,20), np.linspace(0,-20,20), np.linspace(0,-5,20))], color_rgba=[0.0, 0.0, 1.0, 1.0], size = 10, duration = 20.0, is_persistent = False)\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,-20,20), np.linspace(0,-7,20))], color_rgba=[1.0, 0.0, 1.0, 1.0], size = 15, duration = 20.0, is_persistent = False)\n# plot line strip. 0-1, 1-2, 2-3\nclient.simPlotLineStrip(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot line list. 0-1, 2-3, 4-5. Must be even. \nclient.simPlotLineList(points = [Vector3r(x,y,-7) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot transforms \nclient.simPlotStrings(strings = [\"Microsoft AirSim\" for i in range(5)], positions = [Vector3r(x,y,-1) for x, y in zip(np.linspace(0,5,5), np.linspace(0,0,5))], \n                        scale = 1, color_rgba=[1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotPoints(points",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,-20,20), np.linspace(0,-7,20))], color_rgba=[1.0, 0.0, 1.0, 1.0], size = 15, duration = 20.0, is_persistent = False)\n# plot line strip. 0-1, 1-2, 2-3\nclient.simPlotLineStrip(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot line list. 0-1, 2-3, 4-5. Must be even. \nclient.simPlotLineList(points = [Vector3r(x,y,-7) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot transforms \nclient.simPlotStrings(strings = [\"Microsoft AirSim\" for i in range(5)], positions = [Vector3r(x,y,-1) for x, y in zip(np.linspace(0,5,5), np.linspace(0,0,5))], \n                        scale = 1, color_rgba=[1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotPoints(points\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotPoints(points = [Vector3r(x,y,z) for x, y, z in zip(np.linspace(0,10,20), np.linspace(0,-20,20), np.linspace(0,-7,20))], color_rgba=[1.0, 0.0, 1.0, 1.0], size = 15, duration = 20.0, is_persistent = False)\n# plot line strip. 0-1, 1-2, 2-3\nclient.simPlotLineStrip(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot line list. 0-1, 2-3, 4-5. Must be even. \nclient.simPlotLineList(points = [Vector3r(x,y,-7) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot transforms \nclient.simPlotStrings(strings = [\"Microsoft AirSim\" for i in range(5)], positions = [Vector3r(x,y,-1) for x, y in zip(np.linspace(0,5,5), np.linspace(0,0,5))], \n                        scale = 1, color_rgba=[1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotLineStrip(points",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotLineStrip(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot line list. 0-1, 2-3, 4-5. Must be even. \nclient.simPlotLineList(points = [Vector3r(x,y,-7) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot transforms \nclient.simPlotStrings(strings = [\"Microsoft AirSim\" for i in range(5)], positions = [Vector3r(x,y,-1) for x, y in zip(np.linspace(0,5,5), np.linspace(0,0,5))], \n                        scale = 1, color_rgba=[1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=roll, yaw=0.0)) for x, y, roll in zip(np.linspace(0,10,10), np.linspace(1,1,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotLineStrip(points\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotLineStrip(points = [Vector3r(x,y,-5) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot line list. 0-1, 2-3, 4-5. Must be even. \nclient.simPlotLineList(points = [Vector3r(x,y,-7) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot transforms \nclient.simPlotStrings(strings = [\"Microsoft AirSim\" for i in range(5)], positions = [Vector3r(x,y,-1) for x, y in zip(np.linspace(0,5,5), np.linspace(0,0,5))], \n                        scale = 1, color_rgba=[1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=roll, yaw=0.0)) for x, y, roll in zip(np.linspace(0,10,10), np.linspace(1,1,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotLineList(points",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotLineList(points = [Vector3r(x,y,-7) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot transforms \nclient.simPlotStrings(strings = [\"Microsoft AirSim\" for i in range(5)], positions = [Vector3r(x,y,-1) for x, y in zip(np.linspace(0,5,5), np.linspace(0,0,5))], \n                        scale = 1, color_rgba=[1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=roll, yaw=0.0)) for x, y, roll in zip(np.linspace(0,10,10), np.linspace(1,1,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n                                  names=[\"tf_yaw_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotLineList(points\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotLineList(points = [Vector3r(x,y,-7) for x, y in zip(np.linspace(0,-10,10), np.linspace(0,-20,10))], color_rgba=[1.0, 0.0, 0.0, 1.0], thickness = 5, duration = 30.0, is_persistent = False)\n# plot transforms \nclient.simPlotStrings(strings = [\"Microsoft AirSim\" for i in range(5)], positions = [Vector3r(x,y,-1) for x, y in zip(np.linspace(0,5,5), np.linspace(0,0,5))], \n                        scale = 1, color_rgba=[1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=roll, yaw=0.0)) for x, y, roll in zip(np.linspace(0,10,10), np.linspace(1,1,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n                                  names=[\"tf_yaw_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotStrings(strings",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotStrings(strings = [\"Microsoft AirSim\" for i in range(5)], positions = [Vector3r(x,y,-1) for x, y in zip(np.linspace(0,5,5), np.linspace(0,0,5))], \n                        scale = 1, color_rgba=[1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=roll, yaw=0.0)) for x, y, roll in zip(np.linspace(0,10,10), np.linspace(1,1,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n                                  names=[\"tf_yaw_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=roll, yaw=0.0)) for x, y, roll in zip(np.linspace(0,10,10), np.linspace(1,1,10), np.linspace(0,np.pi,10))], \n                                  names=[\"tf_roll_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotStrings(strings\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotStrings(strings = [\"Microsoft AirSim\" for i in range(5)], positions = [Vector3r(x,y,-1) for x, y in zip(np.linspace(0,5,5), np.linspace(0,0,5))], \n                        scale = 1, color_rgba=[1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)\n# client.simPlotTransforms(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=roll, yaw=0.0)) for x, y, roll in zip(np.linspace(0,10,10), np.linspace(1,1,10), np.linspace(0,np.pi,10))], \n#                         scale = 35, thickness = 5, duration = 1200.0, is_persistent = False)\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n                                  names=[\"tf_yaw_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=roll, yaw=0.0)) for x, y, roll in zip(np.linspace(0,10,10), np.linspace(1,1,10), np.linspace(0,np.pi,10))], \n                                  names=[\"tf_roll_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotTransformsWithNames(poses",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n                                  names=[\"tf_yaw_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=roll, yaw=0.0)) for x, y, roll in zip(np.linspace(0,10,10), np.linspace(1,1,10), np.linspace(0,np.pi,10))], \n                                  names=[\"tf_roll_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=pitch, roll=0.0, yaw=0.0)) for x, y, pitch in zip(np.linspace(0,10,10), np.linspace(-1,-1,10), np.linspace(0,np.pi,10))],\n                                  names=[\"tf_pitch_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\ntime.sleep(20.0)\nclient.simFlushPersistentMarkers()",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotTransformsWithNames(poses\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=0.0, yaw=yaw)) for x, y, yaw in zip(np.linspace(0,10,10), np.linspace(0,0,10), np.linspace(0,np.pi,10))], \n                                  names=[\"tf_yaw_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=roll, yaw=0.0)) for x, y, roll in zip(np.linspace(0,10,10), np.linspace(1,1,10), np.linspace(0,np.pi,10))], \n                                  names=[\"tf_roll_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=pitch, roll=0.0, yaw=0.0)) for x, y, pitch in zip(np.linspace(0,10,10), np.linspace(-1,-1,10), np.linspace(0,np.pi,10))],\n                                  names=[\"tf_pitch_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\ntime.sleep(20.0)\nclient.simFlushPersistentMarkers()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotTransformsWithNames(poses",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=roll, yaw=0.0)) for x, y, roll in zip(np.linspace(0,10,10), np.linspace(1,1,10), np.linspace(0,np.pi,10))], \n                                  names=[\"tf_roll_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=pitch, roll=0.0, yaw=0.0)) for x, y, pitch in zip(np.linspace(0,10,10), np.linspace(-1,-1,10), np.linspace(0,np.pi,10))],\n                                  names=[\"tf_pitch_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\ntime.sleep(20.0)\nclient.simFlushPersistentMarkers()",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotTransformsWithNames(poses\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=0.0, roll=roll, yaw=0.0)) for x, y, roll in zip(np.linspace(0,10,10), np.linspace(1,1,10), np.linspace(0,np.pi,10))], \n                                  names=[\"tf_roll_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=pitch, roll=0.0, yaw=0.0)) for x, y, pitch in zip(np.linspace(0,10,10), np.linspace(-1,-1,10), np.linspace(0,np.pi,10))],\n                                  names=[\"tf_pitch_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\ntime.sleep(20.0)\nclient.simFlushPersistentMarkers()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client.simPlotTransformsWithNames(poses",
        "kind": 5,
        "importPath": "plot_markers",
        "description": "plot_markers",
        "peekOfCode": "client.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=pitch, roll=0.0, yaw=0.0)) for x, y, pitch in zip(np.linspace(0,10,10), np.linspace(-1,-1,10), np.linspace(0,np.pi,10))],\n                                  names=[\"tf_pitch_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\ntime.sleep(20.0)\nclient.simFlushPersistentMarkers()",
        "detail": "plot_markers",
        "documentation": {
            "value": "\n```python\nfrom plot_markers import client.simPlotTransformsWithNames(poses\n```\n\n```python\n\n\n```\n\n```python\nclient.simPlotTransformsWithNames(poses = [Pose(position_val=Vector3r(x,y,0), orientation_val=to_quaternion(pitch=pitch, roll=0.0, yaw=0.0)) for x, y, pitch in zip(np.linspace(0,10,10), np.linspace(-1,-1,10), np.linspace(0,np.pi,10))],\n                                  names=[\"tf_pitch_\" + str(idx) for idx in range(10)], tf_scale = 35, tf_thickness = 5, text_scale = 1, text_color_rgba = [1.0, 1.0, 1.0, 1.0], duration = 1200.0)\ntime.sleep(20.0)\nclient.simFlushPersistentMarkers()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "printUsage",
        "kind": 2,
        "importPath": "point_cloud",
        "description": "point_cloud",
        "peekOfCode": "def printUsage():\n   print(\"Usage: python point_cloud.py [cloud.txt]\")\ndef savePointCloud(image, fileName):\n   f = open(fileName, \"w\")\n   for x in range(image.shape[0]):\n     for y in range(image.shape[1]):\n        pt = image[x,y]\n        if (math.isinf(pt[0]) or math.isnan(pt[0])):\n          # skip it\n          None",
        "detail": "point_cloud",
        "documentation": {
            "value": "\n```python\nfrom point_cloud import printUsage\n```\n\n```python\n\n\n```\n\n```python\ndef printUsage():\n   print(\"Usage: python point_cloud.py [cloud.txt]\")\ndef savePointCloud(image, fileName):\n   f = open(fileName, \"w\")\n   for x in range(image.shape[0]):\n     for y in range(image.shape[1]):\n        pt = image[x,y]\n        if (math.isinf(pt[0]) or math.isnan(pt[0])):\n          # skip it\n          None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "savePointCloud",
        "kind": 2,
        "importPath": "point_cloud",
        "description": "point_cloud",
        "peekOfCode": "def savePointCloud(image, fileName):\n   f = open(fileName, \"w\")\n   for x in range(image.shape[0]):\n     for y in range(image.shape[1]):\n        pt = image[x,y]\n        if (math.isinf(pt[0]) or math.isnan(pt[0])):\n          # skip it\n          None\n        else: \n          f.write(\"%f %f %f %s\\n\" % (pt[0], pt[1], pt[2]-1, rgb))",
        "detail": "point_cloud",
        "documentation": {
            "value": "\n```python\nfrom point_cloud import savePointCloud\n```\n\n```python\n\n\n```\n\n```python\ndef savePointCloud(image, fileName):\n   f = open(fileName, \"w\")\n   for x in range(image.shape[0]):\n     for y in range(image.shape[1]):\n        pt = image[x,y]\n        if (math.isinf(pt[0]) or math.isnan(pt[0])):\n          # skip it\n          None\n        else: \n          f.write(\"%f %f %f %s\\n\" % (pt[0], pt[1], pt[2]-1, rgb))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "outputFile",
        "kind": 5,
        "importPath": "point_cloud",
        "description": "point_cloud",
        "peekOfCode": "outputFile = \"cloud.asc\" \ncolor = (0,255,0)\nrgb = \"%d %d %d\" % color\nprojectionMatrix = np.array([[-0.501202762, 0.000000000, 0.000000000, 0.000000000],\n                              [0.000000000, -0.501202762, 0.000000000, 0.000000000],\n                              [0.000000000, 0.000000000, 10.00000000, 100.00000000],\n                              [0.000000000, 0.000000000, -10.0000000, 0.000000000]])\ndef printUsage():\n   print(\"Usage: python point_cloud.py [cloud.txt]\")\ndef savePointCloud(image, fileName):",
        "detail": "point_cloud",
        "documentation": {
            "value": "\n```python\nfrom point_cloud import outputFile\n```\n\n```python\n\n\n```\n\n```python\noutputFile = \"cloud.asc\" \ncolor = (0,255,0)\nrgb = \"%d %d %d\" % color\nprojectionMatrix = np.array([[-0.501202762, 0.000000000, 0.000000000, 0.000000000],\n                              [0.000000000, -0.501202762, 0.000000000, 0.000000000],\n                              [0.000000000, 0.000000000, 10.00000000, 100.00000000],\n                              [0.000000000, 0.000000000, -10.0000000, 0.000000000]])\ndef printUsage():\n   print(\"Usage: python point_cloud.py [cloud.txt]\")\ndef savePointCloud(image, fileName):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": "point_cloud",
        "description": "point_cloud",
        "peekOfCode": "color = (0,255,0)\nrgb = \"%d %d %d\" % color\nprojectionMatrix = np.array([[-0.501202762, 0.000000000, 0.000000000, 0.000000000],\n                              [0.000000000, -0.501202762, 0.000000000, 0.000000000],\n                              [0.000000000, 0.000000000, 10.00000000, 100.00000000],\n                              [0.000000000, 0.000000000, -10.0000000, 0.000000000]])\ndef printUsage():\n   print(\"Usage: python point_cloud.py [cloud.txt]\")\ndef savePointCloud(image, fileName):\n   f = open(fileName, \"w\")",
        "detail": "point_cloud",
        "documentation": {
            "value": "\n```python\nfrom point_cloud import color\n```\n\n```python\n\n\n```\n\n```python\ncolor = (0,255,0)\nrgb = \"%d %d %d\" % color\nprojectionMatrix = np.array([[-0.501202762, 0.000000000, 0.000000000, 0.000000000],\n                              [0.000000000, -0.501202762, 0.000000000, 0.000000000],\n                              [0.000000000, 0.000000000, 10.00000000, 100.00000000],\n                              [0.000000000, 0.000000000, -10.0000000, 0.000000000]])\ndef printUsage():\n   print(\"Usage: python point_cloud.py [cloud.txt]\")\ndef savePointCloud(image, fileName):\n   f = open(fileName, \"w\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "rgb",
        "kind": 5,
        "importPath": "point_cloud",
        "description": "point_cloud",
        "peekOfCode": "rgb = \"%d %d %d\" % color\nprojectionMatrix = np.array([[-0.501202762, 0.000000000, 0.000000000, 0.000000000],\n                              [0.000000000, -0.501202762, 0.000000000, 0.000000000],\n                              [0.000000000, 0.000000000, 10.00000000, 100.00000000],\n                              [0.000000000, 0.000000000, -10.0000000, 0.000000000]])\ndef printUsage():\n   print(\"Usage: python point_cloud.py [cloud.txt]\")\ndef savePointCloud(image, fileName):\n   f = open(fileName, \"w\")\n   for x in range(image.shape[0]):",
        "detail": "point_cloud",
        "documentation": {
            "value": "\n```python\nfrom point_cloud import rgb\n```\n\n```python\n\n\n```\n\n```python\nrgb = \"%d %d %d\" % color\nprojectionMatrix = np.array([[-0.501202762, 0.000000000, 0.000000000, 0.000000000],\n                              [0.000000000, -0.501202762, 0.000000000, 0.000000000],\n                              [0.000000000, 0.000000000, 10.00000000, 100.00000000],\n                              [0.000000000, 0.000000000, -10.0000000, 0.000000000]])\ndef printUsage():\n   print(\"Usage: python point_cloud.py [cloud.txt]\")\ndef savePointCloud(image, fileName):\n   f = open(fileName, \"w\")\n   for x in range(image.shape[0]):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "projectionMatrix",
        "kind": 5,
        "importPath": "point_cloud",
        "description": "point_cloud",
        "peekOfCode": "projectionMatrix = np.array([[-0.501202762, 0.000000000, 0.000000000, 0.000000000],\n                              [0.000000000, -0.501202762, 0.000000000, 0.000000000],\n                              [0.000000000, 0.000000000, 10.00000000, 100.00000000],\n                              [0.000000000, 0.000000000, -10.0000000, 0.000000000]])\ndef printUsage():\n   print(\"Usage: python point_cloud.py [cloud.txt]\")\ndef savePointCloud(image, fileName):\n   f = open(fileName, \"w\")\n   for x in range(image.shape[0]):\n     for y in range(image.shape[1]):",
        "detail": "point_cloud",
        "documentation": {
            "value": "\n```python\nfrom point_cloud import projectionMatrix\n```\n\n```python\n\n\n```\n\n```python\nprojectionMatrix = np.array([[-0.501202762, 0.000000000, 0.000000000, 0.000000000],\n                              [0.000000000, -0.501202762, 0.000000000, 0.000000000],\n                              [0.000000000, 0.000000000, 10.00000000, 100.00000000],\n                              [0.000000000, 0.000000000, -10.0000000, 0.000000000]])\ndef printUsage():\n   print(\"Usage: python point_cloud.py [cloud.txt]\")\ndef savePointCloud(image, fileName):\n   f = open(fileName, \"w\")\n   for x in range(image.shape[0]):\n     for y in range(image.shape[1]):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "point_cloud",
        "description": "point_cloud",
        "peekOfCode": "client = airsim.MultirotorClient()\nwhile True:\n    rawImage = client.simGetImage(\"0\", airsim.ImageType.DepthPerspective)\n    if (rawImage is None):\n        print(\"Camera is not returning image, please check airsim for error messages\")\n        airsim.wait_key(\"Press any key to exit\")\n        sys.exit(0)\n    else:\n        png = cv2.imdecode(np.frombuffer(rawImage, np.uint8) , cv2.IMREAD_UNCHANGED)\n        gray = cv2.cvtColor(png, cv2.COLOR_BGR2GRAY)",
        "detail": "point_cloud",
        "documentation": {
            "value": "\n```python\nfrom point_cloud import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nwhile True:\n    rawImage = client.simGetImage(\"0\", airsim.ImageType.DepthPerspective)\n    if (rawImage is None):\n        print(\"Camera is not returning image, please check airsim for error messages\")\n        airsim.wait_key(\"Press any key to exit\")\n        sys.exit(0)\n    else:\n        png = cv2.imdecode(np.frombuffer(rawImage, np.uint8) , cv2.IMREAD_UNCHANGED)\n        gray = cv2.cvtColor(png, cv2.COLOR_BGR2GRAY)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "reset_test_drone",
        "description": "reset_test_drone",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nprint(\"fly\")\nclient.moveToPositionAsync(0, 0, -10, 5).join()\nprint(\"reset\")\nclient.reset()\nclient.enableApiControl(True)\nclient.armDisarm(True)",
        "detail": "reset_test_drone",
        "documentation": {
            "value": "\n```python\nfrom reset_test_drone import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nprint(\"fly\")\nclient.moveToPositionAsync(0, 0, -10, 5).join()\nprint(\"reset\")\nclient.reset()\nclient.enableApiControl(True)\nclient.armDisarm(True)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SetupPath",
        "kind": 6,
        "importPath": "setup_path",
        "description": "setup_path",
        "peekOfCode": "class SetupPath:\n    @staticmethod\n    def getDirLevels(path):\n        path_norm = os.path.normpath(path)\n        return len(path_norm.split(os.sep))\n    @staticmethod\n    def getCurrentPath():\n        cur_filepath = __file__\n        return os.path.dirname(cur_filepath)\n    @staticmethod",
        "detail": "setup_path",
        "documentation": {
            "value": "\n```python\nfrom setup_path import SetupPath\n```\n\n```python\n\n\n```\n\n```python\nclass SetupPath:\n    @staticmethod\n    def getDirLevels(path):\n        path_norm = os.path.normpath(path)\n        return len(path_norm.split(os.sep))\n    @staticmethod\n    def getCurrentPath():\n        cur_filepath = __file__\n        return os.path.dirname(cur_filepath)\n    @staticmethod\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "set_trace_line",
        "description": "set_trace_line",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\nvehicleControl = client.moveByVelocityAsync(1, 1, 0, 12)\nclient.simSetTraceLine([1.0, 0.0, 0.0, 1.0], 5)\ntime.sleep(2)\nclient.simSetTraceLine([0.0, 1.0, 0.0, 0.8], 10)",
        "detail": "set_trace_line",
        "documentation": {
            "value": "\n```python\nfrom set_trace_line import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\nvehicleControl = client.moveByVelocityAsync(1, 1, 0, 12)\nclient.simSetTraceLine([1.0, 0.0, 0.0, 1.0], 5)\ntime.sleep(2)\nclient.simSetTraceLine([0.0, 1.0, 0.0, 0.8], 10)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vehicleControl",
        "kind": 5,
        "importPath": "set_trace_line",
        "description": "set_trace_line",
        "peekOfCode": "vehicleControl = client.moveByVelocityAsync(1, 1, 0, 12)\nclient.simSetTraceLine([1.0, 0.0, 0.0, 1.0], 5)\ntime.sleep(2)\nclient.simSetTraceLine([0.0, 1.0, 0.0, 0.8], 10)\ntime.sleep(2)\nclient.simSetTraceLine([0.0, 0.0, 1.0, 0.6], 20)\ntime.sleep(2)\nclient.simSetTraceLine([1.0, 1.0, 0.0, 0.4], 30)\ntime.sleep(2)\nclient.simSetTraceLine([0.0, 1.0, 1.0, 0.2], 40)",
        "detail": "set_trace_line",
        "documentation": {
            "value": "\n```python\nfrom set_trace_line import vehicleControl\n```\n\n```python\n\n\n```\n\n```python\nvehicleControl = client.moveByVelocityAsync(1, 1, 0, 12)\nclient.simSetTraceLine([1.0, 0.0, 0.0, 1.0], 5)\ntime.sleep(2)\nclient.simSetTraceLine([0.0, 1.0, 0.0, 0.8], 10)\ntime.sleep(2)\nclient.simSetTraceLine([0.0, 0.0, 1.0, 0.6], 20)\ntime.sleep(2)\nclient.simSetTraceLine([1.0, 1.0, 0.0, 0.4], 30)\ntime.sleep(2)\nclient.simSetTraceLine([0.0, 1.0, 1.0, 0.2], 40)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "print_state",
        "kind": 2,
        "importPath": "state",
        "description": "state",
        "peekOfCode": "def print_state():\n    print(\"===============================================================\")\n    state = client.getMultirotorState()\n    print(\"state: %s\" % pprint.pformat(state))\n    return state\nclient = airsim.MultirotorClient()\nstate = print_state()\nif state.ready:\n    print(\"drone is ready!\")\nelse:",
        "detail": "state",
        "documentation": {
            "value": "\n```python\nfrom state import print_state\n```\n\n```python\n\n\n```\n\n```python\ndef print_state():\n    print(\"===============================================================\")\n    state = client.getMultirotorState()\n    print(\"state: %s\" % pprint.pformat(state))\n    return state\nclient = airsim.MultirotorClient()\nstate = print_state()\nif state.ready:\n    print(\"drone is ready!\")\nelse:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "state",
        "description": "state",
        "peekOfCode": "client = airsim.MultirotorClient()\nstate = print_state()\nif state.ready:\n    print(\"drone is ready!\")\nelse:\n    print(\"drone is not ready!\")\nif state.ready_message:\n    print(state.ready_message)",
        "detail": "state",
        "documentation": {
            "value": "\n```python\nfrom state import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nstate = print_state()\nif state.ready:\n    print(\"drone is ready!\")\nelse:\n    print(\"drone is not ready!\")\nif state.ready_message:\n    print(state.ready_message)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "state",
        "description": "state",
        "peekOfCode": "state = print_state()\nif state.ready:\n    print(\"drone is ready!\")\nelse:\n    print(\"drone is not ready!\")\nif state.ready_message:\n    print(state.ready_message)",
        "detail": "state",
        "documentation": {
            "value": "\n```python\nfrom state import state\n```\n\n```python\n\n\n```\n\n```python\nstate = print_state()\nif state.ready:\n    print(\"drone is ready!\")\nelse:\n    print(\"drone is not ready!\")\nif state.ready_message:\n    print(state.ready_message)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SurveyNavigator",
        "kind": 6,
        "importPath": "survey",
        "description": "survey",
        "peekOfCode": "class SurveyNavigator:\n    def __init__(self, args):\n        self.boxsize = args.size\n        self.stripewidth = args.stripewidth\n        self.altitude = args.altitude\n        self.velocity = args.speed\n        self.client = airsim.MultirotorClient()\n        self.client.confirmConnection()\n        self.client.enableApiControl(True)\n    def start(self):",
        "detail": "survey",
        "documentation": {
            "value": "\n```python\nfrom survey import SurveyNavigator\n```\n\n```python\n\n\n```\n\n```python\nclass SurveyNavigator:\n    def __init__(self, args):\n        self.boxsize = args.size\n        self.stripewidth = args.stripewidth\n        self.altitude = args.altitude\n        self.velocity = args.speed\n        self.client = airsim.MultirotorClient()\n        self.client.confirmConnection()\n        self.client.enableApiControl(True)\n    def start(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "takeoff",
        "description": "takeoff",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nlanded = client.getMultirotorState().landed_state\nif landed == airsim.LandedState.Landed:\n    print(\"taking off...\")\n    client.takeoffAsync().join()\nelse:\n    print(\"already flying...\")",
        "detail": "takeoff",
        "documentation": {
            "value": "\n```python\nfrom takeoff import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nlanded = client.getMultirotorState().landed_state\nif landed == airsim.LandedState.Landed:\n    print(\"taking off...\")\n    client.takeoffAsync().join()\nelse:\n    print(\"already flying...\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "landed",
        "kind": 5,
        "importPath": "takeoff",
        "description": "takeoff",
        "peekOfCode": "landed = client.getMultirotorState().landed_state\nif landed == airsim.LandedState.Landed:\n    print(\"taking off...\")\n    client.takeoffAsync().join()\nelse:\n    print(\"already flying...\")\n    client.hoverAsync().join()",
        "detail": "takeoff",
        "documentation": {
            "value": "\n```python\nfrom takeoff import landed\n```\n\n```python\n\n\n```\n\n```python\nlanded = client.getMultirotorState().landed_state\nif landed == airsim.LandedState.Landed:\n    print(\"taking off...\")\n    client.takeoffAsync().join()\nelse:\n    print(\"already flying...\")\n    client.hoverAsync().join()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "teleport",
        "description": "teleport",
        "peekOfCode": "client = airsim.MultirotorClient()\nclient.confirmConnection()\npose = client.simGetVehiclePose()\n# teleport the drone + 10 meters in x-direction\npose.position.x_val += 10\nclient.simSetVehiclePose(pose, True, \"Drone1\")\ntime.sleep(2)\n# teleport the drone back\npose.position.x_val -= 10\nclient.simSetVehiclePose(pose, True, \"Drone1\")",
        "detail": "teleport",
        "documentation": {
            "value": "\n```python\nfrom teleport import client\n```\n\n```python\n\n\n```\n\n```python\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\npose = client.simGetVehiclePose()\n# teleport the drone + 10 meters in x-direction\npose.position.x_val += 10\nclient.simSetVehiclePose(pose, True, \"Drone1\")\ntime.sleep(2)\n# teleport the drone back\npose.position.x_val -= 10\nclient.simSetVehiclePose(pose, True, \"Drone1\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pose",
        "kind": 5,
        "importPath": "teleport",
        "description": "teleport",
        "peekOfCode": "pose = client.simGetVehiclePose()\n# teleport the drone + 10 meters in x-direction\npose.position.x_val += 10\nclient.simSetVehiclePose(pose, True, \"Drone1\")\ntime.sleep(2)\n# teleport the drone back\npose.position.x_val -= 10\nclient.simSetVehiclePose(pose, True, \"Drone1\")",
        "detail": "teleport",
        "documentation": {
            "value": "\n```python\nfrom teleport import pose\n```\n\n```python\n\n\n```\n\n```python\npose = client.simGetVehiclePose()\n# teleport the drone + 10 meters in x-direction\npose.position.x_val += 10\nclient.simSetVehiclePose(pose, True, \"Drone1\")\ntime.sleep(2)\n# teleport the drone back\npose.position.x_val -= 10\nclient.simSetVehiclePose(pose, True, \"Drone1\")\n```\n",
            "supportThemeIcons": false
        }
    }
]